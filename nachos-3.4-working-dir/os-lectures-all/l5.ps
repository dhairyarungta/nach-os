%!PS-Adobe-3.0
%%Title: (l5)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:26 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 5
%%DocumentFonts: Times-Bold Times-Roman Times-Italic Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Times-Italic Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 123 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Times-Italic :mre
/f5_1 f4_1 1.087 scf
/f5_12 f5_1 12 scf
/f6_1/Courier :mre
/f6_12 f6_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 5)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
6.149 .615(Lecture 5: Synchronization: Too Much Milk)J
60 91 :M
9.708 .971(5.0 Motivation)J
126 121 :M
f3_12 sf
4.602 .46(Person A)J
314 121 :M
3.847 .385(Person B)J
55 136 :M
1.27(3:00)A
126 136 :M
2.358 .236(Look in fridge.  Out of milk.)J
55 151 :M
1.27(3:05)A
126 151 :M
4.23 .423(Leave for store.)J
55 166 :M
1.27(3:10)A
126 166 :M
4.692 .469(Arrive at store.)J
314 166 :M
2.358 .236(Look in fridge.  Out of milk.)J
55 181 :M
1.27(3:15)A
126 181 :M
3.787 .379(Buy milk.)J
314 181 :M
4.23 .423(Leave for store.)J
55 196 :M
1.27(3:20)A
126 196 :M
4.29 .429(Arrive home, put milk away.)J
314 196 :M
4.692 .469(Arrive at store.)J
55 211 :M
1.27(3:25)A
314 211 :M
3.787 .379(Buy milk.)J
55 226 :M
1.27(3:30)A
314 226 :M
4.29 .429(Arrive home, put milk away.)J
314 241 :M
1.61 .161(Oh no!)J
60 289 :M
f1_14 sf
9.655 .965(5.1 Definitions)J
96 322 :M
f1_12 sf
1.238(Synchronization:)A
f3_12 sf
4.455 .445( using atomic operations to ensure)J
96 340 :M
6.695 .669(cooperation between threads)J
96 394 :M
f1_12 sf
8.28 .828(Mutual exclusion:)J
f3_12 sf
4.027 .403( ensuring that only one thread does a)J
96 412 :M
3.216 .322(particular thing at a time.  One thread doing it )J
f5_12 sf
1.11(excludes)A
f3_12 sf
2.92 .292( the)J
96 430 :M
4.279 .428(other, and vice versa.)J
96 484 :M
f1_12 sf
5.083 .508(Critical section: )J
f3_12 sf
3.888 .389(piece of code that only one thread can)J
96 502 :M
3.06 .306(execute at once.  Only one thread at a time will get into the)J
96 520 :M
3.368 .337(section of code.)J
96 574 :M
f1_12 sf
1.161(Lock:)A
f3_12 sf
4.44 .444( prevents someone from doing something.)J
96 610 :M
4.131 .413(1\) Lock before entering critical section, before accessing shared)J
114 628 :M
1.758(data)A
96 646 :M
4.197 .42(2\) unlock when leaving, after done accessing shared data)J
96 664 :M
3.297 .33(3\) wait if locked)J
132 682 :M
4.108 .411(Key idea -- all synchronization involves waiting.)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 117 :M
f1_14 sf
4.92 .492(5.2 Too Much Milk: Solution #1)J
126 150 :M
f3_12 sf
4.181 .418(What are the correctness properties for the too much milk)J
126 168 :M
1.392(problem?)A
126 186 :M
3.031 .303(     never more than one person buys)J
126 204 :M
2.642 .264(     someone buys if needed)J
126 240 :M
4.055 .406(Restrict ourselves to only use atomic load and store operations)J
126 258 :M
4.163 .416(as building blocks.)J
126 312 :M
3.029 .303(Basic idea of solution #1:)J
126 330 :M
2.451 .245(  1. Leave a note \(kind of like "lock"\))J
126 348 :M
2.753 .275(  2. Remove note \(kind of like "unlock"\))J
126 366 :M
2.829 .283(  3. don't buy if note \(wait\))J
126 414 :M
f1_12 sf
8.556 .856(Solution #1:)J
162 433 :M
f6_12 sf
-.212(  if \(noMilk\) {)A
162 451 :M
-.248(     )A
234 451 :M
-.216(if \(noNote\){)A
234 469 :M
-.218(leave Note;)A
234 487 :M
-.223(buy milk;)A
234 505 :M
-.216(remove note;)A
234 523 :M
(})S
198 541 :M
(})S
126 573 :M
f3_12 sf
3.974 .397(Why doesn't this work?  Thread can get context switched after)J
126 591 :M
3.979 .398(checking milk and note, but before buying milk!)J
126 627 :M
3.886 .389(Our "solution" makes problem worse -- fails only occassionally.)J
126 645 :M
3.696 .37(Makes it really hard to debug.  Remember, constraint has to be)J
126 663 :M
4.488 .449(satisfied, independent of what the dispatcher does -- timer can)J
126 681 :M
3.483 .348(go off, and context switch can happen at any time.)J
90 714 :M
f1_14 sf
4.991 .499(5.3 Too Much Milk Solution #2)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.478 .348(How about labelled notes?  That way, we can leave the note)J
126 120 :M
4.392 .439(before checking the milk.)J
126 153 :M
f1_12 sf
8.556 .856(Solution #2:)J
130 172 :M
f6_12 sf
-.223( Thread A)A
346 172 :M
-.223( Thread B)A
130 190 :M
-.216(leave note A)A
130 208 :M
-.213(if \(noNote B\){)A
130 226 :M
-.215(  if \(noMilk\))A
130 244 :M
-.216(    buy milk)A
130 262 :M
-.297(  })A
130 280 :M
-.215(remove note A)A
346 190 :M
-.216(leave note B)A
346 208 :M
-.215(if \(noNoteA\){)A
346 226 :M
-.215(  if \(noMilk\))A
346 244 :M
-.216(    buy milk)A
346 262 :M
-.297(  })A
346 280 :M
-.215(remove note B)A
126 312 :M
f3_12 sf
4.04 .404(Possible for neither thread to buy milk; context switches at)J
126 330 :M
3.622 .362(exactly the wrong times can lead each to think the other is)J
126 348 :M
3.373 .337(going to buy.)J
126 366 :M
5.996 .6(Illustrates )J
f1_12 sf
1.363(starvation)A
f3_12 sf
5.258 .526(: thread waits forever)J
90 420 :M
f1_14 sf
4.991 .499(5.4 Too Much Milk Solution #3)J
126 468 :M
f1_12 sf
8.556 .856(Solution #3:)J
130 487 :M
f6_12 sf
-.223( Thread A)A
346 487 :M
-.223( Thread B)A
126 505 :M
-.216(leave note A)A
126 523 :M
-.21(while \(note B\)// X)A
126 541 :M
-.211(   do nothing; if)A
126 559 :M
-.227(\(noMilk\))A
126 577 :M
-.216(   buy milk;)A
126 595 :M
-.215(remove note A)A
346 505 :M
-.216(leave note B)A
346 523 :M
-.211(if \(noNoteA\){// Y)A
346 541 :M
-.215(  if \(noMilk\))A
346 559 :M
-.216(    buy milk)A
346 577 :M
-.297(  })A
346 595 :M
-.215(remove note B)A
126 645 :M
f3_12 sf
2.702 .27(Does this work?  Yes.  Can guarantee at X and Y that either)J
126 663 :M
2.476 .248(  \(i\) safe for me to buy)J
126 681 :M
2.642 .264(  \(ii\) other will buy, ok to quit)J
126 717 :M
2.825 .282(At Y: if noNote A, safe for B to buy \(means A hasn't started yet\))J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
2.171 .217(      if note A, A is either buying, or waiting for B to quit,)J
162 102 :M
2.311 .231(so ok for B to quit)J
126 138 :M
2.218 .222(At X: if nonote B, safe to buy)J
126 156 :M
2.105 .21(      if note B, don't know.  A hangs around.  Either:)J
162 174 :M
2.794 .279(if B buys, done)J
162 192 :M
2.545 .255(if B doesn't buy, A will.)J
90 228 :M
f1_14 sf
5.443 .544(5.5 Too Much Milk Summary)J
126 264 :M
f3_12 sf
4.333 .433(Solution #3 works, but it's really unsatisfactory:)J
126 300 :M
3.92 .392(1. really complicated -- even for this simple an example, hard)J
144 318 :M
4.108 .411(to convince yourself it really works)J
126 336 :M
3.068 .307(2. A's code different than B's -- what if lots of threads?  Code)J
144 354 :M
4.065 .406(would have to be slightly different for each thread.)J
126 372 :M
2.868 .287(3. While A is waiting, it is consuming CPU time \()J
f1_12 sf
1.247(busy-)A
144 390 :M
1.598(waiting)A
f3_12 sf
(\))S
126 426 :M
4.394 .439(There's a better way: use higher-level atomic operations; load)J
126 444 :M
3.382 .338(and store are too primitive.  For example, why not use locks as)J
126 462 :M
3.449 .345(an atomic building block \(how we do this in the next lecture\):)J
126 498 :M
2.998 .3(  Lock::Acquire -- wait until lock is free, then grab it)J
126 516 :M
3.028 .303(  Lock::Release -- unlock, waking up a waiter if any)J
126 552 :M
4.052 .405(These must be atomic operations -- if two threads are waiting)J
126 570 :M
3.124 .312(for the lock, and both see it's free, only one grabs it!)J
126 606 :M
3.808 .381(With locks, the too much milk problem becomes really easy!)J
162 643 :M
f6_12 sf
-.211(lock->Acquire\(\);)A
162 661 :M
-.218(if \(nomilk\))A
162 679 :M
-.218(  buy milk;)A
162 697 :M
-.211(lock->Release\(\);)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
endp
%%Trailer
end		% md
%%EOF
