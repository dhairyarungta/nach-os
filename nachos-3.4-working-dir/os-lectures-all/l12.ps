%!PS-Adobe-3.0
%%Title: (l12)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:17 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 8
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 139 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 8)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.128 .713(Lecture 12: Memory Management: The Kernel,)J
60 73 :M
8.551 .855(Address Spaces, and Protection)J
60 127 :M
7.072 .707(12.0 Main Points:)J
96 145 :M
f3_12 sf
4.193 .419(What is an address space?)J
96 163 :M
4.319 .432(How is it implemented?)J
96 199 :M
6.699 .67(Physical memory)J
312 199 :M
6.628 .663(Abstraction: virtual)J
312 217 :M
1.707(memory)A
96 235 :M
4.964 .496(No protection)J
96 271 :M
4.84 .484(Limited size)J
96 289 :M
4.726 .473(Sharing visible to programs)J
96 325 :M
4.425 .443(Easy to share data between)J
114 343 :M
1.392(programs)A
312 235 :M
4.554 .455(Each program isolated from)J
330 253 :M
4.021 .402(all others and from the)J
330 271 :M
-1.668(OS)A
312 289 :M
4.708 .471(Illusion of infinite memory)J
312 307 :M
4.372 .437(Transparent -- can't tell if)J
330 325 :M
5.508 .551(memory is shared)J
312 343 :M
3.898 .39(Ability to share code, data)J
60 397 :M
f1_14 sf
8.462 .846(12.1 Motivation for protection)J
96 433 :M
f3_12 sf
4.127 .413(What we've done so far: link program with operating system.)J
96 451 :M
2.959 .296(PCs work this way:  just load program into low memory, OS in)J
96 469 :M
3.944 .394(high memory \(each program can assume it starts at location 0\).)J
96 505 :M
4.595 .459(Problem: If program crashes, operating system may be)J
96 523 :M
4.331 .433(corrupted.  In worst case, program might overwrite disk!)J
96 559 :M
2.642 .264(Goal of )J
f1_12 sf
.99(protection)A
f3_12 sf
3.61 .361(: Firewalls to)J
96 577 :M
3.158 .316(  Keep user programs from crashing OS)J
96 595 :M
3.725 .373(  Keep user programs from crashing each other)J
60 649 :M
f1_14 sf
8.33 .833(12.2 Hardware support for protection)J
96 685 :M
f3_12 sf
5.152 .515(How is protection implemented?)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
7.148 .715(Hardware support:)J
162 120 :M
7.705 .77(address translation)J
162 138 :M
5.47 .547(dual mode operation)J
90 174 :M
f1_14 sf
10.582 1.058(12.3 Address translation)J
126 210 :M
f1_12 sf
7.602 .76(Address space)J
f3_12 sf
4.238 .424(: literally, all the addresses a program can)J
126 228 :M
3.338 .334(touch.  All the state that a program can affect or be affected by.)J
126 264 :M
3.765 .376(Restrict what a program can do by restricting what it can)J
126 282 :M
.936(touch!)A
126 318 :M
5.654 .565(Hardware translates every memory reference from virtual)J
126 336 :M
4.697 .47(addresses to phyiscal addresses; software sets up and manages)J
126 354 :M
4.303 .43(the mapping in the translation box.)J
126 357 392 229 rC
271 429 -1 1 292 502 1 271 428 @a
-1 -1 272 429 1 1 286 387 @b
286 388 -1 1 363 387 1 286 387 @a
362 388 -1 1 374 413 1 362 387 @a
-1 -1 364 480 1 1 373 413 @b
-1 -1 292 503 1 1 363 479 @b
442.5 387.5 74 127 rS
45 43 171 434 @f
155 438 :M
-.684(CPU)A
285 411 :M
(Translation)S
285 427 :M
(     Box)S
285 443 :M
(    \(MMU\))S
448 407 :M
(Physical)S
448 423 :M
(Memory)S
13 139 187 274 409 @k
-1 -1 196 435 1 1 268 410 @b
13 171 219 440 422 @k
370 403 -1 1 435 421 1 370 402 @a
13 140 188 436 504 @k
13 -40 8 285 549 @k
-1 -1 292 549 1 1 430 505 @b
13 198 246 285 549 @k
13 18 66 182 456 @k
186 461 -1 1 282 545 1 186 460 @a
193 395 :M
(Virtual)S
193 411 :M
(Address)S
379 386 :M
(Physical)S
379 402 :M
(Address)S
241 565 :M
(Data read or write)S
241 581 :M
(\(untranslated\))S
gR
gS 30 31 552 730 rC
154 601 :M
f1_12 sf
6.39 .639(   Address Translation in Modern Architectures)J
126 637 :M
f3_12 sf
3.864 .386(Two views of memory:)J
126 655 :M
.704 .07(  )J
162 655 :M
3.981 .398(view from the CPU -- what program sees, virtual memory)J
126 673 :M
.704 .07(  )J
162 673 :M
4.87 .487(view from memory -- physical memory)J
126 709 :M
4.589 .459(Translation box converts between the two views.)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 321 365 rC
149.5 91.5 66 112 rS
150 118 -1 1 216 117 1 150 117 @a
150 173 -1 1 216 172 1 150 172 @a
149 147 -1 1 215 146 1 149 146 @a
164 108 :M
f3_12 sf
(code)S
165 135 :M
(data)S
165 162 :M
(heap)S
163 194 :M
(stack)S
379.5 91.5 66 112 rS
380 119 -1 1 446 118 1 380 118 @a
380 174 -1 1 446 173 1 380 173 @a
379 148 -1 1 445 147 1 379 147 @a
394 109 :M
(code)S
395 136 :M
(data)S
395 163 :M
(heap)S
393 195 :M
(stack)S
262.5 89.5 73 301 rS
13 199 247 262 148 @k
216 105 -1 1 259 144 1 216 104 @a
13 9 57 335 103 @k
340 107 -1 1 378 131 1 340 106 @a
13 -55 -7 332 218 @k
-1 -1 338 216 1 1 379 189 @b
13 101 149 260 120 @k
-1 -1 216 186 1 1 257 125 @b
13 -90 -42 334 265 @k
-1 -1 337 261 1 1 380 159 @b
13 164 212 260 170 @k
214 164 -1 1 255 170 1 214 163 @a
13 222 270 259 238 @k
214 135 -1 1 258 233 1 214 134 @a
153 227 :M
(prog 1)S
397 226 :M
(prog2)S
13 -86 -38 335 192 @k
-1 -1 339 188 1 1 379 107 @b
275 150 :M
(code1)S
278 198 :M
(code2)S
280 242 :M
(data1)S
283 106 :M
(data2)S
278 125 :M
(stack1)S
282 222 :M
(stack2)S
279 174 :M
(heap1)S
281 266 :M
(heap2)S
155 253 :M
(virtual)S
155 269 :M
(address)S
155 285 :M
(space)S
394 249 :M
(virtual)S
394 265 :M
(address)S
394 281 :M
(space)S
270 416 :M
(physical)S
270 432 :M
(memory)S
273 303 :M
(OS code)S
275 331 :M
(OS data)S
271 363 :M
(OS heap)S
271 379 :M
(& stacks)S
gR
gS 30 31 552 730 rC
210 452 :M
f1_12 sf
7.833 .783(Example of Address Translation)J
126 488 :M
f3_12 sf
4.708 .471(Translation helps implement protection because no way for)J
126 506 :M
4.456 .446(program to even talk about other program's addresses; no way)J
126 524 :M
3.901 .39(for them to touch operating system code or data.)J
126 560 :M
4.276 .428(Translation can be implemented in any number of ways --)J
126 578 :M
3.852 .385(typically, by some form of table lookup \(we'll discuss various)J
126 596 :M
4.441 .444(options for implementing the translation box later\).  Separate)J
126 614 :M
4.24 .424(table for each user address space.)J
90 650 :M
f1_14 sf
7.666 .767(12.4 Dual mode operation)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.591 .359(Can application modify its own translation tables?  If it could,)J
126 102 :M
3.215 .321(could get access to all of physical memory.  Has to be restricted)J
126 120 :M
1.107(somehow.)A
126 156 :M
f1_12 sf
10.909 1.091(Dual-mode operation)J
126 174 :M
f3_12 sf
3.005 .301(    when in the OS, can do anything \(kernel-mode\))J
126 192 :M
3.291 .329(    when in a user program, restricted to only touching that)J
126 210 :M
7.166 .717(program's memory \(user-mode\))J
126 246 :M
3.778 .378(Hardware requires CPU to be in )J
f1_12 sf
1.285(kernel-mode)A
f3_12 sf
3.769 .377( to modify)J
126 264 :M
6.224 .622(address translation tables.)J
126 318 :M
3.221 .322(This is how Nachos works \(and most UNIXes and other non-PC)J
126 336 :M
-.011(OS's\):)A
126 354 :M
.704 .07(  )J
162 354 :M
4.038 .404(OS  runs in kernel mode \(untranslated\))J
126 372 :M
.704 .07(  )J
162 372 :M
4.7 .47(User programs run in user mode \(translated\))J
126 408 :M
3.676 .368(Want to isolate each address space so its behavior can't do any)J
126 426 :M
3.969 .397(harm, except to itself.)J
126 480 :M
3.575 .358(A couple issues:)J
126 498 :M
2.548 .255(      1. How do programs interact?  \(Deal with this later.\))J
126 516 :M
2.828 .283(      2. Share CPU between kernel and user programs)J
126 534 :M
3.858 .386(How does this work?)J
126 552 :M
2.191 .219(  Kernel -> user)J
126 570 :M
1.846 .185(  User -> Kernel)J
90 606 :M
f1_12 sf
6.313 .631(12.4.1 Kernel -> user:)J
126 624 :M
f3_12 sf
3.62 .362(To run a user program, create a thread to:)J
144 642 :M
4.219 .422(allocate and initialize address space control block)J
144 660 :M
4.164 .416(read program off disk and store in memory)J
144 678 :M
4.474 .447(allocate and initialize translation table \(point to program)J
144 696 :M
1.532(memory\))A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
144 84 :M
f3_12 sf
3.897 .39(run program \(or to return to user level after calling the)J
144 102 :M
1.064(kernel\):)A
144 120 :M
2.553 .255(      set machine registers)J
162 138 :M
4.648 .465( set hardware pointer to translation table)J
144 156 :M
2.979 .298(      set processor status word \(user vs. kernel\))J
144 174 :M
2.398 .24(      jump to start of program)J
90 210 :M
f1_12 sf
8.047 .805(12.4.2 User-> kernel:)J
126 246 :M
f3_12 sf
3.884 .388(How does the user program get back into the kernel?)J
126 282 :M
6.166 .617(Voluntarily user->kernel: )J
f1_12 sf
6.21 .621(System call)J
f3_12 sf
3.966 .397( -- special instruction to)J
126 300 :M
3.524 .352(jump to a specific operating system handler.  Just like doing a)J
126 318 :M
4.655 .466(procedure call into the operating system kernel -- program)J
126 336 :M
3.979 .398(asks OS kernel, please do something on procedure's behalf.)J
126 372 :M
2.772 .277(Can the user program call any routine in the OS?  No.  Just)J
126 390 :M
3.313 .331(specific ones the OS says is ok.  Always start running handler at)J
126 408 :M
5.049 .505(same place, otherwise, problems!)J
126 444 :M
6.281 .628(Involuntarily user->kernel: )J
f1_12 sf
8.354 .835(Hardware interrupt)J
f3_12 sf
3.836 .384(, also)J
126 462 :M
f1_12 sf
10.615 1.062(program exception)J
126 498 :M
f3_12 sf
4.556 .456(Examples of program exceptions:)J
162 516 :M
6.271 .627(bus error)J
162 534 :M
7.144 .714(segmentation fault)J
162 552 :M
4.24 .424(page fault \(important for providing illusion of infinite)J
126 570 :M
1.532(memory\))A
126 624 :M
4.418 .442(On system call, interrupt, or exception: hardware atomically)J
162 642 :M
4.712 .471(sets processor status to kernel)J
162 660 :M
4.543 .454(changes execution stack to kernel)J
162 678 :M
5.819 .582(saves current program counter)J
162 696 :M
4.474 .447(jumps to handler in kernel)J
162 714 :M
4.33 .433(handler saves previous state of any registers it uses)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 6 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.607 .461(Context switching between programs: same as with threads,)J
126 120 :M
4.232 .423(except now also save and restore pointer to translation table.)J
126 138 :M
3.932 .393(To resume a program, re-load registers, change PSL, and jump)J
126 156 :M
1.535 .153(to old PC.)J
126 192 :M
4.202 .42(How does the system call pass arguments?)J
162 210 :M
3.992 .399(a. Use registers)J
162 228 :M
3.962 .396(b. Write into user memory, kernel copies into its memory)J
198 246 :M
4.509 .451(Except:  user addresses -- translated)J
126 264 :M
.676 .068(             )J
234 264 :M
6.432 .643(kernel addresses -- untranslated)J
126 282 :M
4.342 .434(Addresses the kernel sees are not the same addresses as what)J
126 300 :M
3.419 .342(the user sees!  Solving this riddle is a large part of assignment)J
126 318 :M
1.217(2.)A
90 354 :M
f1_14 sf
9.876 .988(12.5 Operating system structure)J
126 375 286 220 rC
273 590 :M
f3_12 sf
(Hardware)S
223 555 :M
(Machine-dependent OS layer)S
255 512 :M
(Portable OS layer)S
275 419 :M
(Application)S
250 462 :M
(Application library)S
137 436 :M
(User mode)S
132 524 :M
(Kernel mode)S
216.5 385.5 193 89 rS
216.5 484.5 194 79 rS
217 447 -1 1 410 446 1 217 446 @a
217 537 -1 1 411 536 1 217 536 @a
gR
gS 30 31 552 730 rC
171 610 :M
f1_12 sf
5.941 .594(  Typical UNIX Operating System Structure)J
126 646 :M
f3_12 sf
2.646 .265(How does Nachos fit in?  Nachos is the portable OS layer.  It)J
126 664 :M
6.157 .616(simulates the hardware and machine-dependent layer)J
126 682 :M
4.138 .414(\(interrupts, etc.\), and it simulates the execution of user)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 7 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.566 .357(programs running on top.  \(In Nachos, to run a user program,)J
126 102 :M
3.443 .344(you call simulator, instead of jumping to the correct PC.\))J
126 138 :M
2.859 .286(Why do it this way, instead of building an OS on a real)J
126 156 :M
1.29(machine?)A
126 192 :M
3.744 .374(1. Could run Nachos on real hardware -- simply replace)J
126 210 :M
5.211 .521(simulation with real hardware, and write machine dependent)J
126 228 :M
1.119(layer!)A
126 264 :M
3.218 .322(2. Can still run normal UNIX programs)J
126 300 :M
4.383 .438(3. Want debugger, printf, multiple users, and simpler debug)J
126 318 :M
4.765 .476(cycle \(5 second turnaround vs. 10 minute turnaround\))J
126 354 :M
3.495 .35(4. This is done in real life: isolate from hardware flakiness --)J
126 372 :M
3.987 .399(make sure it works before you try it on the hardware)J
90 408 :M
f1_14 sf
8.087 .809(12.6 An Example of Application-Kernel Interaction:)J
90 426 :M
5.356 .536(Shells and UNIX fork)J
126 462 :M
f3_12 sf
3.902 .39(Shell -- user program \(not part of the kernel!\))J
126 480 :M
3.094 .309(     prompts users to type command)J
126 498 :M
2.701 .27(     does system call to run command)J
126 534 :M
3.078 .308(In Nachos, system call to run command is simply "exec".  But)J
126 552 :M
3.554 .355(UNIX works a bit differently than Nachos.)J
126 606 :M
3.111 .311(UNIX idea: separate notion of fork vs. exec)J
126 642 :M
2.625 .263(       fork -- create a new process, exact copy of current one)J
126 660 :M
3.077 .308(       exec -- change current process to run different program)J
126 714 :M
2.633 .263(To run a program in UNIX:)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 8 of 8)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
1.73 .173(       fork a process)J
126 120 :M
1.94 .194(       in child, exec program)J
126 138 :M
2.223 .222(       in parent, wait for child to finish)J
126 174 :M
1.999 .2(UNIX fork:)J
126 192 :M
2.489 .249(      stop current process)J
126 210 :M
2.051 .205(      create exact copy)J
126 228 :M
2.056 .206(      put on ready list)J
126 246 :M
2.216 .222(      resume original)J
126 282 :M
4.01 .401(Original has code/data/stack.  Copy has exactly the same thing!)J
126 318 :M
3.667 .367(Only difference between child and parent is: UNIX changes one)J
126 336 :M
4.563 .456(register in child before resume.)J
126 354 :M
3.919 .392(Child process:)J
126 372 :M
1.715 .171(      Exec program)J
162 390 :M
5.1 .51(Stop process)J
162 408 :M
4.339 .434(Copy new program over current one)J
162 426 :M
4.205 .42(resume at location 0)J
126 480 :M
3.531 .353(Justification was to allow I/O \(pipes, redirection, etc.\), to be set)J
126 498 :M
3.355 .335(up between fork and exec.  Child can access shell's data)J
126 516 :M
4.494 .449(structures to see whether there is any I/O redirection, then)J
126 534 :M
3.492 .349(sets it up before exec.)J
126 570 :M
3.49 .349(Nachos simply combines UNIX fork and exec into one operation.)J
endp
%%Trailer
end		% md
%%EOF
