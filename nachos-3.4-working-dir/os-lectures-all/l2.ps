%!PS-Adobe-3.0
%%Title: (l2)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:20 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 7
%%DocumentFonts: Times-Bold Times-Roman Times-Italic
%%DocumentNeededFonts: Times-Bold Times-Roman Times-Italic
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 142 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Times-Italic :mre
/f5_1 f4_1 1.087 scf
/f5_12 f5_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 7)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
8.028 .803(Lecture 2: Concurrency: Threads, Address Spaces)J
60 73 :M
10.449 1.045(and Processes)J
60 106 :M
6.124 .612(2.0 Main point:)J
96 124 :M
f3_12 sf
5.794 .579(What are threads?)J
96 142 :M
4.304 .43(How are they related to processes and address spaces?)J
60 178 :M
f1_14 sf
7.979 .798(2.1 Operating systems have two general functions:)J
96 214 :M
f1_12 sf
5.113 .511(1. Coordinator: )J
f3_12 sf
3.904 .39( allow several things to work together in)J
114 232 :M
4.766 .477(efficient and fair ways \(examples: concurrency, memory)J
114 250 :M
5.362 .536(protection, file systems, networking\))J
96 301 :M
f1_12 sf
5.643 .564(2. Standard services: )J
f3_12 sf
6.369 .637(provide standard facilities that)J
114 319 :M
5.588 .559(everyone needs \(examples: standard libraries, windowing)J
114 337 :M
1.337(systems\))A
60 388 :M
f1_14 sf
6.753 .675(2.2 Concurrency: example of OS as coordinator)J
96 421 :M
f3_12 sf
3.428 .343(OS has to coordinate all the activity on a machine -- multiple)J
96 439 :M
4.834 .483(users, I/O interrupts, etc.)J
96 475 :M
3.713 .371(How can it keep all these things straight?)J
96 511 :M
4.254 .425(Answer: Decompose hard problem into simpler ones.  Instead)J
96 529 :M
3.692 .369(of dealing with everything going on at once, separate so deal)J
96 547 :M
3.325 .333(with one at a time.)J
60 583 :M
f1_14 sf
11.134 1.113(2.3 Processes)J
96 616 :M
f1_12 sf
5.553 .555(Process: )J
f3_12 sf
5.064 .506(Operating system abstraction to represent what is)J
96 634 :M
3.634 .363(needed to run a single program \(this is the traditional UNIX)J
96 652 :M
.994(definition\))A
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.618 .362(Formally, a process is a sequential stream of execution in its)J
126 102 :M
5.049 .505(own address space.)J
90 135 :M
f1_12 sf
5.894 .589(2.3.1 Two parts to a process:)J
126 171 :M
5.641 .564(1. sequential execution: )J
f3_12 sf
4.572 .457( No concurrency inside a process --)J
144 189 :M
6.994 .699(everything happens sequentially.)J
126 225 :M
f1_12 sf
4.64 .464(2. process state: )J
f3_12 sf
6.199 .62(everything that interacts with process.)J
126 261 :M
2.457 .246(    registers)J
126 279 :M
2.679 .268(    main memory)J
126 297 :M
1.216 .122(    files in UNIX)J
90 333 :M
f1_12 sf
7.018 .702(2.3.2 Process =? Program)J
126 369 :M
f3_12 sf
1.888 .189(A )J
f1_12 sf
1.257(program)A
f3_12 sf
3.26 .326( is C statements or commands \(vi, ls\))J
123 395 400 193 rC
140.5 425.5 180 159 rS
148 450 :M
(main\(\){)S
148 466 :M
-.392(...)A
148 482 :M
(})S
148 498 :M
(A\(\) {)S
148 514 :M
-.392(...)A
148 530 :M
(})S
193 578 :M
-.416(PROGRAM)A
341.5 427.5 180 159 rS
349 452 :M
(main\(\){)S
349 468 :M
-.392(...)A
349 484 :M
(})S
349 500 :M
(A\(\) {)S
349 516 :M
-.392(...)A
349 532 :M
(})S
401 581 :M
-.756(PROCESS)A
438.5 489.5 68 60 rS
452 543 :M
(main)S
460 528 :M
(A)S
439 567 :M
(registers, PC)S
454 449 :M
(heap)S
454 505 :M
(stack)S
437.5 437.5 69 41 rS
gR
gS 30 31 552 730 rC
126 638 :M
f3_12 sf
3.328 .333(1. More to a process than just a program:)J
126 674 :M
2.763 .276(     program is just part of process state.)J
126 710 :M
2.988 .299(     I run ls; you run ls -- same program, different processes.)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 120 :M
f3_12 sf
3.275 .327(2. Less to a process than a program:)J
126 156 :M
2.952 .295(    A program can invoke more than one process to get the job)J
126 174 :M
1.548(done)A
126 210 :M
2.863 .286(     cc starts up cpp, cc1, cc2, as \(each are programs themselves\))J
90 264 :M
f1_12 sf
10.305 1.031(2.3.3 Definitions)J
126 297 :M
1.105(Uniprogramming)A
f3_12 sf
2.937 .294(: one process at a time \(ex: MS/DOS,)J
126 315 :M
.955(Macintosh\))A
126 351 :M
3.823 .382(Easier for operating system builder: get rid of problem of)J
126 369 :M
4.043 .404(concurrency by defining it away.  For personal computers, idea)J
126 387 :M
3.218 .322(was: one user does only one thing at a time.)J
126 423 :M
4.108 .411(Harder for user: can't work while waiting for printer)J
126 477 :M
f1_12 sf
1.233(Multiprogramming)A
f3_12 sf
3.287 .329(: more than one process at a time \(UNIX,)J
126 495 :M
.961(OS/2\))A
126 513 :M
5.01 .501(\(often called multitasking, but multitasking sometimes has)J
126 531 :M
3.61 .361(other meanings -- see below -- so not used in this course\).)J
90 585 :M
f1_14 sf
9.533 .953(2.4 Threads)J
126 618 :M
f1_12 sf
1.349(Thread)A
f3_12 sf
4.169 .417(: a sequential execution stream within a process)J
126 636 :M
4.574 .457(\(concurrency\) \(Sometimes called: a "lightweight" process.\))J
126 672 :M
f1_12 sf
8.17 .817(Address space:)J
f3_12 sf
3.874 .387( all the state needed to run a program)J
126 690 :M
4.021 .402(\(literally, all the addresses that can be touched by the)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.854 .385(program\).  Provide illusion that program is running on its own)J
126 102 :M
6.578 .658(machine \(protection\).)J
90 138 :M
f1_12 sf
8.137 .814(2.4.1 Why separate these concepts?)J
126 174 :M
f3_12 sf
3.691 .369(1. Discuss the "thread" part of a process, separately from the)J
144 192 :M
3.817 .382("address space" part of a process.)J
126 228 :M
3.424 .342(2. Some systems \(including new versions of UNIX\) allow)J
144 246 :M
5.247 .525(multiple threads per address space.)J
126 282 :M
f1_12 sf
7.537 .754(Multithreading: )J
f3_12 sf
3.851 .385(a single program made up of a number of)J
126 300 :M
5.555 .555(different concurrent activities \(sometimes called multitasking,)J
126 318 :M
3.045 .304(as in Ada, just to be confusing!\))J
90 351 :M
f1_12 sf
8.309 .831(2.4.2 Examples of multithreaded programs)J
126 387 :M
f3_12 sf
4.673 .467(Robot control: single program, multiple concurrent operations.)J
126 423 :M
5.029 .503(Network server: single program, must handle concurrent)J
144 441 :M
4.738 .474(requests from multiple users \(examples: Auspex, Web)J
144 459 :M
1.467(server\))A
126 495 :M
4.707 .471(Windowing system: one thread per window.)J
126 531 :M
5.723 .572(Airline reservations:one thread per customer)J
126 567 :M
4.767 .477(Parallel programming: split program into multiple threads to)J
144 585 :M
3.284 .328(make it run faster.  This is called )J
f1_12 sf
1.289(multiprocessing)A
f3_12 sf
(.)S
126 636 :M
3.698 .37(   multiprogramming = multiple jobs or processes)J
126 654 :M
2.886 .289(   multiprocessing = multiple CPUs)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.866 .487(Some multiprocessors are in fact uniprogrammed -- multiple)J
126 102 :M
3.851 .385(threads in one address space, but only run one program at a)J
126 120 :M
1.139(time.)A
90 156 :M
f1_12 sf
7.795 .779(2.4.3 Thread State)J
126 189 :M
f3_12 sf
4.411 .441(What state does a thread have?)J
126 207 :M
3.515 .352(    Some state shared by all threads in a process/address space:)J
162 225 :M
4.202 .42(For example: contents of memory \(global variables, heap\),)J
162 243 :M
5.566 .557(file system)J
126 261 :M
3.204 .32(    Some state "private" to each thread -- each thread has its)J
126 279 :M
4.66 .466(own copy)J
126 297 :M
.687 .069(    )J
162 297 :M
6.965 .697(Program counter)J
126 315 :M
.687 .069(    )J
162 315 :M
.933(Registers)A
126 333 :M
.687 .069(    )J
162 333 :M
6.046 .605(Execution stack)J
f5_12 sf
2.641 .264( -- what is this?)J
126 369 :M
f1_12 sf
7.929 .793(Execution stack:)J
f3_12 sf
5.989 .599( where parameters, temporary variables,)J
126 387 :M
4.068 .407(return PC are kept, while called procedures are executing \(for)J
126 405 :M
3.468 .347(example, where are A's variables kept, while B, C are)J
126 423 :M
1.016(executing?\))A
90 444 285 219 rC
105 470 :M
(A\(int tmp\) {)S
105 486 :M
(  B\(\);)S
105 502 :M
(  printf\(tmp\);)S
105 518 :M
(})S
105 534 :M
(B\(\) {)S
105 550 :M
(  C\(\);)S
105 566 :M
(})S
105 582 :M
-.226(C\(\) {)A
105 598 :M
(  A\(2\);)S
105 614 :M
(})S
261.5 462.5 112 176 rS
263 595 -1 1 374 594 1 263 594 @a
262 514 -1 1 373 513 1 262 513 @a
261 557 -1 1 372 556 1 261 556 @a
274 623 :M
(A; tmp = 1)S
294 583 :M
(B)S
296 540 :M
(C)S
275 489 :M
(A; tmp = 2)S
267 658 :M
(Excecution stack)S
gR
gS 30 31 552 730 rC
90 693 :M
f1_12 sf
8.147 .815(2.4.4 Address space state)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 6 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
5.722 .572(Threads encapsulate concurrency; address spaces encapsulate)J
126 102 :M
4.783 .478(protection -- keep a buggy program from trashing everything)J
126 120 :M
4.057 .406(else on the system.)J
126 156 :M
5.193 .519(Address space state:)J
126 174 :M
2.535 .253(     Contents of main memory)J
126 192 :M
.999 .1(     UNIX files)J
126 228 :M
f1_12 sf
7.089 .709(Address state is passive; thread is active)J
90 264 :M
f1_14 sf
9.358 .936(2.5 Classification)J
126 297 :M
f3_12 sf
4.957 .496(Real operating systems have either)J
126 333 :M
2.736 .274(     one or many address spaces)J
126 351 :M
3.117 .312(     one or many threads per address space)J
96 384 :M
3.89 .389(# of address spaces:)J
108 399 :M
4.115 .412(# of threads per)J
113 414 :M
6.105 .61(address space:)J
291 384 :M
1.583(one)A
428 384 :M
2.007(many)A
147 429 :M
1.583(one)A
242 429 :M
3.408 .341(MS/DOS, Macintosh)J
395 429 :M
4.616 .462(traditional UNIX)J
140 444 :M
2.007(many)A
288 444 :M
.839(Pilot)A
393 444 :M
2.406 .241(VMS, Mach, OS/2)J
381 459 :M
3.168 .317(Windows NT, Solaris,)J
418 474 :M
-.016(HP-UX, ...)A
126 507 :M
.743(Examples:)A
126 525 :M
3.474 .347(1. MS/DOS -- one thread, one address space)J
126 543 :M
3.945 .395(2. traditional UNIX -- one thread per address space, many)J
144 561 :M
6.779 .678(address spaces)J
126 579 :M
2.374 .237(3. Mach, Microsoft NT, new UNIX \(Solaris, HPUX\) -- many)J
144 597 :M
5.015 .502(threads per address space, many address spaces)J
126 615 :M
4.203 .42(4. Pilot \(the operating system on the first personal computer)J
144 633 :M
4.037 .404(ever built\) -- many threads, one address space \(idea was: no)J
144 651 :M
4.024 .402(need for protection if single user\))J
90 684 :M
f1_14 sf
11.967 1.197(2.6 Summary)J
126 717 :M
f3_12 sf
4.624 .462(Processes have two parts: threads and address spaces.)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 7 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.339 .434(Book talks about processes: when this concerns concurrency,)J
126 120 :M
4.055 .405(really talking about thread portion of a process; when this)J
126 138 :M
4.775 .478(concerns protection, really talking about address space portion)J
126 156 :M
3.267 .327(of a process.)J
126 189 :M
f5_12 sf
4.599 .46(Lecture 2 ended here)J
endp
%%Trailer
end		% md
%%EOF
