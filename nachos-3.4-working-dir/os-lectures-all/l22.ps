%!PS-Adobe-3.0
%%Title: (l22)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (19:17 Thursday, April 13, 1995)
%%For: (tom)
%%Pages: 9
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 141 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
6.377 .638(Lecture 22: Remote Procedure Call \(RPC\))J
60 91 :M
6.895 .689(22.0 Main Point)J
96 109 :M
f3_12 sf
1.331(Send/receive)A
96 127 :M
4.803 .48(One vs. two-way communication)J
96 145 :M
4.325 .433(Remote Procedure Call)J
96 163 :M
5.501 .55(Cross-address space vs. cross-machine communication)J
60 199 :M
f1_14 sf
13.985 1.398(22.1 Send/Receive)J
96 217 :M
f3_12 sf
3.742 .374(How do you program a distributed application?  Need to)J
96 235 :M
4.812 .481(synchronize multiple threads, only now running on different)J
96 253 :M
4.884 .488(machines \(can't use test&set\).)J
96 289 :M
5.443 .544(Atomic operations: send/receive -- doesn't require shared)J
96 307 :M
5.464 .546(memory for synchronizing cooperating threads.)J
96 343 :M
4.545 .455(Mailbox -- temporary holding area for messages \(ports\))J
96 379 :M
4.179 .418(Send\(message, mbox\) -- put message on network, with name of)J
96 397 :M
2.888 .289(mbox for where it is to go on far end)J
96 433 :M
4.791 .479(When can Send return?)J
132 451 :M
5.197 .52(When receiver gets message?)J
132 469 :M
4.497 .45(When message is safely buffered on destination node?)J
96 487 :M
.739 .074( )J
132 487 :M
3.713 .371(Right away, if message is buffered on source node?)J
96 523 :M
6.075 .607(Receive\(buffer, mbox\))J
96 541 :M
3.583 .358(Wait until mbox has message in it, then copy message into)J
96 559 :M
5.56 .556(buffer, and return.)J
96 595 :M
3.719 .372(When packet arrives, OS puts message into mbox, wakes up one)J
96 613 :M
4.341 .434(of the waiters.)J
96 649 :M
3.965 .396(Note that send and receive are atomic.)J
96 667 :M
3.212 .321(  never get portion of a message \(all or nothing\))J
96 685 :M
3.697 .37(  two receivers can't get same message)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 102 :M
f1_14 sf
9.3 .93(22.2 Message styles)J
126 138 :M
f3_12 sf
2.722 .272(  1 way -- messages flow in one direction \(UNIX pipes, TCP\))J
126 174 :M
4.422 .442(  2 way -- request-response \(remote procedure call\))J
126 228 :M
7.502 .75(1-way communication)J
162 265 :M
f4_12 sf
-.223(Producer:)A
162 283 :M
-.211(  int msg1[1000])A
162 319 :M
-.218(  while \(1\))A
162 337 :M
-.204(     prepare message  // make coke)A
162 355 :M
-.208(     send\(msg1, mbox\))A
162 391 :M
-.223(Consumer:)A
162 409 :M
-.212(  int msg[1000])A
162 445 :M
-.218(  while \(1\))A
162 463 :M
-.207(     receive\(msg2, mbox\))A
162 481 :M
-.204(     process message  // drink coke)A
126 516 :M
f3_12 sf
4.055 .406(No need for producer/consumer to keep track of space in)J
126 534 :M
5.372 .537(mailbox -- handled by send/receive.)J
126 570 :M
5.216 .522(What about two-way communication?  Request/response. For)J
126 588 :M
3.715 .372(instance, "read a file" stored on a remote machine.)J
126 624 :M
3.619 .362(Also called: client-server.  Client = requester; server =)J
126 642 :M
4.043 .404(responder.  Server provides "service" \(file storage\) to the client)J
126 678 :M
1.194(Request/response:)A
162 715 :M
f4_12 sf
-.205(Client: \(requesting the file\))A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
162 82 :M
f4_12 sf
-.207(   char response[1000];)A
162 118 :M
-.205(   send\("read rutabaga", mbox1\);)A
162 136 :M
-.206(   receive\(response, mbox2\);)A
162 172 :M
-.231(Server:)A
162 190 :M
-.204(   char command[1000], answer[1000];)A
162 226 :M
-.206(   receive\(command, mbox1\);)A
162 244 :M
-.211(   decode command)A
162 262 :M
-.207(   read file into answer)A
162 280 :M
-.207(   send\(answer, mbox2\);)A
126 315 :M
f3_12 sf
3.291 .329(Server has to decode command, just as OS has to decode)J
126 333 :M
4.115 .412(message to find mbox)J
126 369 :M
2.992 .299(What if file is too big for response?  Use big message protocol.)J
90 405 :M
f1_14 sf
8.166 .817(22.3 Remote procedure call.)J
126 423 :M
f3_12 sf
3.675 .367(Call a procedure on a remote machine.)J
126 477 :M
2.142 .214( Client calls:)J
162 496 :M
f4_12 sf
-.205(remoteFileSys->Read\("rutabaga"\))A
126 531 :M
f3_12 sf
3.342 .334(  Translated into call on server:)J
162 550 :M
f4_12 sf
-.207(fileSys->Read\("rutabaga"\))A
126 585 :M
f3_12 sf
1.199(Implementation:)A
126 603 :M
5.207 .521(  request-response message passing)J
126 621 :M
4.1 .41(  "stub" provides glue on client/server)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 72 454 205 rC
137 107 :M
f3_12 sf
(Client)S
137 123 :M
(\(caller\))S
296 108 :M
(Client)S
296 124 :M
(stub)S
453 104 :M
(Packet)S
453 120 :M
(Handler)S
137 215 :M
(Server)S
137 231 :M
(\(callee\))S
292 218 :M
(Server)S
292 234 :M
(stub)S
455 219 :M
(Packet)S
455 235 :M
(Handler)S
497 162 :M
(Network)S
497 178 :M
(transport)S
13 156 204 286 103 @k
178 104 -1 1 281 103 1 178 103 @a
13 -114 -66 488 200 @k
-1 -1 489 195 1 1 488 129 @b
13 -24 24 342 227 @k
348 228 -1 1 450 227 1 348 227 @a
13 156 204 452 211 @k
343 212 -1 1 447 211 1 343 211 @a
13 66 114 471 125 @k
-1 -1 472 200 1 1 471 131 @b
13 -24 24 183 118 @k
189 119 -1 1 283 118 1 189 118 @a
217 98 :M
(call)S
211 202 :M
(return)S
289 80 :M
(bundle )S
289 96 :M
(args)S
277 256 :M
(unbundle)S
277 272 :M
(arguments)S
290 183 :M
(bundle )S
290 199 :M
(ret vals)S
209 140 :M
(return)S
216 246 :M
(call)S
281 144 :M
(unbundle)S
371 97 :M
(send)S
362 132 :M
(receive)S
377 202 :M
(send)S
367 245 :M
(receive)S
404 160 :M
(Network)S
404 176 :M
(transport)S
13 -24 24 341 117 @k
347 118 -1 1 449 117 1 347 117 @a
13 156 204 451 101 @k
342 102 -1 1 446 101 1 342 101 @a
13 156 204 291 212 @k
183 213 -1 1 286 212 1 183 212 @a
13 -24 24 188 227 @k
194 228 -1 1 288 227 1 194 227 @a
gR
gS 30 31 552 730 rC
162 311 :M
f4_12 sf
-.216(Client stub:)A
162 329 :M
-.212(  build message)A
162 347 :M
-.213(  send message)A
162 365 :M
-.209(  wait for response)A
162 383 :M
-.213(  unpack reply)A
162 401 :M
-.212(  return result)A
162 437 :M
-.216(Server stub:)A
162 455 :M
-.203(Create N threads to wait for work to do)A
162 473 :M
-.231(  loop:)A
162 491 :M
-.209(    wait for command)A
162 509 :M
-.203(    decode and unpack request parameters)A
162 527 :M
-.21(    call procedure)A
162 545 :M
-.204(    build reply message with results)A
162 563 :M
-.213(    send reply)A
90 598 :M
f1_12 sf
6.892 .689(22.3.1 Comparison between RPC and procedure call)J
126 616 :M
f3_12 sf
7.39 .739(What's equivalent?)J
126 652 :M
4.655 .465(  Parameters -- request message)J
126 688 :M
3.473 .347(  Result -- reply message)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(tom; page: 5 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.8 .38(  Name of procedure -- passed in request message)J
126 138 :M
4.126 .413(  return address -- mbox2)J
90 174 :M
f1_12 sf
10.825 1.082(22.3.2 Implementation issues)J
126 192 :M
f3_12 sf
4.189 .419(Stub generator -- generates stubs automatically.  For this, only)J
126 210 :M
4.931 .493(need procedure signature -- types of arguments, return value.)J
126 228 :M
3.425 .343(Generates code on client to pack message, send it off; on server)J
126 246 :M
4.448 .445(to unpack message, call procedure.)J
126 282 :M
3.15 .315(How does client know which mbox to send to?  Binding)J
126 300 :M
2.42 .242(    static -- fixed at compile time \(C\))J
126 318 :M
2.622 .262(    dynamic -- fixed at runtime \(Lisp, RPC\))J
126 354 :M
3.563 .356(In most RPC systems, dynamic binding via name service.  Name)J
126 372 :M
4.287 .429(service provides dynamic translation of service -> mbox)J
126 408 :M
5.873 .587(Why runtime binding?)J
126 426 :M
2.914 .291(     Access control -- check who is permitted to access service)J
126 444 :M
2.878 .288(     Fail-over -- if server fails, use another)J
126 480 :M
4.035 .404(What if there are multiple servers -- can they use same mbox?)J
126 498 :M
2.823 .282(OK, if no state carried forward from one call to the next.  For)J
126 516 :M
3.543 .354(example, open, seek, read, close -- each uses context of)J
126 534 :M
6.895 .69(previous operation.)J
126 570 :M
4.388 .439(What if multiple clients?)J
126 588 :M
3.079 .308(   All would receive results in same mbox)J
126 624 :M
3.215 .322(   Fix by passing pointer to mbox in request message)J
126 642 :M
2.666 .267(     \(this is like pushing the return PC on the stack\))J
90 678 :M
f1_14 sf
10.226 1.023(22.4 Cross-Domain Communication)J
126 696 :M
f3_12 sf
4.453 .445(How do address spaces communicate with one another?)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(tom; page: 6 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.002 .3(  file system)J
126 120 :M
4.253 .425(  shared memory)J
126 156 :M
4.413 .441(  pipes \(1-way communication\))J
126 192 :M
4.358 .436(  "remote" procedure call \(2-way communication\))J
126 228 :M
3.891 .389(RPC's can be used to communicate between address spaces on)J
126 246 :M
4.631 .463(different machines or between address spaces on the same)J
126 264 :M
1.079(machine.)A
90 300 :M
f1_12 sf
9.497 .95(22.4.1 Microkernel operating systems)J
126 318 :M
f3_12 sf
4.001 .4(Example: split kernel up into application-level servers.  File)J
126 336 :M
3.655 .365(system looks like it is remote, even though on the same)J
126 354 :M
1.303(machine)A
126 357 398 223 rC
150.5 437.5 145 113 rS
153 573 :M
(Monolithic Structure)S
145.5 363.5 47 63 rS
234.5 364.5 47 63 rS
152 397 :M
(App)S
244 398 :M
(App)S
182 549 :M
(OS Kernel)S
159 455 :M
(file system)S
165 502 :M
(VM)S
223 479 :M
(windowing)S
217 514 :M
(networking)S
183 532 :M
(threads)S
344.5 488.5 150 63 rS
362 575 :M
(Microkernel Structure)S
385 550 :M
(OS Kernel)S
365 530 :M
(threads)S
438 507 :M
(address)S
438 523 :M
(spaces)S
351 507 :M
-.826(RPC)A
347.5 412.5 47 63 rS
354 448 :M
(App)S
408.5 412.5 47 63 rS
410 435 :M
(file sys)S
467.5 412.5 47 63 rS
464 436 :M
(windows)S
gR
gS 30 31 552 730 rC
126 631 :M
f3_12 sf
3.878 .388(Why split the OS into separate domains?)J
126 667 :M
3.447 .345(  Fault isolation -- bugs are more isolated \(build a firewall\))J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(tom; page: 7 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.056 .406(  Enforces modularity -- allows incremental upgrades of pieces)J
126 102 :M
4.322 .432(of software \(client or server\))J
126 138 :M
3.654 .365(  Location transparent -- service can be local or remote)J
162 156 :M
3.721 .372(For example in the X windowing system)J
90 192 :M
f1_12 sf
6.272 .627(22.4.2 OLE \(Object Linking and Embedding\))J
126 210 :M
f3_12 sf
5.056 .506(Another example: Desktop publishing.)J
126 228 :M
3.942 .394(    Need editor, spreadsheet, document formatter, database, etc.)J
126 264 :M
3.201 .32(    Now bundled, but might be composed of separable pieces.)J
126 300 :M
3.311 .331(Principle behind Microsoft OLE -- allow you to mix and match)J
126 318 :M
4.175 .418(applications, which cooperate via defined RPC interface.)J
90 354 :M
f1_14 sf
6.716 .672(22.5 Problems with RPC)J
126 372 :M
f3_12 sf
4.49 .449(RPC provides location transparency, except:)J
90 408 :M
f1_12 sf
10.203 1.02(22.5.1 Failures)J
126 426 :M
f3_12 sf
4.404 .44(Different failure modes in distributed system than on single)J
126 444 :M
1.079(machine.)A
126 480 :M
4.229 .423(Several kinds of failures:)J
126 498 :M
3.031 .303(      -- user-level bug causes address space to crash)J
126 534 :M
2.666 .267(      -- machine failure, kernel bug causes all AS on same)J
126 552 :M
4.05 .405(machine to fail)J
126 588 :M
2.838 .284(      -- earthquake causes all machines to fail)J
126 624 :M
3.4 .34(Before: whole system would crash.  Now: one machine can)J
126 642 :M
3.432 .343(crash, while others stay up.  If file server goes down, what do)J
126 660 :M
4.783 .478(the other machines do?)J
90 696 :M
f1_12 sf
6.978 .698(  22.5.2 Performance)J
126 714 :M
f3_12 sf
2.219 .222(Cost of a procedure call << same-machine RPC << network RPC)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(tom; page: 8 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.82 .382(Means programmers must be aware that RPC is cheap, but it's)J
126 120 :M
4.75 .475(not free.)J
126 156 :M
3.857 .386(Caching can help, but that can make failure handling more)J
126 174 :M
.832(complex.)A
126 210 :M
3.711 .371(In a distributed system, you have to face up to these two)J
126 228 :M
4.52 .452(problems.  Illustrate in network file systems.)J
126 264 :M
3.679 .368(On same machine \(for example, microkernel OS\), the tradeoff is)J
126 282 :M
3.619 .362(-- what do you gain for the loss of performance?)J
90 318 :M
f1_14 sf
8.164 .816(22.6 Software Fault Isolation)J
126 336 :M
f3_12 sf
3.899 .39(Can we use compiler techniques to address traditional OS)J
126 354 :M
1.176(issues?)A
126 390 :M
4.333 .433(For example, do we really need hardware address space)J
126 408 :M
1.133(protection?)A
126 444 :M
4.399 .44(Two ways to provide protection )J
f1_12 sf
1.241(within)A
f3_12 sf
3.63 .363( an address space --)J
126 462 :M
3.689 .369(this way, can use procedure calls directly, without cost of doing)J
126 480 :M
3.605 .36(a full RPC between address spaces:)J
126 516 :M
4.502 .45(1.Strong typing: restrict programming language to make it)J
126 534 :M
4.329 .433(impossible to misuse data structures \(LISP, Ada, Modula-3\).)J
126 552 :M
3.377 .338(Problem is requires everyone to give up C++.)J
126 588 :M
3.104 .31(2. Software fault isolation.  Modify object code so that it )J
f1_12 sf
1.215(can't)A
126 606 :M
f3_12 sf
4.853 .485(step out of bounds -- programming language independent.)J
126 642 :M
4.314 .431(How does the software prevent a pointer from being misused?)J
126 660 :M
4.252 .425(Insert code before each "store" and "indirect branch")J
126 678 :M
3.739 .374(instruction; check that it is in bounds.)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(tom; page: 9 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.939 .394(Trick is to apply massive compiler optimizations to remove as)J
126 102 :M
3.598 .36(many checks as possible statically.  Result is protection can be)J
126 120 :M
4.018 .402(provided in language independent way for < 5% overhead.)J
126 156 :M
3.67 .367(Example application: virus protection on PC's and Macs.)J
126 174 :M
4.6 .46(Remember, no hardware protection on those systems.  Instead,)J
126 192 :M
3.991 .399(use software protection: if think a program might have a virus,)J
126 210 :M
4.108 .411(modify it to check every store/branch, to make sure not doing)J
126 228 :M
6.326 .633(anything bad!)J
126 264 :M
3.674 .367(Another example is OLE above: complex application built by)J
126 282 :M
3.566 .357(multiple vendors.  Too slow to put each piece in separate)J
126 300 :M
3.884 .388(address space, so put everything together.  But then, what if)J
126 318 :M
2.815 .281(there's a bug?  How do you know who's fault it is?   With)J
126 336 :M
3.849 .385(software fault isolation, can isolate problem, for roughly 5%)J
126 354 :M
7.735 .774(runtime overhead.)J
126 390 :M
3.922 .392(Active area of research: can we use compiler to implement)J
126 408 :M
3.786 .379(virtual memory too?  Modify object code to insert check before)J
126 426 :M
3.946 .395(each memory reference to see if page is resident; apply)J
126 444 :M
4.042 .404(optimizations to remove as many checks as possible \(for)J
126 462 :M
3.275 .327(example, in a loop\).)J
endp
%%Trailer
end		% md
%%EOF
