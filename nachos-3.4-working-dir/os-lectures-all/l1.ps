%!PS-Adobe-3.0
%%Title: (l1)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:25 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 4
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 119 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_18 f1_1 18 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 4)setjob
%%EndPageSetup
gS 0 0 552 730 rC
109 58 :M
f1_18 sf
9.03 .903( Operating Systems and Systems)J
208 79 :M
1.765(Programming)A
173 98 :M
f1_14 sf
8.765 .876(Professor: Tom Anderson)J
60 137 :M
9.091 .909(Lecture 1: Introduction)J
60 173 :M
6.544 .654(1.0 Main points:)J
96 191 :M
f3_12 sf
5.068 .507(What operating systems do)J
96 209 :M
4.855 .485(History of operating systems)J
60 245 :M
f1_14 sf
8.866 .887(1.1 Why study operating systems?)J
96 281 :M
f1_12 sf
5.09 .509(Abstraction: )J
f3_12 sf
3.259 .326(OS is a wizard, providing illusion of infinite CPUs,)J
96 299 :M
4.678 .468(infinite memory, single worldwide computing, etc.)J
96 335 :M
f1_12 sf
7.845 .784(System Design:)J
f3_12 sf
5.683 .568( tradeoffs between performance and)J
96 353 :M
4.586 .459(simplicity, putting functionality in hardware vs. software, etc.)J
96 407 :M
f1_12 sf
5.213 .521(How computers work: )J
f3_12 sf
4.524 .452("look under the hood" of computer)J
96 425 :M
1.45(systems)A
96 461 :M
f1_12 sf
1.211(Capstone:)A
f3_12 sf
3.92 .392( combines things from many other areas of)J
96 479 :M
5.194 .519(computer science -- languages, hardware, data structures,)J
96 497 :M
1.135(algorithms)A
60 533 :M
f1_14 sf
7.12 .712(1.2 History of Operating Systems: Change!)J
113 587 :M
f1_12 sf
7.384 .738(Typical academic computer in 1980 and 1995)J
202 623 :M
f3_12 sf
1.971(1980)A
310 623 :M
1.971(1995)A
416 623 :M
1.119(factor)A
63 641 :M
2.469 .247(SPECint \(MIPS\))J
214 641 :M
(1)S
314 641 :M
2.217(300)A
414 641 :M
1.606 .161(    300)J
80 659 :M
.614($/SPECint)A
198 659 :M
.874($100K)A
314 659 :M
1.717($50)A
414 659 :M
2.956 .296(  2000)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
114 87 :M
f3_12 sf
1.707(memory)A
114 105 :M
1.078(capacity)A
228 87 :M
.579(128KB)A
338 87 :M
.887(64MB)A
444 87 :M
1.606 .161(    500)J
99 123 :M
5.703 .57(disk capacity)J
228 123 :M
2.428 .243(10 MB)J
342 123 :M
.077 .008(2 GB)J
444 123 :M
1.606 .161(    200)J
126 141 :M
1.758(tape)A
224 141 :M
3.252 .325(200 MB)J
323 141 :M
2.675 .267(1 TB robot)J
444 141 :M
2.956 .296(  5000)J
114 159 :M
1.544(network)A
106 177 :M
1.492(bandwidth)A
219 159 :M
7.313 .731(9600 b/s)J
325 159 :M
6.682 .668(155 Mb/s)J
444 159 :M
1.847(15000)A
102 195 :M
4.188 .419(# of address)J
128 213 :M
1.386(bits)A
240 195 :M
2.956(16)A
348 195 :M
2.956(64)A
444 195 :M
.84 .084(        2)J
126 249 :M
4.527 .453(What does this mean?)J
162 267 :M
4.124 .412(Techniques have to vary over time, adapt to changing)J
126 285 :M
1.044(tradeoffs.)A
90 339 :M
f1_12 sf
6.629 .663(1.2.1 History Phase 1:)J
f3_12 sf
.842 .084( )J
f1_12 sf
9.21 .921(hardware expensive, humans cheap)J
126 375 :M
f3_12 sf
3.742 .374(When computers cost millions of $'s, optimize for more efficient)J
126 393 :M
4.527 .453(use of the hardware!)J
126 429 :M
f1_12 sf
3.863 .386(1. User at console: )J
f3_12 sf
3.644 .364(one user at a time.  OS as subroutine)J
144 447 :M
1.139(library.)A
126 501 :M
f1_12 sf
4.633 .463(2. Batch monitor: )J
f3_12 sf
5.206 .521(load program, run, print.)J
126 555 :M
3.709 .371(No protection: what if batch program had a bug and wrote over)J
126 573 :M
6.696 .67(batch monitor?)J
126 609 :M
f1_12 sf
5.722 .572(3. Data channels, interrupts: )J
f3_12 sf
5.04 .504(overlap of I/O and)J
144 627 :M
1.048(computation.)A
126 663 :M
3.249 .325(DMA -- direct memory access for I/O devices.  OS requests I/O,)J
126 681 :M
4.078 .408(goes back to computing, gets interrupt when I/O device has)J
126 699 :M
.965(finished.)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f1_12 sf
7.08 .708(4. Memory protection + relocation.)J
126 120 :M
f3_12 sf
4.803 .48(Multiprogramming: several programs run at the same time;)J
126 138 :M
5.092 .509(users share the system.)J
126 174 :M
7.384 .738(Multiprogramming benefits:)J
162 192 :M
3.346 .335(1. Small jobs not delayed by large jobs)J
162 228 :M
3.538 .354(2. More overlap between I/O and CPU)J
126 264 :M
5.022 .502(Multiprogramming requires memory protection to keep bugs in)J
126 282 :M
4.534 .453(one program from crashing the system or corrupting other)J
126 300 :M
1.185(programs.)A
126 336 :M
4.011 .401(Bad news: OS must manage all these interactions between)J
126 354 :M
3.177 .318(programs.  Each step seems logical, but at some point, fall off)J
126 372 :M
3.544 .354(cliff -- just gets too complicated.)J
126 408 :M
3.58 .358(Multics: announced in 1963 -> ran in 1969)J
126 444 :M
3.821 .382(OS 360 released with 1000 bugs.)J
126 498 :M
3.045 .304(UNIX based on Multics, but simplified so they could get it to)J
126 516 :M
1.214(work!)A
90 552 :M
f1_12 sf
6.665 .666(1.2.2 History, Phase 2:)J
f3_12 sf
.84 .084( )J
f1_12 sf
9.192 .919(hardware cheap, humans expensive)J
126 570 :M
6.475 .647(5. Interactive timesharing: )J
f3_12 sf
5.17 .517(Use cheap terminals to let)J
126 588 :M
4.338 .434(multiple users interact with the system at the same time.)J
126 606 :M
3.555 .356(Sacrifice CPU time to get better response time for users.)J
126 642 :M
3.729 .373(Problem: thrashing -- performance falls off a cliff as you add)J
126 660 :M
1.188(users.)A
126 696 :M
f1_12 sf
5.59 .559(6. Personal computing -)J
f3_12 sf
4.528 .453( Computers are cheap, so give)J
126 714 :M
4.352 .435(everyone a computer.  Initially, OS became subroutine library)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.149 .415(again, but since then, have added back in memory protection,)J
126 102 :M
6.927 .693(multiprogramming, etc.)J
126 156 :M
4.418 .442(Networking:  allow different machines to share resources)J
126 174 :M
.886(easily.)A
90 210 :M
f1_14 sf
11.967 1.197(1.3 Summary)J
126 246 :M
f3_12 sf
3.511 .351(Point of change isn't: look how stupid batch processing is.)J
126 264 :M
3.736 .374(It was right for the tradeoffs of the time -- but not anymore.)J
126 300 :M
3.73 .373(Point is: have to change with changing technology.)J
126 336 :M
3.026 .303(Situation today is much like it was in the late 60's:  OS's today)J
126 354 :M
4.685 .468(are enormous, complex things:)J
126 372 :M
.704 .07(  )J
162 372 :M
2.743 .274(small OS -- 100K lines)J
126 390 :M
.704 .07(  )J
162 390 :M
2.529 .253(big OS -- 10M lines)J
126 444 :M
9.04 .904(100-1000 people-years)J
126 480 :M
3.914 .391(NT under development for the last 7 years, still doesn't work)J
126 498 :M
5.184 .518(very well.)J
126 534 :M
3.378 .338(Key aspect of this course -- understand OS's, so we can simplify)J
126 552 :M
1.394(them!)A
endp
%%Trailer
end		% md
%%EOF
