%!PS-Adobe-3.0
%%Title: (l3)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:21 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 7
%%DocumentFonts: Times-Bold Times-Roman Courier Courier-Bold
%%DocumentNeededFonts: Times-Bold Times-Roman Courier Courier-Bold
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 143 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
%%IncludeFont: Courier-Bold
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/f5_1/Courier-Bold :mre
/f5_12 f5_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 7)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
6.987 .699(Lecture 3: Threads and Dispatching)J
60 91 :M
5.878 .588(3.0 Main Point:)J
96 109 :M
f3_12 sf
3.082 .308(Each thread has illusion of its own CPU, yet on a uniprocessor,)J
96 127 :M
3.376 .338(all threads share the same physical CPU.  How does this work?)J
96 190 :M
4.022 .402(Two key concepts:)J
96 208 :M
2.84 .284(   1. thread control block)J
96 226 :M
2.618 .262(   2. dispatching loop)J
60 259 :M
f1_14 sf
10.253 1.025(3.1 Per-thread state)J
96 295 :M
f3_12 sf
3.696 .37(Thread control block \(in Nachos, Thread class)J
96 313 :M
2.973 .297(   one per thread)J
96 331 :M
3.821 .382(   execution state: registers, program counter, pointer to stack)J
96 349 :M
3.729 .373(   scheduling information)J
96 367 :M
2.527 .253(   etc.  \(add stuff as you find a need\))J
60 403 :M
f1_14 sf
8.277 .828(3.2 Dispatching Loop \(scheduler.cc\))J
132 437 :M
f4_12 sf
-.248( LOOP)A
132 455 :M
-.215(   Run thread)A
132 491 :M
-.203(   Save state \(into thread control block\))A
132 527 :M
-.206(   Choose new thread to run)A
132 563 :M
-.204(   Load its state  \(into TCB\) and loop)A
60 613 :M
f1_12 sf
6.683 .668(3.2.1 Running a thread:)J
96 646 :M
f3_12 sf
3.115 .312(How do I run a thread?  Load its state \(registers, PC, stack)J
96 664 :M
3.046 .305(pointer\) into the CPU, and do a jump.)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.498 .35(How does dispatcher get control back?  Two ways:)J
126 120 :M
f1_12 sf
5.437 .544(Internal events )J
f3_12 sf
4.392 .439(\(Sleeping Beauty -- go to sleep and hope)J
126 138 :M
4.023 .402(Prince Charming will wake you\))J
126 174 :M
3.194 .319(1. Thread blocks on I/O \(examples: for disk I/O, or in emacs to)J
144 192 :M
3.948 .395(wait for you to type at keyboard\))J
126 228 :M
3.903 .39(2. Thread blocks waiting for some other thread to do something)J
126 264 :M
2.826 .283(3. Yield -- give up CPU to someone else waiting)J
126 315 :M
4.108 .411(What if thread never did any I/O, never waited, and didn't)J
126 333 :M
3.66 .366(yield control?  Dispatcher has to gain control back somehow.)J
126 384 :M
f1_12 sf
10.18 1.018(External events)J
126 420 :M
f3_12 sf
4.696 .47(1. Interrupts -- type character, disk request finishes wakes up)J
144 438 :M
4.005 .4(dispatcher, so it can choose another thread to run)J
126 474 :M
3.19 .319(2. Timer -- like an alarm clock.)J
90 507 :M
f1_12 sf
5.924 .592(3.2.2 Choosing a thread to run)J
126 555 :M
f3_12 sf
3.637 .364(Dispatcher keeps a list of ready threads -- how does it choose)J
126 573 :M
6.683 .668(among them?)J
126 609 :M
4.393 .439(Zero ready threads -- dispatcher just loops)J
126 645 :M
4.306 .431(One ready thread -- easy.)J
126 681 :M
4.582 .458(More than one ready thread:)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.114 .311(1. LIFO \(last in, first out\): put ready threads on front of the list,)J
144 102 :M
4.161 .416(and dispatcher takes threads from front.  Results in)J
144 120 :M
1.131(starvation.)A
126 168 :M
3.066 .307(2. FIFO \(first in, first out\): put ready threads on back of list,)J
144 186 :M
3.479 .348(pull them off from the front \(this is what Nachos does\))J
126 222 :M
3.521 .352( 3. Priority queue -- give some threads better shot at CPU)J
126 276 :M
3.607 .361(Priority field in thread control block.  Keep ready list sorted by)J
126 294 :M
1.077(priority.)A
90 345 :M
f1_12 sf
8.407 .841(3.2.3 Thread states)J
126 363 :M
f3_12 sf
3.416 .342(Each thread can be in one of three states:)J
126 399 :M
2.785 .278(1. Running -- has the CPU)J
126 417 :M
3.969 .397(2. Blocked -- waiting for I/O or synchronization with another)J
144 435 :M
1.682(thread)A
126 453 :M
2.998 .3(3. Ready to run -- on the ready list, waiting for the CPU)J
90 456 301 188 rC
91 44 247 505.5 @f
91 44 330 603.5 @f
91 44 162 604.5 @f
223 515 :M
(Running)S
130 613 :M
(Ready)S
312 610 :M
(Blocked)S
13 215 263 329 580 @k
289 515 -1 1 327 575 1 289 514 @a
13 -28 20 204 612 @k
-1 -1 211 613 1 1 282 606 @b
13 103 151 203 514 @k
-1 -1 153 583 1 1 200 519 @b
13 -81 -33 188 585 @k
-1 -1 192 581 1 1 226 525 @b
314 536 :M
(I/O request)S
212 639 :M
(I/O complete)S
213 558 :M
(yield, )S
213 574 :M
(timer)S
117 537 :M
(scheduled)S
gR
gS 30 31 552 730 rC
162 659 :M
f1_12 sf
7.351 .735(Thread State Diagram)J
90 707 :M
8.072 .807(3.2.4 Saving/restoring state \(often called "context switch"\):)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.674 .467(What do you need to save/restore when the dispatcher)J
126 120 :M
4.375 .438(switches to a new thread?)J
126 156 :M
4.249 .425(Anything next thread may trash: PC, registers, change)J
126 174 :M
5.932 .593(execution stack)J
126 207 :M
3.651 .365(Want to treat each thread  in isolation.)J
126 243 :M
3.526 .353(To take an example from the Nachos code, what if two threads)J
126 261 :M
2.63 .263(loop, each calling "Yield"?  Yield calls Switch to switch to the)J
126 279 :M
3.949 .395(next thread,  but once you start running the next thread, you)J
126 297 :M
3.193 .319(are on a different execution stack.  Thus, Switch is called in one)J
126 315 :M
4.64 .464(thread's context, but returns in the other's!)J
126 369 :M
f1_12 sf
4.255 .425(    Thread T switching to Thread S)J
126 387 :M
f3_12 sf
3.431 .343(There is a real implementation of Switch in Nachos in switch.s;)J
126 405 :M
3.351 .335(of course, it's magical!)J
126 441 :M
3.666 .367(What if you make a mistake in implementing switch?  For)J
126 459 :M
4.22 .422(instance, suppose you forget to save and restore register 4?)J
126 477 :M
4.742 .474(Get intermittent failures depending on exactly when context)J
126 495 :M
4.406 .441(switch occurred, and whether new thread was using r4.)J
126 513 :M
4.449 .445(Potentially, system will give wrong result, without any warning)J
126 531 :M
4.164 .416(\(if program didn't notice that r4 got trashed\).)J
126 585 :M
4.157 .416(Can you devise an exhaustive test to guarantee that switch)J
126 603 :M
4.103 .41(works? No!)J
90 651 :M
f1_12 sf
11.08 1.108(3.2.5 Interrupts)J
126 684 :M
f3_12 sf
5.097 .51(Interrupts are a special kind of hardware-invoked context)J
126 702 :M
.888(switch:)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
162 100 :M
f4_12 sf
-.203(I/O finishes or timer expires.  Hardware)A
162 118 :M
-.203(causes CPU to stop what it's doing, start)A
162 136 :M
-.206(running interrupt handler.)A
162 172 :M
-.203(Handler saves state of interrupted thread)A
162 208 :M
-.216(Handler runs)A
162 244 :M
-.204(Handler restores state of interrupted)A
162 262 :M
-.203(thread \(if time-slice, restore state of)A
162 280 :M
f5_12 sf
.074(new)A
f4_12 sf
.35 .035( thread\))J
162 316 :M
-.204(Return to normal execution in restored)A
162 334 :M
-.248(state)A
90 384 :M
f1_14 sf
8.407 .841(3.3 Thread creation)J
126 420 :M
f1_12 sf
5.454 .545(Thread "fork" )J
f3_12 sf
3.983 .398(-- create a new thread)J
126 456 :M
6.158 .616(Thread fork implementation:)J
162 475 :M
f4_12 sf
-.203(Allocate a new thread control block and)A
162 493 :M
-.209(execution call stack)A
162 529 :M
-.203(Initialize the thread control block and)A
162 547 :M
-.203(stack, with initial register values and)A
162 565 :M
-.203(the address of the first instruction to)A
162 583 :M
-.297(run)A
162 619 :M
-.204(Tell dispatcher that it can run the)A
162 637 :M
-.204(thread \(put thread on ready list\).)A
126 672 :M
f3_12 sf
2.676 .268(Thread fork is not the same thing as UNIX "fork".  UNIX fork)J
126 690 :M
3.522 .352(creates a new )J
f1_12 sf
1.244(process)A
f3_12 sf
3.363 .336(, so it has to create a new address space,)J
126 708 :M
3.803 .38(in addition to a new thread.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 6 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.2 .42(Thread fork is very much like an asynchronous procedure call)J
126 120 :M
3.694 .369(--it means, go do this work, where the calling thread does not)J
126 138 :M
3.354 .335(wait for the callee to complete.  What if the calling thread)J
126 156 :M
4.664 .466(needs to wait?)J
126 192 :M
4.871 .487(Thread )J
f1_12 sf
1.232(Join)A
f3_12 sf
3.282 .328( -- wait for a forked thread to finish.)J
126 228 :M
3.956 .396(Thus, a traditional procedure call is logically equivalent to)J
126 246 :M
3.681 .368(doing a fork then immediately doing a join.)J
126 276 :M
3.517 .352(This is a normal procedure call:)J
162 295 :M
f4_12 sf
-.216(A\(\) { B\(\); })A
162 313 :M
-.231(B\(\) { })A
126 348 :M
f3_12 sf
3.869 .387(The procedure A can also be implemented as:)J
162 367 :M
f4_12 sf
-.238(A'\(\) {)A
162 385 :M
-.207(  Thread t = new Thread;)A
162 403 :M
-.215(  t->Fork\(B\);)A
162 421 :M
-.216(  t->Join\(\);)A
162 439 :M
(})S
90 474 :M
f1_14 sf
9.078 .908(3.4 Multiprocessing vs. Multiprogramming)J
90 492 284 189 rC
111 520 :M
f3_12 sf
(A)S
111 536 :M
(B)S
111 552 :M
(C)S
13 156 204 199 515 @k
129 516 -1 1 194 515 1 129 515 @a
13 156 204 223 532 @k
129 533 -1 1 218 532 1 129 532 @a
13 156 204 157 548 @k
128 549 -1 1 152 548 1 128 548 @a
13 156 204 204 607 @k
134 608 -1 1 199 607 1 134 607 @a
13 156 204 295 607 @k
201 608 -1 1 290 607 1 201 607 @a
13 156 204 322 607 @k
293 608 -1 1 317 607 1 293 607 @a
261 537 :M
(Multiprocessing)S
252 635 :M
(Multiprogramming)S
154 605 :M
(A)S
227 607 :M
(B)S
296 604 :M
(C)S
134 663 -1 1 164 662 1 134 662 @a
-1 -1 165 681 1 1 164 643 @b
164 663 -1 1 194 662 1 164 662 @a
-1 -1 195 681 1 1 194 643 @b
194 663 -1 1 224 662 1 194 662 @a
-1 -1 225 681 1 1 224 643 @b
225 663 -1 1 255 662 1 225 662 @a
-1 -1 256 681 1 1 255 643 @b
257 663 -1 1 287 662 1 257 662 @a
-1 -1 288 681 1 1 287 643 @b
288 663 -1 1 318 662 1 288 662 @a
-1 -1 319 681 1 1 318 643 @b
144 659 :M
(A)S
174 659 :M
(B)S
204 659 :M
(C)S
235 659 :M
(A)S
266 659 :M
(B)S
300 659 :M
(B)S
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 7 of 7)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.733 .373(Dispatcher can choose to run each thread to completion, or)J
126 102 :M
3.63 .363(time-slice in big chunks, or time slice so that each thread)J
126 120 :M
3.986 .399(executes only one instruction at a time \(simulating a)J
126 138 :M
4.275 .427(multiprocessor, where each CPU operates in lockstep\).)J
126 174 :M
3.9 .39(If the dispatcher can do any of the above, programs must work)J
126 192 :M
4.013 .401(under all cases, for all interleavings.)J
126 243 :M
3.893 .389(So how can you know if your concurrent program works?)J
126 261 :M
5.581 .558(Whether )J
f1_12 sf
2.537 .254(all )J
f3_12 sf
6.149 .615(interleavings will work?)J
endp
%%Trailer
end		% md
%%EOF
