%!PS-Adobe-3.0
%%Title: (l19)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (9:08 Friday, March 24, 1995)
%%For: (tom)
%%Pages: 9
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 118 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.767 .777(Lecture 19: Transactions: Reliability from Unreliable)J
60 73 :M
1.889(Components)A
60 91 :M
7.292 .729(19.0 Main Points)J
96 109 :M
f3_12 sf
5.278 .528(Transaction concept: atomicity, durability, serializability)J
96 127 :M
4.505 .45(Write ahead, write behind logging)J
96 145 :M
4.889 .489(Log structured file systems)J
60 181 :M
f1_14 sf
10.717 1.072(19.1 Motivation)J
96 199 :M
f3_12 sf
4.209 .421(File systems have lots of data structures)J
96 217 :M
2.297 .23(    Bitmap of free blocks)J
96 235 :M
1.92 .192(    Directory)J
96 253 :M
2.133 .213(    File header)J
96 271 :M
2.66 .266(    Indirect blocks)J
96 289 :M
1.722 .172(    Data blocks)J
96 325 :M
3.241 .324(For performance, all must be cached!  OK for reads, but what)J
96 343 :M
6.864 .686(about writes?)J
60 397 :M
f1_12 sf
6.423 .642(19.1.1 Modified data kept in memory can be lost)J
96 433 :M
f3_12 sf
4.016 .402(Options for writing data:)J
96 469 :M
f1_12 sf
1.328(Write-through)A
f3_12 sf
4.594 .459(: write change immediately to disk)J
96 487 :M
2.506 .251(       Problem: slow!  Have to wait for write to complete before)J
96 505 :M
2.608 .261(you go on.)J
96 541 :M
f1_12 sf
1.294(Write-back)A
f3_12 sf
3.874 .387(: delay writing modified data back to disk \(for)J
96 559 :M
3.703 .37(example, until replaced\). Problem: can lose data on a crash!)J
60 595 :M
f1_12 sf
9.422 .942(19.1.2 Multiple updates)J
96 613 :M
f3_12 sf
4.657 .466(If multiple updates needed to perform some operation, crash)J
96 631 :M
4.668 .467(can occur between them!)J
96 667 :M
3.864 .386(For example, to move a file between directories:)J
132 685 :M
4.253 .425(delete file from old directory)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
162 84 :M
f3_12 sf
4.03 .403(add file to new directory)J
126 102 :M
3.251 .325(Or create new file:)J
126 120 :M
2.599 .26(      allocate space on disk for header, data)J
126 138 :M
2.498 .25(      write new header to disk)J
126 156 :M
2.433 .243(      add the new file to directory)J
126 192 :M
3.914 .391(What if there's a crash in the middle?  Even with write-through)J
126 210 :M
5.122 .512(can have problems.)J
90 246 :M
f1_14 sf
6.445 .644(19.2 UNIX approach \(ad hoc\))J
126 264 :M
f1_12 sf
1.266(Meta-data)A
f3_12 sf
4.16 .416(: needed to keep file system logically consistent)J
126 282 :M
4.244 .424(\(directories, bitmap, file heades, indirect blocks, etc.\))J
126 300 :M
f1_12 sf
1.305(Data)A
f3_12 sf
3.733 .373(: user bytes)J
90 354 :M
f1_12 sf
10.405 1.04(19.2.1 Meta-data consistency)J
126 372 :M
f3_12 sf
4.335 .433(For meta-data, UNIX uses synchronous write-through.  If)J
126 390 :M
3.944 .394(multiple updates needed, does them in specific order, so that if)J
126 408 :M
3.948 .395(crash, runs special program "fsck" that scans entire disk for)J
126 426 :M
4.16 .416(internal consistency to check for "in progress" operations, and)J
126 444 :M
4.196 .42(then fixes up anything in progress:)J
126 480 :M
4.675 .468(For example:)J
162 498 :M
3.389 .339(file created, but not yet put in any directory => delete file)J
162 516 :M
3.748 .375(blocks allocated, but not in bitmap => update bitmap)J
90 552 :M
f1_12 sf
8.399 .84(19.2.2 User data consistency)J
126 570 :M
f3_12 sf
3.706 .371(What about user data?  Write back, forced to disk every 30)J
126 588 :M
3.461 .346(seconds \(or user can call "sync" to force to disk immediately\).)J
126 624 :M
3.836 .384(No guarantee blocks are written to disk in any order.)J
126 678 :M
4.772 .477(However, sometimes meta-data consistency is good enough.)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.441 .344(For example, how should vi or emacs write save changes to a)J
126 102 :M
3.569 .357(file to disk?)J
162 138 :M
3.91 .391(delete old file)J
162 156 :M
4.417 .442(write new file)J
126 192 :M
3.095 .309(How vi used to work!)J
126 246 :M
3.118 .312(Now vi does the following:)J
162 264 :M
4.072 .407(write new version in temp file)J
162 282 :M
3.828 .383(move old version to other temp file)J
162 300 :M
3.922 .392(move new version into real file)J
162 318 :M
4.886 .489(unlink old version)J
126 354 :M
3.343 .334(If crash, look at temp area; if any files out there, send e-mail to)J
126 372 :M
4.236 .424(user that there might be a problem.)J
126 408 :M
3.701 .37(But what if user wants to have multiple file operations occur as)J
126 426 :M
3.391 .339(a unit?  Example: Bank transfer -- ATM gives you $100, debits)J
126 444 :M
3.978 .398(it from your account.)J
90 480 :M
f1_14 sf
8.439 .844(19.3  Transactions)J
126 516 :M
f1_12 sf
1.259(Transactions)A
f3_12 sf
3.939 .394(: group actions together so that they are:)J
126 552 :M
f1_12 sf
1.42(Atomic)A
f3_12 sf
4.203 .42(: either happens or it doesn't \(no partial operations\))J
126 588 :M
f1_12 sf
1.292(Durable)A
f3_12 sf
4.201 .42(: once it happens, stays happened)J
126 624 :M
f1_12 sf
1.23(Serializable)A
f3_12 sf
4.567 .457(: transactions appear to happen one after the)J
126 642 :M
1.55(other)A
126 678 :M
4.071 .407(Critical sections are atomic and serializable, not durable.)J
126 714 :M
4.463 .446(Two more terms:)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.772 .377(  Commit -- when transaction is done \(durable\))J
126 102 :M
3.625 .362(  Abort -- if failure during a transaction \(means it didn't)J
126 120 :M
4.551 .455(happen at all\))J
126 156 :M
1.084(Metaphor:)A
126 174 :M
2.788 .279(  Do a set of operations tentatively.  If get to commit, ok.)J
126 192 :M
3.39 .339(  If have to abort, roll back the operations as if the transaction)J
126 210 :M
7.723 .772(never happened.)J
126 246 :M
3.682 .368(With the ATM machine:)J
126 264 :M
2.875 .287(    commit = handing you over the money.  At that point, can't)J
126 282 :M
3.418 .342(go back.)J
126 336 :M
3.858 .386(How does this work?)J
126 372 :M
6.394 .639(Money transfer:)J
126 408 :M
2.499 .25(  begin)J
126 444 :M
.638 .064(  x = x + 1;)J
126 462 :M
1.345 .134(  y = y - 1;)J
126 498 :M
2.352 .235(  end)J
126 534 :M
3.452 .345(Can't write x then y, because could crash in the middle.)J
126 570 :M
1.245(Instead:)A
126 606 :M
2.255 .225(  Keep "redo" log of all changes.)J
126 642 :M
3.309 .331(  Log is like a journal -- never erase, record of everything)J
126 660 :M
5.666 .567(you've done.)J
126 678 :M
2.771 .277(    \(log is on durable storage -- disk or tape\))J
126 714 :M
2.701 .27(  Don't change disk until record is on log.)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(tom; page: 5 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 120 :M
f3_12 sf
3.549 .355(Picture of disk, memory, log:)J
126 156 :M
2.495 .249(  write new value of x to log)J
126 174 :M
2.587 .259(  write new value of y to log)J
126 192 :M
3.388 .339(  write commit)J
126 210 :M
2.498 .25(  write x to disk)J
126 228 :M
2.65 .265(  write y to disk)J
126 264 :M
3.59 .359(What if we crash after 1?)J
126 282 :M
3.59 .359(What if we crash after 2?)J
126 300 :M
2.978 .298(What if we crash after 3 before 4 + 5?)J
126 318 :M
2.818 .282(  Read log, says x changed, y changed, and commit, so do those)J
126 336 :M
2.831 .283(  changes.)J
126 372 :M
3.347 .335(What if we crash while we are writing "commit?"  Need)J
126 390 :M
6.571 .657(primitive atomic)J
126 408 :M
3.983 .398(operation, or else can't build anything.  Need read/write ops, or)J
126 426 :M
3.437 .344(atomic test&set, or can't do critical sections.  Here, need atomic)J
126 444 :M
.969(single)A
126 462 :M
5.702 .57(sector write.)J
126 498 :M
3.382 .338(Can we write x back to disk before commit?)J
126 534 :M
1.907 .191(  "undo log")J
126 570 :M
3.198 .32(  save old value along with new value.)J
126 606 :M
3.112 .311(    if transaction doesn't commit, "undo" change!)J
126 660 :M
3.46 .346(What if someone else accesses "x"?)J
126 696 :M
2.969 .297(  concurrency = use locks)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(tom; page: 6 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
(A:)S
126 102 :M
2.499 .25(  begin)J
126 138 :M
.847(lock)A
126 156 :M
.736 .074(  x = x + 1)J
126 174 :M
1.453 .145(  y = y - 1)J
126 192 :M
1.1(unlock)A
126 228 :M
2.352 .235(  end)J
126 264 :M
-1.324(B:)A
126 282 :M
2.499 .25(  begin)J
126 318 :M
.847(lock)A
126 336 :M
.736 .074(  x = x + 1)J
126 354 :M
1.453 .145(  y = y - 1)J
126 372 :M
1.1(unlock)A
126 408 :M
2.352 .235(  end)J
126 462 :M
3.162 .316(Put locks around accesses to x, y.)J
126 516 :M
3.796 .38(Is this ok?)J
126 552 :M
2.316 .232(  No.  What if A does its stuff, then B comes in, but B commits)J
126 570 :M
5.127 .513(before A?)J
126 588 :M
2.448 .245(  Then A aborts.  Need to be able to undo A.)J
126 642 :M
3.55 .355(Unlock only at commit.)J
126 714 :M
4.813 .481(One approach:)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(tom; page: 7 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.287 .329(  Write-ahead logging.  Write all changes to log, before sending)J
126 120 :M
2.603 .26(   changes to the disk.)J
126 156 :M
2.792 .279(  "Create file", "delete file" is a transaction.)J
126 192 :M
2.601 .26(  Write log of changes)J
126 228 :M
3.367 .337(    new bitmap, new file header, new directory, commit)J
126 264 :M
2.562 .256(    do all of this *before* updating disk)J
126 318 :M
3.229 .323(  If crash before commit, no change)J
126 354 :M
3.518 .352(  If crash after commit, changes might or might not have gotten)J
126 372 :M
2.189 .219(    to disk.  So "redo" all the changes to disk.)J
126 426 :M
1.098(Advantage:)A
126 444 :M
2.534 .253(  + reliability)J
126 462 :M
3.568 .357(  + performance -- writes to log are synchronous, but other)J
126 480 :M
4.461 .446(writes to disk)J
126 498 :M
2.862 .286(      can be asynchronous \(create a file requires: one)J
126 516 :M
6.945 .695(synchronous write,)J
162 534 :M
4.459 .446(instead of four\))J
126 570 :M
3.193 .319(  - all data written twice)J
126 624 :M
6.762 .676(Another approach:)J
126 660 :M
3.368 .337(  Log-structured file systems -- only copy of the data is on the)J
126 678 :M
.666(log)A
126 696 :M
2.954 .295(    \(PhD thesis from Berkeley in 1991 -- one of the great things)J
126 714 :M
1.505(about)A
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(tom; page: 8 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
2.688 .269(    computer science, is you can get to the state of the art in a)J
126 102 :M
1.188(semester!\))A
126 138 :M
3.54 .354(  Observations:)J
126 174 :M
2.377 .238(    RAM is getting cheaper => Caches getting bigger)J
126 210 :M
2.794 .279(    In extreme case \(infinite size caches\) -> disk I/O only for)J
126 228 :M
1.426(writes)A
126 246 :M
2.464 .246(      \(only for durability of data\))J
126 282 :M
3.141 .314(    So: optimize for writes! \(A little counter-intuitive, since)J
126 300 :M
2.667 .267(      for now, reads are more common than writes.  But with a)J
126 318 :M
.812(cache,)A
126 336 :M
2.48 .248(      most of the traffic will be flushing stuff to disk.\))J
126 372 :M
3.238 .324(    Try to make all writes sequential \(no seeks in between\) --)J
126 390 :M
1.868 .187(      logging does that!)J
126 426 :M
3.858 .386(How does this work?)J
126 462 :M
3.052 .305(  As you modify disk blocks, just store them out to disk in the)J
126 480 :M
.357(log.)A
126 516 :M
2.728 .273(  Need to put data blocks, file header, etc. on log.)J
126 552 :M
2.958 .296(  picture of log -- data blocks, file header, etc.)J
126 588 :M
2.98 .298(  If need to get data from disk, get it from the log -- keep map)J
126 606 :M
3.092 .309(    in memory to tell you where everything is \(also put map on)J
126 624 :M
.664(log\))A
126 660 :M
2.427 .243(      Map: inumber \(index to file header\) -> location on log)J
126 696 :M
3.242 .324(  Eventually, wrap around.  Run out of room.  What happens?)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(tom; page: 9 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
2.66 .266(    Clean.  Almost all files deleted in the first 5 minutes.)J
126 102 :M
2.737 .274(    So go back over log, and compress pieces that are no longer)J
126 120 :M
2.73 .273(    in use.  If disk fills up, need to clean more frequently,)J
126 138 :M
3.148 .315(    so keep disk under-utilized.)J
126 174 :M
2.73 .273(    + write performance)J
126 192 :M
3.107 .311(    + reads, if file written sequentially from beginning to end)J
126 210 :M
2.607 .261(    - cleaning cost \(off-line?\))J
90 243 :M
f1_12 sf
7.835 .784(18.4.3 Write ahead logging)J
126 261 :M
f3_12 sf
3.521 .352(Recent file systems \(Windows NT, for example\) use a "write)J
126 279 :M
4.252 .425(ahead log" technique from databases to eliminate the need for)J
126 297 :M
3.608 .361(fsck.  If need multiple operations to be atomically put on disk)J
126 315 :M
4.026 .403(\(for example, move file from one directory to another\), write)J
126 333 :M
3.191 .319(all changes to a log, then update files on disk, then delete log.)J
126 369 :M
3.339 .334(If crash, read log:)J
126 387 :M
2.812 .281(  If log isn't complete, no change!)J
126 405 :M
3.277 .328(  If log is completely written, apply all changes to disk \(might)J
126 423 :M
3.97 .397(have to re-do changes, but that's ok!\))J
126 441 :M
2.954 .295(  If log is zero, then all updates have gotten to disk.)J
126 477 :M
4.337 .434(Works, but have to write everything twice!)J
90 513 :M
f1_12 sf
9.483 .948(18.4.4 Log-structured file systems)J
126 549 :M
f3_12 sf
3.467 .347(Idea is: instead of writing changes to log, then writing to real)J
126 567 :M
3.853 .385(location, just keep everything on the log!)J
126 603 :M
3.877 .388(Write all changes, meta-data, user data to log.)J
126 639 :M
3.646 .365(What happens when you run out of space?  Garbage collection!)J
endp
%%Trailer
end		% md
%%EOF
