%!PS-Adobe-3.0
%%Title: (l9)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:31 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 3
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 120 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 3)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
8.573 .857(Lecture 9: Concurrency Conclusion)J
60 91 :M
6.305 .63(9.0 Main Points:)J
96 109 :M
f3_12 sf
5.976 .598(Summarize concurrency section)J
96 127 :M
6.049 .605(Illustrate drawbacks to threads)J
60 163 :M
f1_14 sf
10.898 1.09(9.1 Concurrency Summary)J
96 181 :M
f3_12 sf
3.253 .325(Basic idea in all of computer science is to abstract)J
96 199 :M
4.222 .422(complexity behind clean interfaces.  We've done that!)J
96 235 :M
5.148 .515(Physical Reality)J
312 235 :M
1.115(Abstraction)A
96 253 :M
4.32 .432(single CPU, interrupts)J
312 253 :M
6.631 .663(sequential execution,)J
312 271 :M
2.494 .249(infinite # of CPUs)J
96 307 :M
f1_12 sf
1.374(Every)A
f3_12 sf
4.413 .441( major operating system built since 1985 has provided)J
96 325 :M
3.054 .305(threads -- Mach, OS/2, NT \(Microsoft\), Solaris \(new OS from)J
96 343 :M
2.122 .212(SUN\), OSF \(DEC Alphas\).  Why?  Because makes it a lot easier to)J
96 361 :M
4.582 .458(write concurrent programs, from Web servers, to databases, to)J
96 379 :M
7.913 .791(embedded systems.)J
96 415 :M
3.429 .343(So does this mean you should all go out and use threads?)J
60 451 :M
f1_14 sf
8.031 .803(9.2 Cautionary Tales)J
96 487 :M
f3_12 sf
4.577 .458(Illustrate why an abstraction doesn't always work the way you)J
96 505 :M
3.49 .349(want it to.)J
60 541 :M
f1_12 sf
9.004 .9(9.2.1 OS/2)J
96 559 :M
f3_12 sf
4.223 .422(Microsoft OS/2 \(around 1988\): initially, a spectacular failure.)J
96 577 :M
4.091 .409(Since then, IBM has completely re-written it from scratch.)J
96 613 :M
4.831 .483(Used threads for everything -- window systems,)J
96 631 :M
4.187 .419(communication between programs, etc.  Threads are a good)J
96 649 :M
5.395 .54(idea, right?)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 3)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.22 .422(Thus, system created lots of threads, but few actually running)J
126 102 :M
3.465 .346(at any one time -- most waiting around for user to type in a)J
126 120 :M
3.914 .391(window, or for a network packet to arrive.)J
126 156 :M
3.612 .361(Might have90 threads, but just a few at any one time on the)J
126 174 :M
3.952 .395(ready queue.  And each thread needs its own execution stack,)J
126 192 :M
3.522 .352(say, 9KB, whether it is runnable or waiting.)J
126 228 :M
4.117 .412(Result: system needs an extra)J
f1_12 sf
4.049 .405(1 MB)J
f3_12 sf
4.03 .403( of memory, mostly)J
126 246 :M
3.615 .361(consumed by waiting threads. 1 MB of memory cost $200 in)J
126 264 :M
1.413(1988.)A
126 300 :M
3.144 .314(Put yourself in the customer's shoes.  Did OS/2 run Excel or)J
126 318 :M
3.337 .334(Word better?  OK, it gave you the ability to keep working when)J
126 336 :M
4.047 .405(you use the printer, but is that worth $200?)J
126 372 :M
f1_12 sf
6.383 .638(Moral: threads are cheap, but they're not free.)J
126 408 :M
f3_12 sf
4.841 .484(Who are operating systems features for?)J
126 426 :M
3.937 .394(   Operating system developer?)J
126 444 :M
2.241 .224(   End user?)J
126 480 :M
4.191 .419(Lots of operating systems research has been focused on making)J
126 498 :M
4.274 .427(it easier for operating systems )J
f1_12 sf
1.303(developers)A
f3_12 sf
3.277 .328(, because it is so)J
126 516 :M
4.927 .493(complicated to build operating systems.)J
126 552 :M
3.142 .314(But the trick to selling it is to make it better for the )J
f1_12 sf
5.772 .577(end user)J
f3_12 sf
(.)S
90 588 :M
f1_12 sf
8.533 .853(9.2.2 Threads and Multiprocessors)J
126 606 :M
f3_12 sf
3.796 .38(Might think you have everything you need to know to go write)J
126 624 :M
3.971 .397(a parallel program: Just split program up into threads, so that)J
126 642 :M
3.95 .395(things can run in parallel.)J
126 678 :M
3.987 .399(Example:  Matrix multiply)J
162 715 :M
f4_12 sf
-.207(  for \(i = 0; i < N; i++\))A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 3)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
162 82 :M
f4_12 sf
-.206(    for \(j = 0; j < N; j++\))A
162 100 :M
-.205(       for \(k = 0; k < N; k++\))A
162 118 :M
-.203(          C[i][j] += A[i][k] * B[j][k];)A
126 153 :M
f3_12 sf
3.652 .365(How would you parallelize this?  Create a thread for every)J
126 171 :M
3.492 .349(iteration of inner loop?  Each one can run concurrently, using a)J
126 189 :M
2.849 .285(lock to protect access to each element in C[i][j].)J
126 225 :M
3.32 .332(Would work, but wouldn't be efficient.  In Nachos, a few)J
126 243 :M
4.236 .424(hundred instructions to create a thread.  Here, maybe ten)J
126 261 :M
4.424 .442(instructions to do each iteration.)J
126 297 :M
f1_12 sf
6.556 .656(Repeat: threads are cheap, but they aren't free.)J
126 333 :M
f3_12 sf
4.208 .421(Instead: group iterations so that each thread does a fair amount)J
126 351 :M
4.008 .401(of work.)J
endp
%%Trailer
end		% md
%%EOF
