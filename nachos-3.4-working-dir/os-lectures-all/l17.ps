%!PS-Adobe-3.0
%%Title: (l17)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (9:05 Friday, March 24, 1995)
%%For: (tom)
%%Pages: 14
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 153 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 14)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
6.681 .668(Lecture 17: File Systems and Disk Management)J
60 91 :M
7.292 .729(17.0 Main Points)J
96 109 :M
f3_12 sf
6.033 .603(Implementing file system abstraction)J
96 127 :M
5.43 .543(Comparison among disk management algorithms)J
96 164 :M
5.148 .515(Physical Reality)J
312 164 :M
4.984 .498(File System Abstraction)J
-1 -1 56 149 1 1 55 148 @b
-1 -1 56 149 1 1 55 148 @b
56 149 -1 1 271 148 1 56 148 @a
-1 -1 272 149 1 1 271 148 @b
272 149 -1 1 487 148 1 272 148 @a
-1 -1 488 149 1 1 487 148 @b
-1 -1 488 149 1 1 487 148 @b
-1 -1 56 167 1 1 55 149 @b
-1 -1 272 167 1 1 271 149 @b
-1 -1 488 167 1 1 487 149 @b
96 183 :M
6.098 .61(block oriented)J
312 183 :M
7.067 .707(byte oriented)J
-1 -1 56 168 1 1 55 167 @b
56 168 -1 1 271 167 1 56 167 @a
-1 -1 272 168 1 1 271 167 @b
272 168 -1 1 487 167 1 272 167 @a
-1 -1 488 168 1 1 487 167 @b
-1 -1 56 186 1 1 55 168 @b
-1 -1 272 186 1 1 271 168 @b
-1 -1 488 186 1 1 487 168 @b
96 202 :M
4.718 .472(physical sector #'s)J
312 202 :M
5.759 .576(named files)J
-1 -1 56 187 1 1 55 186 @b
56 187 -1 1 271 186 1 56 186 @a
-1 -1 272 187 1 1 271 186 @b
272 187 -1 1 487 186 1 272 186 @a
-1 -1 488 187 1 1 487 186 @b
-1 -1 56 205 1 1 55 187 @b
-1 -1 272 205 1 1 271 187 @b
-1 -1 488 205 1 1 487 187 @b
96 221 :M
5.825 .582(no protection)J
1 G
-30 -31 1 1 rF
178 221 :M
-30 -31 :T
psb
/wp$gray 1 def

/wp$top 255 def

/wp$left 85 def

/wp$right 301 def

/wp$bottom 273 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
30 31 :T
312 221 :M
0 G
5.121 .512(users protected from each)J
312 239 :M
1.55(other)A
-1 -1 56 206 1 1 55 205 @b
56 206 -1 1 271 205 1 56 205 @a
-1 -1 272 206 1 1 271 205 @b
272 206 -1 1 487 205 1 272 205 @a
-1 -1 488 206 1 1 487 205 @b
-1 -1 56 242 1 1 55 206 @b
-1 -1 272 242 1 1 271 206 @b
-1 -1 488 242 1 1 487 206 @b
96 258 :M
4.391 .439(data might be corrupted if)J
96 276 :M
6.741 .674(machine crashes)J
312 258 :M
4.942 .494(robust to machine failures)J
1 G
-30 -31 1 1 rF
475 258 :M
-30 -31 :T
psb
/wp$gray 1 def

/wp$top 292 def

/wp$left 301 def

/wp$right 517 def

/wp$bottom 310 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
30 31 :T
0 G
-1 -1 56 243 1 1 55 242 @b
56 243 -1 1 271 242 1 56 242 @a
-1 -1 272 243 1 1 271 242 @b
272 243 -1 1 487 242 1 272 242 @a
-1 -1 488 243 1 1 487 242 @b
-1 -1 56 279 1 1 55 243 @b
-1 -1 56 280 1 1 55 279 @b
-1 -1 56 280 1 1 55 279 @b
56 280 -1 1 271 279 1 56 279 @a
-1 -1 272 279 1 1 271 243 @b
-1 -1 272 280 1 1 271 279 @b
272 280 -1 1 487 279 1 272 279 @a
-1 -1 488 279 1 1 487 243 @b
-1 -1 488 280 1 1 487 279 @b
-1 -1 488 280 1 1 487 279 @b
60 313 :M
f1_14 sf
8.567 .857(17.1 File System Components)J
96 349 :M
f1_12 sf
7.66 .766(Disk management)J
f3_12 sf
3.718 .372(: how to arrange collection of disk blocks)J
114 367 :M
4.208 .421(into files)J
96 385 :M
f1_12 sf
1.424(Naming)A
f3_12 sf
3.242 .324(: user gives file name, not track 50, platter 5, etc.)J
96 403 :M
f1_12 sf
1.219(Protection)A
f3_12 sf
5.178 .518(: keep information secure)J
96 421 :M
f1_12 sf
1.26(Reliability/durability)A
f3_12 sf
4.582 .458(: when system crashes, lose stuff in)J
114 439 :M
4.105 .41(memory, but want files to be durable.)J
60 475 :M
f1_14 sf
5.747 .575(17.2 User vs. System View of a File)J
96 511 :M
f3_12 sf
4.63 .463(User's view:)J
96 529 :M
2.415 .242(  collection of bytes \(UNIX\))J
96 547 :M
3.113 .311(  collection of records \(IBM\) -- read chunks of bytes at a time)J
96 583 :M
3.62 .362(System's view \(inside OS\):)J
96 601 :M
2.391 .239(   collection of blocks \(a )J
f1_12 sf
1.092(block)A
f3_12 sf
2.92 .292( is a logical transfer unit, while a)J
96 619 :M
2.884 .288(sector is the physical transfer unit.  Block size >= sector size; in)J
96 637 :M
1.548 .155(UNIX, block size is 4KB.\))J
60 673 :M
f1_12 sf
7.383 .738(17.2.1 Translating from user to system view)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.538 .354(What happens if user says: give me bytes 2 - 12?)J
126 102 :M
3.217 .322(    fetch block corresponding to those bytes)J
126 120 :M
3.093 .309(    return just the correct portion of the block)J
126 156 :M
3.495 .349( What about: write bytes 2 - 12?)J
126 174 :M
1.976 .198(    fetch block)J
126 192 :M
2.588 .259(    modify portion)J
126 210 :M
2.307 .231(    write out block)J
126 246 :M
3.244 .324(Everything inside file system is in whole size blocks.  For)J
126 264 :M
3.524 .352(example, getc, putc => buffers 4096 bytes, even if interface is)J
126 282 :M
3.451 .345(one byte at a time.)J
126 336 :M
2.744 .274(From now on, file is collection of blocks.)J
90 372 :M
f1_14 sf
7.67 .767(17.3 File Usage Patterns)J
126 408 :M
f3_12 sf
3.417 .342(How do users access files?)J
126 444 :M
3.454 .345(1. Sequential access -- bytes read in order \(give me the next X)J
126 462 :M
4.143 .414(bytes, then give me next\))J
126 516 :M
4.117 .412(2. Random access -- read/write element out of middle of array)J
126 534 :M
2.389 .239(    \(give me bytes i-j\))J
126 570 :M
4.113 .411(3. Content-based access -- "find me 100 bytes starting with)J
126 588 :M
-.666(ANDERSON")A
126 642 :M
4.158 .416(Many file systems don't provide #3; instead, database is built)J
126 660 :M
4.19 .419(on top to index content \(requires efficient random access\))J
126 714 :M
3.954 .395(How are files typically used?)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
2.865 .287(1. Most files are small \(for example, .login, .c files\))J
126 120 :M
3.136 .314(2. Large files use up most of the disk space)J
126 156 :M
4.015 .401(3. Large files account for most of the bytes transfered to/from)J
126 174 :M
1.42(disk)A
126 210 :M
4.003 .4(Bad news: need everything to be efficient.)J
162 228 :M
3.128 .313(Need small files to be efficient, since lots of them.)J
162 246 :M
3.193 .319(Need large files to be efficient, since most of the disk)J
126 264 :M
3.431 .343(space, most of the I/O due to them)J
90 300 :M
f1_14 sf
7.412 .741(17.4 Disk Management Policies)J
126 318 :M
f3_12 sf
3.074 .307(How do we organize file on disk?)J
90 372 :M
f1_12 sf
8.111 .811(17.4.1 Common data structures)J
126 390 :M
f3_12 sf
3.204 .32(Need a "file header", one for each file: which disk sectors are)J
126 408 :M
4.29 .429(associated with each file)J
126 444 :M
3.738 .374(Also, need bitmap to represent free space on disk, one bit per)J
126 462 :M
3.903 .39(block \(or sector\).  Blocks numbered in cylinder-major order, so)J
126 480 :M
4.606 .461(that adjacent numbered blocks can be accessed without seeks)J
126 498 :M
4.904 .49(or rotational delay.)J
126 501 229 115 rC
107 20 278 543.5 @f
276 531 :M
(0)S
313 531 :M
(1)S
336 542 :M
(2)S
306 550 :M
(3)S
248 529 :M
(7)S
107 20 280 575.5 @f
277 566 :M
(8)S
310 565 :M
(9)S
331 584 :M
(10)S
gR
gS 30 31 552 730 rC
126 631 :M
f3_12 sf
2.115 .212(Track 0, surface 0, sector 0, 1, ... | surface 1, sector 0, 1 ... | ... |)J
126 649 :M
3.247 .325(track 1, surface 1, sector 0...)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.355 .335(Caching: every OS today keeps a cache of recently used disk)J
126 102 :M
2.863 .286(blocks in memory, to avoid having to go to disk.  Common to all)J
126 120 :M
3.374 .337(organizations.  For now, assume no cache, and add it later.)J
90 174 :M
f1_12 sf
9.096 .91(17.4.2 Contiguous allocation)J
126 210 :M
f3_12 sf
3.154 .315(User says in advance how big file will be)J
126 246 :M
3.59 .359(Search bit map \(using best fit/first fit\) to locate space for file)J
126 282 :M
4.586 .459(File header contains:)J
162 300 :M
3.582 .358(first sector in file)J
162 318 :M
3.019 .302(file size \(# of sectors\))J
126 354 :M
2.456 .246(Pros & cons:)J
126 372 :M
2.977 .298(  + fast sequential access)J
126 408 :M
2.819 .282(  + easy random access)J
126 444 :M
4.378 .438(  - external fragmentation)J
126 480 :M
2.657 .266(  - hard to grow files)J
90 534 :M
f1_12 sf
8.535 .854(17.4.3. Linked files)J
126 552 :M
f3_12 sf
3.213 .321(Each block, pointer to next on disk \(Alto\))J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(tom; page: 5 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 385 270 rC
150.5 122.5 67 17 rS
294.5 111.5 60 71 rS
293 167 -1 1 355 166 1 293 166 @a
372.5 191.5 60 71 rS
371 247 -1 1 433 246 1 371 246 @a
449.5 267.5 60 71 rS
448 323 -1 1 510 322 1 448 322 @a
151 120 :M
f3_12 sf
(file header)S
13 156 204 291 130 @k
179 131 -1 1 286 130 1 179 130 @a
13 164 212 394 186 @k
323 176 -1 1 389 185 1 323 175 @a
13 161 209 480 264 @k
403 257 -1 1 475 264 1 403 256 @a
467 337 :M
(null)S
gR
gS 30 31 552 730 rC
126 357 :M
f3_12 sf
3.628 .363(File header pointer to first block on disk)J
126 393 :M
.682(Pros&cons:)A
126 411 :M
2.837 .284(  + can grow files dynamically)J
126 447 :M
2.764 .276(  + free list managed same as file)J
126 483 :M
3.621 .362(  - sequential access: seek between each block)J
126 519 :M
3.109 .311(  - - - random access: horrible)J
126 555 :M
2.9 .29(  - unreliable \(lose block, lose rest of file\))J
90 591 :M
f1_12 sf
7.598 .76(17.4.3 Indexed files \(Nachos, VMS\))J
126 627 :M
f3_12 sf
3.503 .35(User declares max file size; system allocates a file header to)J
126 645 :M
3.302 .33(hold an array of pointers big enough to point to file size)J
126 663 :M
4.572 .457(number of blocks.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(tom; page: 6 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 292 190 rC
166.5 115.5 60 105 rS
166 127 -1 1 228 126 1 166 126 @a
166 142 -1 1 228 141 1 166 141 @a
166 158 -1 1 228 157 1 166 157 @a
165 174 -1 1 227 173 1 165 173 @a
165 189 -1 1 227 188 1 165 188 @a
167 210 -1 1 229 209 1 167 209 @a
165 201 -1 1 227 200 1 165 200 @a
304.5 104.5 55 55 rS
359.5 200.5 57 60 rS
162 102 :M
f3_12 sf
(file header)S
312 94 :M
(disk blocks)S
13 149 197 300 106 @k
-1 -1 200 120 1 1 294 106 @b
13 178 226 355 197 @k
198 134 -1 1 350 195 1 198 133 @a
181 156 :M
(null)S
gR
gS 30 31 552 730 rC
126 295 :M
f3_12 sf
3.083 .308(  + can easily grow up to space allocated for descriptor)J
126 331 :M
2.548 .255(  + random access is fast)J
126 367 :M
3.01 .301(  - clumsy to grow file bigger than table size)J
126 403 :M
2.387 .239(  - still lots of seeks)J
90 457 :M
f1_12 sf
7.874 .787(17.4.5 Multilevel indexed \(UNIX 4.1\))J
126 493 :M
f3_12 sf
3.004 .3(Key idea: efficient for small files, but still allow big files)J
126 529 :M
3.703 .37(File header: 13 pointers \(fixed size table, pointers not all)J
126 547 :M
1.233(equivalent\))A
126 583 :M
3.226 .323(First ten, pointers to data blocks.  \(If file is small enough, some)J
126 601 :M
3.121 .312(pointers will be NULL.\))J
126 637 :M
3.753 .375(What if you allocate 11th block?)J
126 655 :M
3.451 .345(Pointer to an indirect block -- a block of pointers to data)J
126 673 :M
2.749 .275(blocks.  Gives us 256 blocks, + 10 \(from file header\) = 1/4 MB)J
126 709 :M
3.599 .36(What if you allocate a 267th block?)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(tom; page: 7 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.431 .343(Pointer to a doubly indirect block -- a block of pointers to)J
126 102 :M
3.511 .351(indirect blocks \(in turn, block of pointers to data blocks\). Gives)J
126 120 :M
2.441 .244(us about 64K blocks => 64MB)J
126 156 :M
3.315 .331(What if want a file bigger than this?  One last pointer -- what)J
126 174 :M
3.84 .384(should it point to?)J
126 210 :M
3.94 .394(Instead, pointer to triply indirect block -- block of pointers to)J
126 228 :M
3.475 .347(doubly  indirect blocks \(which are ...\))J
126 264 :M
3.483 .348(Thus, file header is:)J
126 282 :M
4.22 .422(First 10 data block pointers)J
126 300 :M
2.487 .249(      11 indirect block pointer)J
126 318 :M
2.726 .273(      12 doubly indirect block pointer)J
126 336 :M
2.725 .272(      13 triply indirect block pointer)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(tom; page: 8 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 438 506 rC
143.5 96.5 53 118 rS
138 90 :M
f3_12 sf
(file header)S
144 109 -1 1 197 108 1 144 108 @a
144 123 -1 1 197 122 1 144 122 @a
144 136 -1 1 197 135 1 144 135 @a
144 202 -1 1 197 201 1 144 201 @a
143 188 -1 1 196 187 1 143 187 @a
144 177 -2 2 198 175 2 144 175 @a
129 109 :M
(1)S
131 122 :M
(2)S
126 199 :M
(12)S
125 186 :M
(11)S
126 172 :M
(10)S
130 139 :M
(3)S
125 211 :M
(13)S
265.5 95.5 52 49 rS
351.5 115.5 52 49 rS
282 89 :M
(disk blocks)S
13 156 204 282 103 @k
178 103 -1 1 277 103 1 178 102 @a
13 160 208 370 131 @k
173 115 -1 1 365 131 1 173 114 @a
262.5 207.5 52 49 rS
376.5 180.5 52 49 rS
366.5 249.5 52 49 rS
13 172 220 261 209 @k
161 180 -1 1 256 208 1 161 179 @a
13 147 195 393 195 @k
-1 -1 289 213 1 1 387 196 @b
13 164 212 381 268 @k
286 254 -1 1 376 267 1 286 253 @a
256 101 :M
(1)S
341 124 :M
(2)S
359 192 :M
(11)S
344 261 :M
(266)S
264.5 346.5 52 49 rS
13 147 195 395 334 @k
-1 -1 291 352 1 1 389 335 @b
396.5 317.5 52 49 rS
510.5 290.5 52 49 rS
500.5 359.5 52 49 rS
13 147 195 527 305 @k
-1 -1 423 323 1 1 521 306 @b
13 164 212 515 378 @k
420 364 -1 1 510 377 1 420 363 @a
483 301 :M
(267)S
13 215 263 263 344 @k
174 195 -1 1 261 339 1 174 194 @a
13 -110 -62 150 451 @k
-1 -1 151 446 1 1 167 208 @b
140.5 452.5 52 49 rS
213.5 496.5 52 49 rS
13 147 195 344 484 @k
-1 -1 240 502 1 1 338 485 @b
345.5 467.5 52 49 rS
459.5 440.5 52 49 rS
449.5 509.5 52 49 rS
13 147 195 476 455 @k
-1 -1 372 473 1 1 470 456 @b
13 164 212 464 528 @k
369 514 -1 1 459 527 1 369 513 @a
13 191 239 215 494 @k
162 458 -1 1 211 491 1 162 457 @a
275 276 :M
(256)S
277 410 :M
(256)S
408 380 :M
(256)S
358 531 :M
(256)S
224 560 :M
(256)S
462 573 :M
(256)S
475 503 :M
(256)S
149 515 :M
(256)S
gR
gS 30 31 552 730 rC
126 611 :M
f3_12 sf
2.303 .23(1. Bad news: Still an upper limit on file size ~ 16 GB.)J
126 629 :M
3.808 .381(2. Pointers get filled in dynamically: need to allocate indirect)J
126 647 :M
2.647 .265(block only when file grows > 10 blocks.  If small file, no)J
126 665 :M
6.799 .68(indirection needed.)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(tom; page: 9 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.254 .325(3. How many disk accesses to reach block #23?  Which are)J
126 102 :M
1.688(they?)A
126 138 :M
3.188 .319(How about block # 5?)J
126 174 :M
3.568 .357(How about block # 340?)J
126 210 :M
2.922 .292(UNIX pros&cons:)J
126 246 :M
3.213 .321(+ simple \(more or less\))J
126 282 :M
3.036 .304(+ files can easily expand \(up to a point\))J
126 318 :M
3.883 .388(+ small files particularly cheap and easy)J
126 354 :M
3.713 .371(- very large files, spend lots of time reading indirect blocks)J
126 390 :M
3.164 .316(- lots of seeks)J
90 426 :M
f1_12 sf
5.858 .586(17.4.6 DEMOS)J
126 444 :M
f3_12 sf
3.278 .328(OS for Cray-1, mid to late 70's; file system approach)J
126 462 :M
6.065 .607(corresponds to segmentation.)J
126 498 :M
3.494 .349(Cray-1 had12 ns cycle time, so CPU:disk speed ratio about the)J
126 516 :M
3.484 .348(same as today \(a few million instructions = 1 seek\).)J
126 552 :M
3.969 .397(Idea: reduce disk seeks by using contiguous allocation in)J
126 570 :M
4.248 .425(normal case, but allow flexibility to have non-contiguous)J
126 588 :M
.731(allocation.)A
126 624 :M
3.742 .374(File header: table of base&size \(10 "block group" pointers\))J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(tom; page: 10 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 266 207 rC
162.5 102.5 71 81 rS
-1 -1 196 184 1 1 195 102 @b
160 203 :M
f3_12 sf
(file header)S
325 95 :M
(on disk)S
325.5 102.5 65 175 rS
13 155 203 321 103 @k
-1 -1 179 108 1 1 315 103 @b
13 213 261 321 275 @k
212 110 -1 1 319 270 1 212 109 @a
163 99 :M
(base)S
207 99 :M
(size)S
gR
gS 30 31 552 730 rC
126 294 :M
f3_12 sf
3.219 .322(Each "block group" -- a contiguous region of blocks)J
126 348 :M
3.492 .349(Are10 block group pointers enough?  No.  If need more than 10)J
126 366 :M
2.889 .289(block groups, set flag in file header: BIGFILE.)J
126 402 :M
3.535 .354(Each table entry now points to an indirect block group -- a)J
126 420 :M
3.662 .366(block group of pointers to block groups.)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(tom; page: 11 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 416 299 rC
162.5 102.5 71 81 rS
-1 -1 196 184 1 1 195 102 @b
160 203 :M
f3_12 sf
(file header)S
325 95 :M
(on disk)S
325.5 102.5 65 175 rS
13 155 203 321 103 @k
-1 -1 179 108 1 1 315 103 @b
13 213 261 321 275 @k
212 110 -1 1 319 270 1 212 109 @a
163 99 :M
(base)S
207 99 :M
(size)S
458.5 92.5 65 175 rS
356 103 -1 1 358 277 1 356 102 @a
13 149 197 454 93 @k
-1 -1 338 109 1 1 448 93 @b
13 219 267 454 263 @k
375 109 -1 1 453 258 1 375 108 @a
308 301 :M
(indirect block group)S
455 286 :M
(block group)S
gR
gS 30 31 552 730 rC
126 386 :M
f3_12 sf
3.08 .308(Can get huge files this way: Suppose 100 blocks in a block)J
126 404 :M
2.625 .262(group \(can be bigger or smaller\) => 10 GB max file size)J
126 440 :M
2.818 .282(How do you find a block group? Use bit map to find block of 0's)J
126 476 :M
.682(Pros&cons:)A
126 494 :M
2.698 .27(  + easy to find free block groups)J
126 530 :M
3.598 .36(  + free areas merge automatically)J
126 566 :M
2.579 .258(  - when disk fills up:)J
126 584 :M
2.84 .284(    a. no long runs of blocks \(fragmentation\))J
126 602 :M
2.407 .241(    b. high CPU overhead to find free block)J
126 638 :M
3.926 .393(In practice, disks are always full.)J
126 674 :M
.645(Solution:)A
126 692 :M
3.031 .303(    don't let disk get full -- keep portion in reserve)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(tom; page: 12 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.226 .323(Free count = # blocks free in bitmap.)J
126 102 :M
3.323 .332(Normally, don't even try allocate if free count = 0.)J
126 138 :M
3.21 .321(Change this to: don't allocate if free count < reserve)J
126 174 :M
4.014 .401(Why do this?)J
126 192 :M
3.4 .34(  Tradeoff: pay for more disk space, get contiguous allocation)J
126 228 :M
3.448 .345(How much of a reserve do you need?)J
126 246 :M
3.092 .309(  In practice, 10% seems like enough.)J
90 300 :M
f1_12 sf
5.335 .534(17.4.7 UNIX BSD 4.2)J
126 318 :M
f3_12 sf
3.285 .328(Exactly the same as BSD 4.1 \(same file header and triply)J
126 336 :M
3.705 .37(indirect blocks\), except incorporated some ideas from DEMOS:)J
126 354 :M
3.052 .305(   uses bitmap allocation in place of free list, file header)J
126 372 :M
3.41 .341(   attempt to allocate files contiguously)J
126 390 :M
3.018 .302(   10% reserved disk space)J
126 408 :M
2.773 .277(    skip sector positioning)J
126 444 :M
3.319 .332(Problem: when you create a file, don't know how big it will)J
126 462 :M
2.964 .296(become \(in UNIX, append to file\).  So how much contiguous)J
126 480 :M
3.442 .344(space do you allocate for a file, when it's created?)J
126 516 :M
3.066 .307(In Demos, power of 2 growth: once it grows past1 MB, allocate)J
126 534 :M
2.331 .233(2MB, etc.)J
126 570 :M
3 .3(In BSD 4.2, just find some range of free blocks, put each new)J
126 588 :M
3.319 .332(file at the front of a different range.  When need to expand a)J
126 606 :M
3.739 .374(file, you first try successive blocks in bitmap.)J
126 642 :M
3.893 .389(Also, rotational delay can cause a problem, even with)J
126 660 :M
5.825 .583(sequential files.)J
126 696 :M
3.214 .321(Read one block, do processing, read next block.  In the)J
126 714 :M
3.827 .383(meantime, disk has continued turning.  If have to wait for)J
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(tom; page: 13 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.03 .403(entire rotation, problem!  Go from reading at disk bandwidth,)J
126 102 :M
4.38 .438(to reading one sector every rotation.)J
126 138 :M
4.392 .439(Two solutions:)J
126 156 :M
2.499 .25(   skip sector positioning \(BSD 4.2\))J
126 174 :M
3.932 .393(   read ahead/disk track buffers -- read next block right after)J
126 192 :M
3.317 .332(first, even if application hasn't asked for it yet.  This could be)J
126 210 :M
3.688 .369(done either by OS \(read ahead\) or by disk itself \(track buffers\).)J
90 282 :M
f1_14 sf
8.419 .842(17.5 Disk scheduling)J
126 300 :M
f3_12 sf
3.234 .323(Disk can do only one request at a time; what order do you)J
126 318 :M
4.37 .437(choose to do requests?)J
126 372 :M
3.124 .312(If 0 or 1 request queued, easy.  But what if more than 1?  Try)J
126 390 :M
4.348 .435(to arrange requests in some order that reduces seek time.)J
90 426 :M
f1_12 sf
6.548 .655(17.5.1 FIFO order)J
126 444 :M
f3_12 sf
4.146 .415(Fair among requesters, but order of arrival may be to random)J
126 462 :M
2.861 .286(spots on the disk => long seeks)J
90 498 :M
f1_12 sf
7.479 .748(17.5.2 SSTF)J
126 516 :M
f3_12 sf
3.482 .348(SSTF: shortest seek time first.  Pick the request that's closest on)J
126 534 :M
3.579 .358(the disk.  \(Although called SSTF, today, include rotational delay)J
126 552 :M
3.302 .33(in calculation, since rotation can be as long as seek.\))J
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(tom; page: 14 of 14)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 304 211 rC
132 138 279.5 184.5 @f
300.5 176.5 9 19 rS
369 198 :M
f3_12 sf
(Head)S
290 217 :M
(1)S
276 201 :M
(2)S
310 237 :M
(3)S
158 278 :M
(Order requests will be serviced using SSTF.)S
13 -17 31 306 185 @k
312 186 -1 1 364 192 1 312 185 @a
gR
gS 30 31 552 730 rC
126 316 :M
f3_12 sf
3.503 .35(SSTF is good at reducing seeks, but may get starvation)J
90 334 :M
f1_12 sf
7.314 .731(17.5.3 SCAN)J
126 352 :M
f3_12 sf
4.09 .409(SCAN implements an elevator algorithm: take the closest)J
126 370 :M
3.914 .391(request in the direction of travel.  No starvation, but retains)J
126 388 :M
2.204 .22(flavor of SSTF.)J
endp
%%Trailer
end		% md
%%EOF
