%!PS-Adobe-3.0
%%Title: (l18)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (9:06 Friday, March 24, 1995)
%%For: (tom)
%%Pages: 4
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 139 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 4)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.248 .725(Lecture 18: Naming and Directories)J
60 91 :M
7.292 .729(18.1 Main Points)J
96 109 :M
f3_12 sf
3.169 .317(How do users name files?  What is a name?)J
96 127 :M
3.235 .323(Lookup: given a name, how do you translate it into a file)J
114 145 :M
1.576(header?)A
60 199 :M
f1_14 sf
7.249 .725(18.2 File Header Storage)J
96 217 :M
f3_12 sf
3.3 .33(Where is file header stored on disk?  In \(early\) UNIX, special)J
96 235 :M
5.354 .535(array in outermost cylinders.)J
96 238 313 189 rC
160 161 270.5 345 @f
134 129 270.5 346 @f
-1 -1 273 282 1 1 272 264 @b
-1 -1 287 285 1 1 290 267 @b
-1 -1 300 289 1 1 306 273 @b
-1 -1 310 294 1 1 319 280 @b
-1 -1 319 302 1 1 330 291 @b
-1 -1 329 312 1 1 339 305 @b
333 272 :M
(file header )S
333 288 :M
(array)S
232 348 :M
(data, indirect)S
232 364 :M
(blocks, doubly)S
232 380 :M
(indirect ...)S
gR
gS 0 0 552 730 rC
96 442 :M
f3_12 sf
3.198 .32(UNIX refers to file by index into array -- tells it where to find)J
96 460 :M
4.827 .483(the file header)J
96 496 :M
.503(UNIX-isms:)A
96 514 :M
3.232 .323(  "i-node" -- file header)J
96 532 :M
3.719 .372(  "i-number" -- index into the array)J
96 586 :M
4.081 .408(UNIX file header organization, seems strange:)J
96 604 :M
3.587 .359(1. header not anywhere near the data blocks.  To read a small)J
96 622 :M
3.42 .342(file, seek to get header, seek back to data.)J
96 658 :M
3.497 .35(2. Fixed size, set when disk is formatted.  Means maximum)J
96 676 :M
3.937 .394(number of files that can be created.)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.585 .458(Why not put headers near data?)J
126 120 :M
3.165 .317(  + reliability: whatever happens to the disk, you can find all of)J
126 138 :M
2.457 .246(  the files)J
126 174 :M
2.517 .252(  + UNIX BSD 4.2 puts portion of the array on each cylinder)J
126 192 :M
3.92 .392(group.  Attempts to put all the headers, data within a directory)J
126 210 :M
4.429 .443(on the same cylinder)J
126 246 :M
3.084 .308(  + file headers are much smaller than a whole block \(a few)J
126 264 :M
4.308 .431(hundred bytes\), so multiple file headers fetched from disk at)J
126 282 :M
5.976 .598(same time)J
126 318 :M
3.601 .36(Question: do you ever look at a file header without reading the)J
126 336 :M
3.002 .3(file?  If not, put the file header as the first block of the file!)J
126 372 :M
3.785 .379(Turns out that fetching the file header is something like 4)J
126 390 :M
3.413 .341(times more common in UNIX than reading the file \(ls, make\).)J
90 444 :M
f1_14 sf
9.999 1(18.3 Naming)J
90 480 :M
f1_12 sf
9.53 .953(18.3.1 Options)J
126 498 :M
f3_12 sf
3.862 .386(1. use index \(ask users specify i-node number\). Easier for)J
126 516 :M
3.828 .383(system, not as easy for users.)J
126 552 :M
4.157 .416(2. text name)J
126 588 :M
2.811 .281(3. icon)J
126 624 :M
3.091 .309(With icons or text, still have to map name -> index)J
90 660 :M
f1_12 sf
10.585 1.058(18.3.2 Directories)J
126 678 :M
1.161(Directory)A
f3_12 sf
3.49 .349( maps name -> file index \(where to find file header\))J
126 714 :M
3.285 .329(Directory just a table of file name, file index pairs.)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.943 .394(General idea: )J
f1_12 sf
.996(relation)A
f3_12 sf
3.945 .394(.  Table associating things together.)J
126 120 :M
5.253 .525(Principle behind relational databases \(invented here by)J
126 138 :M
4.266 .427(Stonebraker\).  Relations are useful because of associative match)J
126 156 :M
3.769 .377(-- look up based on content)J
126 192 :M
4.643 .464(For example: \(employee name, salary, address\).)J
126 210 :M
5.288 .529(\(flight, passenger, seat assignment\))J
126 246 :M
3.543 .354(Directories just a special kind of a relation, connecting file name)J
126 264 :M
3.634 .363(to index \(ditto with password file, caches, etc.\))J
126 300 :M
3.082 .308(Each directory is stored as a file, containing a list of "name",)J
126 318 :M
5.309 .531(index pairs.)J
126 354 :M
3.511 .351(But, only OS  permitted to modify directory)J
126 390 :M
3.21 .321(Any program can read the directory file.  This is how "ls")J
126 408 :M
1.173(works.)A
126 444 :M
4.545 .454(Problem: means hard to change file directory structure!)J
90 480 :M
f1_12 sf
8.902 .89(18.3.3 Directory Hierarchy)J
126 498 :M
f3_12 sf
5.243 .524(Directories organized into hierarchical structure)J
126 534 :M
8.699 .87( /joe/abcde/file1)J
126 552 :M
1.289 .129( ^ root)J
126 570 :M
1.725 .172(   ^ subdir joe)J
126 588 :M
1.439 .144(          ^subdir abcde)J
126 624 :M
2.564 .256(Top-level directory has pair: <joe, #>.  joe has pair <abcde, #>,)J
126 642 :M
.845(etc.)A
126 678 :M
3.403 .34(How many disk I/O's to access first byte of file1?)J
126 714 :M
3.181 .318(1. Read in file header for root \(always at fixed spot on disk\).)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.043 .304(2. Read in first data block for root.)J
126 138 :M
2.97 .297(3. Read in file header for joe)J
126 174 :M
2.889 .289(4. Read in first data block for joe.)J
126 210 :M
3.292 .329(5. Read in file header for abcde)J
126 246 :M
3.164 .316(6. Read in first data block for abcde.)J
126 282 :M
3.128 .313(7. Read in file header for file1)J
126 318 :M
3.078 .308(8. Read in first data block for file1)J
126 354 :M
f1_12 sf
7.692 .769(Current working directory)J
f3_12 sf
3.782 .378(: short cut for both user and)J
126 372 :M
3.843 .384(system.  Each address space stores file index for current)J
126 390 :M
3.942 .394(directory.  Allows user to specify relative filename, instead of)J
126 408 :M
3.664 .366(absolute path \(if no "/"\).)J
126 444 :M
3.25 .325(Thus, to read first byte of file, just last 4 steps above.)J
126 498 :M
3.161 .316(How can this possibly be efficient?  Caching!)J
endp
%%Trailer
end		% md
%%EOF
