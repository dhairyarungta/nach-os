%!PS-Adobe-3.0
%%Title: (l4)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:25 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 4
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 120 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 4)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
8.457 .846(Lecture 4: Independent vs. cooperating threads)J
60 88 :M
6.755 .676(4.0 Main points)J
96 106 :M
f3_12 sf
4.299 .43(Why do we need to handle cooperating threads?)J
96 124 :M
6.264 .626(Atomic operations)J
60 157 :M
f1_14 sf
9.655 .965(4.1 Definitions)J
96 175 :M
f1_12 sf
11.303 1.13(Independent threads)J
f3_12 sf
(:)S
96 193 :M
3.034 .303(     No state shared with other threads)J
96 211 :M
3.587 .359(     Deterministic -- input state determines result)J
96 229 :M
2.186 .219(     Reproducible)J
96 247 :M
3.217 .322(     Scheduling order doesn't matter)J
96 301 :M
.691 .069(  )J
f1_12 sf
9.582 .958(Cooperating threads:)J
96 319 :M
f3_12 sf
2.279 .228(     Shared state)J
96 337 :M
2.93 .293(     Non-deterministic)J
96 355 :M
2.855 .285(     Non-reproducible)J
96 391 :M
5.556 .556(Non-reproducibility and non-determinism means that bugs can)J
96 409 :M
4.414 .441(be intermittent.  This makes debugging really hard!)J
60 460 :M
f1_14 sf
7.982 .798(4.2 Why allow cooperating threads?)J
96 493 :M
f3_12 sf
4.525 .452(People cooperate; and computers model people's behavior, so)J
96 511 :M
4.258 .426(computers at some level have to cooperate!)J
96 547 :M
2.796 .28(1. )J
f1_12 sf
12.31 1.231(Share resources/information)J
132 565 :M
f3_12 sf
4.36 .436(a. one computer, many users)J
132 583 :M
4.121 .412(b. one bank balance, many tellers)J
132 601 :M
4.278 .428(c. embedded systems \(ex: robot control\))J
96 637 :M
2.327 .233(2. )J
f1_12 sf
1.849(Speedup)A
96 655 :M
f3_12 sf
3.038 .304(    a. overlap I/O and computation)J
96 673 :M
2.209 .221(       UNIX file system does read ahead)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.387 .339(    b. multiprocessors -- chop up program into smaller pieces)J
126 120 :M
2.247 .225(3. )J
f1_12 sf
1.586(Modularity)A
126 138 :M
f3_12 sf
3.087 .309(    chop large problem up into simpler pieces)J
126 174 :M
2.517 .252(    For example, to do typesetting: ref | grn | tbl | eqn | troff)J
126 192 :M
3.172 .317(    This makes the system easier to extend; you can write eqn)J
126 210 :M
5.278 .528(without changing troff)J
90 246 :M
f1_14 sf
8.62 .862(4.3 Some simple concurrent programs)J
126 282 :M
f3_12 sf
3.818 .382(Most of the time, threads are working on separate data, so)J
126 300 :M
5.55 .555(scheduling order doesn't matter:)J
162 334 :M
f4_12 sf
-.227(Thread A)A
378 334 :M
-.227(Thread B)A
162 352 :M
-.248(x = 1)A
378 352 :M
-.248(y = 2)A
126 387 :M
f3_12 sf
5.444 .544(What about:)J
162 406 :M
f4_12 sf
-.264(    )A
198 406 :M
-.209(  initially, y = 12)A
162 442 :M
-.223(x = y + 1)A
378 442 :M
-.223(y = y * 2)A
126 477 :M
f3_12 sf
3.614 .361(What are the possible values for x after the above?  What are)J
126 495 :M
3.773 .377(the posssible values of x below?)J
162 547 :M
f4_12 sf
-.248(x = 1)A
378 547 :M
-.248(x = 2)A
126 579 :M
f3_12 sf
4.565 .456(Can't say anything useful about a concurrent program without)J
126 597 :M
5.028 .503(knowing what are the underlying indivisible operations!)J
90 633 :M
f1_14 sf
9.147 .915(4.4 Atomic operations)J
126 669 :M
f1_12 sf
7.821 .782(Atomic operation:)J
f3_12 sf
4.411 .441( operation always runs to completion, or)J
126 687 :M
3.703 .37(not at all. Indivisible, can't be stopped in the middle.)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.603 .46(On most machines, memory reference and assignment \(load)J
126 120 :M
3.123 .312(and store\) of )J
f1_12 sf
1.353(words)A
f3_12 sf
4.002 .4(, are atomic.)J
126 156 :M
4.217 .422(Many instructions are )J
f1_12 sf
1.132(not)A
f3_12 sf
3.478 .348( atomic.  For example, on most 32-bit)J
126 174 :M
4.366 .437(architectures, double precision floating point store is not)J
126 192 :M
4.684 .468(atomic; it involves two separate memory operations.)J
90 228 :M
f1_14 sf
6.987 .699(4.5 A Larger Concurrent Program Example)J
126 264 :M
f3_12 sf
3.332 .333(Two threads, A and B, compete with each other; one tries to)J
126 282 :M
4.545 .455(increment a shared counter, the other tries to decrement the)J
126 300 :M
1.09(counter.)A
126 336 :M
4.335 .433(For this example, assume that memory load and memory store)J
126 354 :M
4.436 .444(are atomic, but incrementing and decrementing are )J
f1_12 sf
1.196(not)A
f3_12 sf
4.896 .49( atomic.)J
162 388 :M
f4_12 sf
-.227(Thread A)A
378 388 :M
-.227(Thread B)A
144 406 :M
-.248(i = 0)A
144 424 :M
-.213(while \(i < 10\))A
144 442 :M
-.216(  i = i + 1;)A
144 460 :M
-.216(print A wins)A
355 406 :M
-.248(i = 0)A
355 424 :M
-.212(while \(i > -10\))A
355 442 :M
-.216(  i = i - 1;)A
355 460 :M
-.216(print B wins)A
126 507 :M
f3_12 sf
.69(Questions:)A
126 525 :M
2.889 .289(1. Who wins?  Could be either.)J
126 561 :M
3.783 .378(2. Is it guaranteed that someone wins?  Why not?)J
126 597 :M
3.537 .354(3. What if both threads have their own CPU, running in parallel)J
126 615 :M
3.49 .349(at exactly the same speed.  Is it guaranteed that it goes on)J
126 633 :M
1.366(forever?)A
126 669 :M
3.646 .365(In fact, if they start at the same time, with A 1/2 an instruction)J
126 687 :M
3.684 .368(ahead, )J
f1_12 sf
1.69 .169(B )J
f3_12 sf
4.181 .418(will win quickly.)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 4)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 123 :M
f3_12 sf
3.774 .377(4. Could this happen on a uniprocessor?)J
126 159 :M
2.823 .282(Yes!  Unlikely, but if you depend on it )J
f1_12 sf
2.733 .273(not )J
f3_12 sf
4.434 .443(happening, it will)J
126 177 :M
3.879 .388(happen, and your system will break and it will be very difficult)J
126 195 :M
3.732 .373(to figure out why.)J
endp
%%Trailer
end		% md
%%EOF
