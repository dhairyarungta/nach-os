%!PS-Adobe-3.0
%%Title: (l7)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:29 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 5
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 120 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 5)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.644 .764(Lecture 7: Semaphores and Bounded Buffer)J
60 88 :M
6.305 .63(7.0 Main Points:)J
96 106 :M
f3_12 sf
4.986 .499(Definition of semaphores)J
96 124 :M
4.018 .402(Example of use of semaphores)J
60 157 :M
f1_14 sf
9.708 .971(7.1 Motivation)J
96 175 :M
f3_12 sf
4.391 .439(Writing concurrent programs is hard because you need to)J
96 193 :M
4.947 .495(worry about multiple concurrent activities writing the same)J
96 211 :M
5.53 .553(memory; hard because ordering matters.)J
96 247 :M
4.453 .445(Synchronization is a way of coordinating multiple concurrent)J
96 265 :M
3.901 .39(activities that are using shared sate.  What are the right)J
96 283 :M
4.332 .433(synchronization abstractions, to make it easy to build correct)J
96 301 :M
7.907 .791(concurrent programs?)J
96 337 :M
3.714 .371(In this lecture and the next, present a couple ways of)J
96 355 :M
3.735 .374(structuring the sharing.  Rules will seem a bit strange -- why)J
96 373 :M
3.788 .379(one definition, and not another?  I have no good explanation)J
96 391 :M
3.782 .378(for that, except that I believe that if you use these definitions,)J
96 409 :M
3.217 .322(you will find writing correct code easier.  For now, just take it)J
96 427 :M
2.455 .246(as a given.  Use it for a while.  Then if you can come up with a)J
96 445 :M
4.132 .413(better way of doing synchronization, be my guest!)J
60 481 :M
f1_14 sf
7.957 .796(7.1 Definition of Semaphores)J
96 514 :M
f3_12 sf
3.93 .393(Semaphores are a kind of generalized lock, first defined by)J
96 532 :M
3.666 .367(Dijkstra in the late 60's.  Semaphores are the main)J
96 550 :M
4.349 .435(synchronization primitive used in UNIX.)J
96 586 :M
4.547 .455(Semaphores have a positive integer value, and support the)J
96 604 :M
4.828 .483(following two operations:)J
105 640 :M
4.089 .409(semaphore->P\(\):  an atomic operation that waits for)J
114 658 :M
4.355 .436(semaphore to become positive, then decrements it by 1)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
135 84 :M
f3_12 sf
4.655 .466(semaphore->V\(\):  an atomic operation that increments)J
144 102 :M
3.408 .341(semaphore by 1, waking up a waiting P, if any)J
126 153 :M
4.674 .467(Semaphores are like integers, except:)J
135 189 :M
3.798 .38(1. No negative values)J
135 207 :M
3.346 .335(2. Only operations are P and V -- can't read or write value,)J
144 225 :M
3.609 .361(except to set it initially)J
135 243 :M
3.736 .374(3. Operations must be atomic -- two P's that occur together)J
144 261 :M
4.176 .418(can't decrement the value below zero.  Similarly, thread)J
144 279 :M
3.062 .306(going to sleep in  P won't miss wakeup from V, even if they)J
144 297 :M
4.256 .426(both happen at about the same time.)J
126 333 :M
f1_12 sf
1.256(Binary)A
f3_12 sf
3.866 .387( semaphore: instead of an integer value, has a boolean)J
126 351 :M
2.734 .273(value.  P waits until value is 1, then sets it to 0.  V sets value to)J
126 369 :M
2.943 .294(1, waking up a waiting P if any.)J
90 405 :M
f1_14 sf
6.981 .698(7.2 Two uses of semaphores)J
90 441 :M
f1_12 sf
8.693 .869(7.2.1 Mutual exclusion)J
126 477 :M
f3_12 sf
4.455 .446(When semaphores are used for mutual exclusion, the)J
126 495 :M
3.452 .345(semaphore has an initial value of 1, and P\(\) is called before the)J
126 513 :M
3.437 .344(critical section, and V\(\) is called after the critical section.)J
162 550 :M
f4_12 sf
-.212(semaphore->P\(\);)A
162 568 :M
-.205(// critical section goes here)A
162 586 :M
-.212(semaphore->V\(\);)A
90 621 :M
f1_12 sf
8.094 .809( 7.2.1 Scheduling constraints)J
126 654 :M
f3_12 sf
4.371 .437(Semaphores can also be used to express generalized sheduling)J
126 672 :M
4.138 .414(constraints -- in other words, semaphores provide a way for a)J
126 690 :M
3.404 .34(thread to wait for something.  Usually, in this case, the initial)J
126 708 :M
3.658 .366(value of the semaphore is 0, but not always!)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.096 .41(For example, you can implement Thread::Join using)J
126 120 :M
1.181(semaphores:)A
162 157 :M
f4_12 sf
-.205(Initial value of semaphore = 0)A
162 193 :M
-.209(Thread::Join calls P)A
162 211 :M
-.208(Thread finish calls V)A
90 246 :M
f1_14 sf
8.706 .871(7.3 Producer-consumer with a bounded buffer)J
90 282 :M
f1_12 sf
9.294 .929(7.3.1 Problem definition)J
126 300 :M
f3_12 sf
4.52 .452(Producer puts things into a shared buffer, consumer takes)J
126 318 :M
4.653 .465(them out. Need synchronization for coordinating producer and)J
126 336 :M
1.129(consumer.)A
126 372 :M
2.667 .267(Example: cpp | cc1 | cc2 | as  \(cpp produces bytes for cc1, which)J
126 390 :M
3.695 .37(consumes them, and in turn produces bytes for cc2 ...\))J
126 426 :M
4.024 .402(Don't want producer and consumer to have to operate in)J
126 444 :M
3.768 .377(lockstep, so put a fixed-size )J
f1_12 sf
1.176(buffer)A
f3_12 sf
4.026 .403( between them; need to)J
126 462 :M
3.664 .366(synchronize access to this buffer.  Producer needs to wait if)J
126 480 :M
3.613 .361(buffer is full; consumer needs to wait if buffer is empty.)J
126 534 :M
4.064 .406(Another example: Coke machine.  Producer is delivery person;)J
126 552 :M
5.162 .516(consumers are students and faculty.)J
126 606 :M
4.462 .446(Solution uses semaphores for both mutex and scheduling.)J
90 639 :M
f1_12 sf
8.124 .812(7.3.2 Correctness constraints for solution)J
126 675 :M
f3_12 sf
3.485 .349(1\) Consumer must wait for producer to fill buffers, if none full)J
144 693 :M
6.911 .691(\(scheduling constraint\))J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.723 .372(2\) Producer must wait for consumer to empty buffers, if all full)J
144 102 :M
6.911 .691(\(scheduling constraint\))J
126 138 :M
3.908 .391(3\) Only one thread can manipulate buffer queue at a time)J
144 156 :M
6.237 .624(\(mutual exclusion\))J
126 189 :M
4.604 .46(Use a separate semaphore for each constraint; note semaphores)J
126 207 :M
4.236 .424(being used in multiple ways.)J
162 244 :M
f4_12 sf
-.203(Semaphore fullBuffers; // consumer's constraint)A
306 262 :M
-.206(// if 0, no coke in machine)A
162 280 :M
-.203(Semaphore emptyBuffers;// producer's constraint)A
270 298 :M
-.204(// if 0, nowhere to put more coke)A
162 316 :M
-.211(Semaphore mutex;)A
306 316 :M
-.209(// mutual exclusion)A
90 348 :M
f1_12 sf
9.337 .934(7.3.3 Semaphore solution)J
162 382 :M
f4_12 sf
-.202(Semaphore fullBuffers = 0 // initially, no coke!)A
162 400 :M
-.204(Semaphore emptyBuffers = numBuffers;)A
270 418 :M
-.204(// initially, number of empty slots)A
270 436 :M
-.204(// semaphore used to count how many)A
270 454 :M
-.207(// resources there are!)A
162 472 :M
-.202(Semaphore mutex = 1; // no one using the machine)A
162 508 :M
-.216(Producer\(\) {)A
162 526 :M
-.209(  emptyBuffers.P\(\);)A
306 526 :M
-.207(// check if there's space)A
306 544 :M
-.211(// for more coke)A
162 562 :M
-.216(  mutex.P\(\);)A
306 562 :M
-.207(// make sure no one else)A
306 580 :M
-.209(// is using machine)A
162 598 :M
-.207(  put 1 coke in machine)A
162 616 :M
-.216(  mutex.V\(\);)A
306 616 :M
-.205(// ok for others to use machine)A
162 634 :M
-.21(  fullBuffers.V\(\);)A
306 634 :M
-.205(// tell consumers there's now a)A
162 652 :M
-.297(  })A
306 652 :M
-.208(// coke in the machine)A
162 688 :M
-.216(Consumer\(\) {)A
162 706 :M
-.21(  fullBuffers.P\(\);)A
306 706 :M
-.205(// check if there's a coke in)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
306 82 :M
f4_12 sf
-.213(// the machine)A
162 100 :M
-.216(  mutex.P\(\);)A
306 100 :M
-.207(// make sure no one else)A
306 118 :M
-.209(// is using machine)A
162 136 :M
-.21(  take 1 coke out;)A
162 154 :M
-.216(  mutex.V\(\);)A
306 154 :M
-.208(// next person's turn)A
162 172 :M
-.202(  emptyBuffers.V\(\);    // tell producer we need more)A
90 204 :M
f1_12 sf
9.825 .982(7.3.4 Questions)J
126 240 :M
f3_12 sf
3.955 .395(Why does producer P + V different semaphores than the)J
126 258 :M
1.313(consumer?)A
126 294 :M
4.306 .431(Is order of P's important?)J
126 330 :M
4.281 .428(Is order of V's important?)J
126 366 :M
3.195 .32(What if we have 2 producers or 2 consumers?  Do we need to)J
126 384 :M
6.947 .695(change anything?)J
endp
%%Trailer
end		% md
%%EOF
