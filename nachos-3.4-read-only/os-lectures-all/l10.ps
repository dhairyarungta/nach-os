%!PS-Adobe-3.0
%%Title: (l10)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:16 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 5
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 141 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 5)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.322 .732(Lecture 10: Deadlock)J
60 109 :M
7.072 .707(10.0 Main Points:)J
96 127 :M
f3_12 sf
4.128 .413(Definition of deadlock)J
96 145 :M
3.962 .396(Conditions for its occurence)J
96 163 :M
4.517 .452(Solutions for breaking and avoiding deadlock)J
96 199 :M
4.069 .407(Solutions pose a dilemma:)J
96 217 :M
2.565 .256(      Simple solutions -- inefficient)J
96 235 :M
3.044 .304(      Complex solutions -- inefficient and unpleasant)J
60 271 :M
f1_14 sf
10.625 1.063(10.1 Definitions)J
60 307 :M
f1_12 sf
10.654 1.065(10.1.1 Resources)J
96 325 :M
f3_12 sf
3.025 .302(   Threads -- active)J
96 343 :M
.649 .065(   )J
f1_12 sf
6.54 .654(Resources )J
f3_12 sf
3.907 .391(-- passive, things needed by thread to do its job)J
96 361 :M
1.992 .199(      \(CPU, disk space, memory\))J
96 397 :M
2.651 .265(   Two kinds of resources:)J
96 415 :M
.62 .062(      )J
f1_12 sf
7.057 .706(Preemptable )J
f3_12 sf
3.777 .378(-- can take it away \(CPU\))J
96 433 :M
.732 .073(      )J
f1_12 sf
1.61(Non-preemptable)A
f3_12 sf
4.401 .44( -- must leave with thread)J
132 451 :M
3.265 .326( \(disk space -- what would you think if I took space for)J
132 469 :M
5.357 .536(your files?\))J
96 505 :M
3.822 .382(Mutual exclusion -- a kind of resource)J
60 541 :M
f1_12 sf
8.118 .812(10.1.2 Starvation vs. Deadlock)J
96 559 :M
1.258(Starvation)A
f3_12 sf
4.644 .464( -- thread waits indefinitely \(for example, because)J
96 577 :M
4.829 .483(some other threads are using resource\))J
96 613 :M
f1_12 sf
1.315(Deadlock)A
f3_12 sf
4.089 .409( -- circular waiting for resources)J
96 649 :M
4.225 .423(Deadlock implies starvation, but not vice versa)J
96 685 :M
4.675 .468(For example:)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
162 103 :M
f4_12 sf
-.227(Thread A)A
378 103 :M
-.227(Thread B)A
162 121 :M
-.238(x.P\(\);)A
162 139 :M
-.238(y.P\(\);)A
378 121 :M
-.238(y.P\(\);)A
378 139 :M
-.238(x.P\(\);)A
126 174 :M
f3_12 sf
3.798 .38(Deadlock won't always happen with this code, but it might.)J
90 228 :M
f1_14 sf
7.574 .757(10.2 Conditions for deadlock)J
90 264 :M
f1_12 sf
10.98 1.098(10.2.1 Motivation)J
126 282 :M
f3_12 sf
3.907 .391(Deadlock can happen with any kind of resource.)J
126 300 :M
3.973 .397(Deadlocks can occur with multiple resources. Means you can't)J
126 318 :M
4.164 .416(decompose the problem -- can't solve deadlock for each)J
126 336 :M
7.942 .794(resource independently.)J
126 372 :M
4.675 .468(For example:)J
126 390 :M
3.752 .375(  one thread grabs the memory it needs)J
126 408 :M
2.57 .257(      another grabs disk space)J
126 426 :M
2.825 .282(      another grabs the tape drive)J
126 462 :M
3.044 .304(   dach waits for the other to release.)J
126 498 :M
4.092 .409(Deadlock can occur whenever there is waiting.)J
126 534 :M
4.905 .49(Example: dining lawyers)J
126 570 :M
3.515 .352(Each lawyer needs two chopsticks to eat.  Each grabs chopstick)J
126 588 :M
3.821 .382(on the right first.)J
126 624 :M
3.124 .312(What if all grab at the same time?  Deadlock.)J
90 660 :M
f1_12 sf
10.097 1.01(10.2.2 Conditions)J
126 678 :M
f3_12 sf
4.124 .412(Conditions for deadlock -- without )J
f1_12 sf
.873(all)A
f3_12 sf
3.253 .325( of these, can't have)J
126 696 :M
.912(deadlock:)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.044 .404(1. Limited access \(for example: mutex or bounded buffer\))J
126 120 :M
3.781 .378(2. No preemption \(if someone has resource, can't take it away\))J
126 156 :M
4.509 .451(3. Multiple independent requests -- "wait while holding")J
126 192 :M
3.764 .376(4. Circular chain of requests)J
126 228 :M
3.212 .321(Can draw graph to see if you have a circular chain:)J
126 231 287 201 rC
70 36 280.5 269.5 @f
70 36 284.5 412.5 @f
165.5 323.5 50 41 rS
353.5 318.5 50 41 rS
251 274 :M
(Thread A)S
254 418 :M
(Thread B)S
373 343 :M
(X)S
182 347 :M
(Y)S
13 -59 -11 199 318 @k
-1 -1 205 316 1 1 251 281 @b
13 185 233 250 399 @k
199 371 -1 1 246 396 1 199 370 @a
13 119 167 364 361 @k
-1 -1 316 399 1 1 359 364 @b
13 13 61 319 276 @k
324 280 -1 1 370 314 1 324 279 @a
159 289 :M
(waiting for)S
176 404 :M
(owned by)S
347 290 :M
(owned by)S
334 398 :M
(waiting for)S
gR
gS 30 31 552 730 rC
126 447 :M
f3_12 sf
1.354 .135( )J
f1_12 sf
1.396 .14(   )J
198 447 :M
7.722 .772(Example of deadlock)J
90 501 :M
f1_14 sf
7.343 .734(10.3 Solutions to Deadlock)J
90 537 :M
f1_12 sf
7.155 .715(10.3.1 Detect deadlock and fix)J
162 574 :M
f4_12 sf
-.22(scan graph)A
162 592 :M
-.215(detect cycles)A
162 610 :M
-.227(fix them)A
270 610 :M
-.207(// this is the hard part!)A
126 645 :M
f3_12 sf
3.437 .344(a\) Shoot thread, force it to give up resources.)J
126 663 :M
3.719 .372(This isn't always possible -- for instance, with a mutex, can't)J
126 681 :M
3.871 .387(shoot a thread and leave world in a consistent state.)J
126 717 :M
3.95 .395( b\) Roll back actions of deadlocked threads \(transactions\))J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
5.144 .514(Common technique in databases)J
90 174 :M
f1_12 sf
10.004 1(10.3.2 Preventing deadlock)J
126 210 :M
f3_12 sf
3.018 .302(Need to get rid of one of the four conditions.)J
126 246 :M
5.43 .543(a\) Infinite resources)J
126 282 :M
4.2 .42( b\) No sharing -- totally independent threads.)J
126 318 :M
3.57 .357( c\) Don't allow waiting -- how phone company avoids deadlock)J
126 354 :M
5.875 .587(d\) Preempt resources)J
162 372 :M
4.047 .405(Can preempt main memory by copying to disk)J
126 408 :M
4.501 .45(e\) Make all threads request everything they'll need at)J
126 426 :M
1.104(beginning)A
126 462 :M
3.617 .362(If you need 2 chopsticks, grab both at same time.)J
126 498 :M
4.46 .446(Problem is -- predicting future is hard, tend to over-estimate)J
126 516 :M
5.817 .582(resource needs \(inefficient\))J
126 552 :M
.635 .063( )J
f1_12 sf
8.288 .829(Banker's algorithm)J
f3_12 sf
4.443 .444(: more efficient than reserving all)J
126 570 :M
5.82 .582(resources on startup)J
126 606 :M
4.45 .445(1. State maximum resource needs in advance)J
126 624 :M
4.424 .442(2. Allocate resources dynamically when resource is needed --)J
144 642 :M
4.392 .439(wait if granting request would leads to deadlock \(request)J
144 660 :M
4.024 .402(can be granted if some sequential ordering of threads is)J
144 678 :M
6.112 .611(deadlock free\))J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 5)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.46 .446(Bankers algorithm allows the sum of maximum resource needs)J
126 102 :M
3.968 .397(of all current threads to be greater than the total resources, as)J
126 120 :M
3.53 .353(long as there is some way for all the threads to finish without)J
126 138 :M
4.784 .478(getting into deadlock.)J
126 174 :M
3.395 .34(For example, you can allow a thread to proceed if the total)J
126 192 :M
3.89 .389(available resources - # allocated >= max remaining that might)J
126 210 :M
4.527 .453(be needed by this thread.)J
126 246 :M
4.337 .434(Example of Banker's algorithm with dining lawyers: chopsticks)J
126 264 :M
3.619 .362(in middle of table.)J
126 300 :M
2.652 .265(    Rule: grab a fork unless it's the last one, and no one would)J
126 318 :M
4.583 .458(have 2.)J
126 354 :M
5.394 .539(What if 3-handed lawyers?)J
126 390 :M
2.276 .228(    Rule: grab a fork unless)J
162 408 :M
3.235 .323(it's the last one, and no one would have 3)J
162 426 :M
3.217 .322(it's the next to the last, and no one would have 2)J
126 480 :M
4.143 .414(f\) Make everyone use the same ordering in accessing resources.)J
126 498 :M
3.239 .324(     For example, all threads must grab semaphores in the same)J
126 516 :M
1.621(order)A
162 534 :M
2.297 .23(\(x.P; y.P\))J
126 588 :M
3.873 .387( Typically, a combination of techniques!)J
endp
%%Trailer
end		% md
%%EOF
