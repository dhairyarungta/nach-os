%!PS-Adobe-3.0
%%Title: (l16)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (10:34 PM Tuesday, March 14, 1995)
%%For: ()
%%Pages: 6
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 139 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
()setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(; page: 1 of 6)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.542 .754(Lecture 16: Survey of I/O systems)J
60 73 :M
7.292 .729(16.0 Main Points)J
96 91 :M
f3_12 sf
5.723 .572(Overhead, latency, bandwidth definitions)J
96 109 :M
4.588 .459(How terminals and disks work \(networks later\).)J
60 163 :M
f1_14 sf
10.625 1.063(16.1 Definitions)J
96 199 :M
f1_12 sf
1.266(Overhead)A
f3_12 sf
3.828 .383(: CPU time to initiate operation \(can't be overlapped\))J
96 217 :M
f1_12 sf
1.37(Latency)A
f3_12 sf
3.884 .388(: time to initiate 1 byte operation)J
96 235 :M
f1_12 sf
1.435(Bandwidth)A
f3_12 sf
3.922 .392(: rate of I/O transfer, once initiated)J
96 271 :M
4.254 .425(General rule of thumb: abstraction of byte transfers, but batch)J
96 289 :M
4.269 .427(into block I/O for efficiency -- pro-rates overhead, latency over)J
96 307 :M
5.609 .561(larger unit.)J
60 343 :M
f1_14 sf
7.766 .777(16.2 Terminal: keyboard and display)J
96 379 :M
f3_12 sf
4.084 .408(Terminal connects to computer via serial line; same concept)J
96 397 :M
4.603 .46(applies to modem connections -- type characters, get characters)J
96 415 :M
4.22 .422(back to display.)J
96 451 :M
3.561 .356(For example, RS-232 is bit serial: start bit, character code, stop)J
96 469 :M
4.292 .429(bit.  Typical bandwidth: 9600 baud \(transmission rate in)J
96 487 :M
5.23 .523(bits/sec\) = 900 bytes/sec.)J
96 523 :M
5.116 .512(Even though keyboards/displays reflect a relatively small rate)J
96 541 :M
3.533 .353(of transfer, can still swamp CPU due to overhead of handling)J
96 559 :M
5.331 .533(each byte.)J
96 595 :M
4.839 .484(What if interrupt per byte?)J
96 631 :M
3.243 .324(    10 users \(vi/emacs\) \(or 10 people using a modem\))J
96 649 :M
3.797 .38(    900 interrupts/sec per user)J
96 667 :M
3.269 .327(    overhead of handling interrupt = 100 usec)J
96 685 :M
3.729 .373( implies:)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(; page: 2 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.797 .38(    devote whole computer to simply handling interrupts!)J
126 138 :M
5.761 .576(Alternative: )J
f1_12 sf
6.148 .615(Direct memory access)J
f3_12 sf
3.622 .362( \(DMA\).  Instead of)J
126 156 :M
4.543 .454(interrupt on every byte, block transfer, interrupt CPU when)J
126 174 :M
3.716 .372(block is done.  Allows much higher transfer rates.)J
126 210 :M
4.257 .426(Another alternative: bitmap display.  Can't type very fast, but)J
126 228 :M
3.622 .362(need lots of display bandwidth.  CPU writes to video memory)J
126 246 :M
4.637 .464(what should be displayed, display reads video memory,)J
126 264 :M
5.709 .571(illuminating pixels.)J
126 300 :M
3.988 .399(Can't see quantization on displays all that easily \(except take)J
126 318 :M
3.55 .355(184!\), but can see this on calculators!)J
126 354 :M
4.072 .407(Raster displays are how TV sets, laser printers, and monitors)J
126 372 :M
1.234(work.)A
90 408 :M
f1_14 sf
7.547 .755(16.3 Disk Organization)J
126 411 301 208 rC
181 180 288 527.5 @f
146 156 288.5 527.5 @f
122 124 288.5 526.5 @f
252 431 :M
f3_12 sf
(surface)S
390 470 :M
(track)S
383 601 :M
(sector)S
13 -32 16 345 472 @k
-1 -1 352 473 1 1 387 466 @b
13 -6 42 354 572 @k
360 575 -1 1 398 586 1 360 574 @a
286 522 -1 1 381 521 1 286 521 @a
285 523 -1 1 339 602 1 285 522 @a
gR
gS 30 31 552 730 rC
126 652 :M
f3_12 sf
3.471 .347(Disk )J
f1_12 sf
1.081(surface)A
f3_12 sf
4.191 .419(: circular disk, coated with magnetic material)J
126 688 :M
f1_12 sf
1.22(Tracks)A
f3_12 sf
4.031 .403(:concentric rings around disk surface, bits laid out)J
126 706 :M
4.425 .442(serially along each track)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(; page: 3 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.605 .36(Like a record, disk is always spinning.)J
126 138 :M
2.96 .296(Each track is split up into )J
f1_12 sf
1.048(sectors)A
f3_12 sf
3.67 .367(: arc of track, also minimum)J
126 156 :M
5.001 .5(unit of transfer)J
126 192 :M
3.554 .355(CD's come individually, but magnetic disks come organized in a)J
126 210 :M
f1_12 sf
6.23 .623(disk pack)J
f3_12 sf
2.954 .295(, by ganging a set of )J
f1_12 sf
1.187(platters)A
f3_12 sf
3.71 .371( together in a stack)J
126 228 :M
4.199 .42(\(each platter is 2 surfaces\))J
126 231 217 183 rC
127 23 278 401 @f
127 23 278 384 @f
127 23 278 369 @f
127 23 277 353 @f
127 23 277 334 @f
127 23 277 319 @f
127 23 275 299 @f
127 23 275 279 @f
-1 -1 171 396 1 1 170 283 @b
170 295 -1 1 239 294 1 170 294 @a
170 313 -1 1 239 312 1 170 312 @a
169 331 -1 1 238 330 1 169 330 @a
172 350 -1 1 241 349 1 172 349 @a
171 368 -1 1 240 367 1 171 367 @a
170 383 -1 1 239 382 1 170 382 @a
170 397 -1 1 239 396 1 170 396 @a
gR
gS 30 31 552 730 rC
126 447 :M
f3_12 sf
3.661 .366(Disk is read via a comb -- 2 read/write "head assembly" at end)J
126 465 :M
3.699 .37(of each arm \(typically, only put disk heads to read inside)J
126 483 :M
4.581 .458(surfaces, external surfaces are too exposed\).)J
126 519 :M
f1_12 sf
1.177(Cylinder)A
f3_12 sf
4.291 .429(: corresponding track on each surace)J
126 555 :M
3.422 .342(Disk operation is in terms of radial coordinates, not x,y,z: move)J
126 573 :M
3.796 .38(arm to correct track, wait for disk to rotate under head, select)J
126 591 :M
3.825 .383(head, then transfer as it's going by.)J
90 627 :M
f1_14 sf
8.67 .867(16.4 Disk Performance)J
126 645 :M
f3_12 sf
3.345 .335(To read or write disk block:)J
126 681 :M
2.033 .203(1. )J
f1_12 sf
1.211(seek)A
f3_12 sf
4.53 .453(: position heads over cylinder)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(; page: 4 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.539 .354(Time for seek depends on how fast you can move the arm.)J
126 102 :M
3.41 .341(Typically, 10 msec to move all the way across disk)J
126 138 :M
2.292 .229(2. )J
f1_12 sf
7.736 .774(rotational delay)J
f3_12 sf
4.474 .447(: wait for sector to rotate underneath head:)J
126 156 :M
3.664 .366(typically,120 cycles per second => 8 msec per rotation)J
126 192 :M
4.055 .406(3. select head)J
126 228 :M
1.71 .171(4. )J
f1_12 sf
.957(transfer)A
f3_12 sf
4.11 .411( bytes \(typically, 4MB/s, 1KB/sector => 0.25ms\))J
126 264 :M
3.097 .31(Thus, overall time to do disk I/O: seek + rotational delay +)J
126 282 :M
1.454(transfer)A
126 318 :M
4.298 .43(Seek and rotational delay are latency, transfer rate is)J
126 336 :M
1.297(bandwidth.)A
126 372 :M
3.632 .363(If random place on disk, then seek \(5 ms average\) + rotational)J
126 390 :M
3.478 .348(delay \(4 ms average\) + transfer \(0.25 ms\).  Thus, roughly 10)J
126 408 :M
4.077 .408(msec to fetch/put data, mostly seek and rotational delay.  In)J
126 426 :M
4.181 .418(other words, 100 KB/s)J
126 462 :M
3.905 .39(If random place in same cylinder, then no seek needed, just)J
126 480 :M
3.902 .39(rotational delay \(4 ms average\) + transfer \(0.25 ms\), or roughly)J
126 498 :M
3.075 .308(5 ms. to fetch/put 1KB of data.  In other words, 200 KB/s.)J
126 534 :M
3.619 .362(If next sector on same track, then no rotational delay, so just)J
126 552 :M
4.205 .421(transfer time -- 4 MB/s.)J
126 588 :M
4.047 .405(Key to using disk effectively \(and therefore to everything in)J
126 606 :M
3.922 .392(file systems!\) is to minimize seek and rotational delay.)J
90 642 :M
f1_14 sf
7.048 .705(16.5 Disk Tradeoffs)J
126 678 :M
f3_12 sf
3.19 .319(How do we choose disk sector size?)J
126 714 :M
4.096 .41(Need to synch head with rotation speed -- synch bits together)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(; page: 5 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.01 .401(Put 100-1000 bits in between each sector, to allow system to)J
126 120 :M
3.865 .387(measure how fast disk is spinning \(also allows tolerance to)J
126 138 :M
4.28 .428(small changes in track length\))J
126 174 :M
3.639 .364(What if sector was 1 byte?)J
126 210 :M
2.87 .287(  Space efficiency -- only 1% of disk has useful space)J
126 228 :M
3.608 .361(  Time efficiency -- each seek takes 10 ms, means transfer)J
126 246 :M
3.006 .301(    at a rate of 50-100 char/sec)J
126 282 :M
3.619 .362(What if sector was 1KBytes?)J
126 300 :M
2.848 .285(  Space efficiency: 90% of disk has useful space)J
126 318 :M
3.632 .363(  Time efficiency: transfer at 100KB/sec)J
126 372 :M
3.718 .372(What if sector was 1M bytes?)J
126 390 :M
3.042 .304(  Space efficiency: almost all of disk has useful space)J
126 408 :M
3.937 .394(  Time efficiency: transfer at disk bandwidth \(4MB/sec\) --)J
126 426 :M
3.041 .304(    seek, rotation no longer matter.)J
126 462 :M
3.094 .309(OK, so what's the downside of having big blocks?  Why don't)J
126 480 :M
3.436 .344(you always transfer data in huge chunks?  Well, if all you)J
126 498 :M
4.015 .402(need is 1 byte, really wasteful to store and/or transfer 1MB.)J
90 534 :M
f1_14 sf
7.432 .743(16.6 Disk Technology Trends)J
126 570 :M
f3_12 sf
4.288 .429(Typical disk today:)J
126 588 :M
4.387 .439(Disk capacity)J
342 588 :M
.878 .088(1.2 GB)J
126 606 :M
3.701 .37(# of surfaces per pack)J
342 606 :M
2.956(18)A
126 624 :M
3.893 .389(# of tracks per surface)J
342 624 :M
1.971(2048)A
126 642 :M
3.712 .371(# of sectors per track)J
342 642 :M
2.956(32)A
126 660 :M
3.708 .371(# of bytes per sector)J
342 660 :M
-.32(1KB)A
126 678 :M
3.959 .396(# of revolutions per min)J
342 678 :M
1.971(7200)A
126 714 :M
4.182 .418(Transfer rate: # of bytes rotating under head per second)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(; page: 6 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.163 .416(1KB bytes/sector * 32 sectors/cycle * 120 cycles/sec)J
162 102 :M
2.768 .277(= 4 MB/sec)J
126 138 :M
3.732 .373(1. Disks getting smaller, for similar capacity)J
126 156 :M
2.812 .281(      smaller => spin disk faster \(less rotational delay, higher)J
126 174 :M
1.492(bandwidth)A
126 192 :M
2.777 .278(      smaller => less distance for head to travel \(faster seeks\))J
126 210 :M
2.615 .261(      smaller => lighter weight \(for portables\))J
126 246 :M
4.24 .424(2. Disk data getting denser \(more bits/square inch, allows)J
126 264 :M
4.094 .409(smaller disks without sacrificing capacity\).  Tracks closer)J
126 282 :M
4.069 .407(together => faster seeks)J
126 318 :M
3.692 .369(3. Disks getting cheaper \(faster than RAM, over past few years\))J
126 354 :M
4.592 .459(Nevertheless, disk density \($ per byte\) improving much faster)J
126 372 :M
4.946 .495(than mechanical limitations \(seek, rotational delay\).)J
126 408 :M
3.634 .363(Key to improving density: get head close to surface)J
126 444 :M
4.202 .42(Heads are spring loaded, aerodynamically designed to fly as)J
126 462 :M
3.547 .355(close to surface as possible \(also, lightweight to allow for faster)J
126 480 :M
1.282(seeks\))A
126 534 :M
4.592 .459(What happens if head contacts surface?)J
126 552 :M
3.719 .372(  Head crash -- scrapes off magnetic information)J
126 588 :M
3.424 .342(Problem -- space gets so small, no room for air molecules.)J
126 606 :M
3.899 .39(Instead, fill with special inert gas!)J
endp
%%Trailer
end		% md
%%EOF
