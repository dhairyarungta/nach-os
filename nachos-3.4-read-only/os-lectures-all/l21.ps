%!PS-Adobe-3.0
%%Title: (l21)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (0:56 Monday, April 10, 1995)
%%For: (tom)
%%Pages: 12
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 153 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 12)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.785 .779(Lecture 21: Network Protocols)J
60 91 :M
6.895 .689(21.0 Main Point)J
96 109 :M
f1_12 sf
1.223(Protocol)A
f3_12 sf
4.193 .419(: agreement between two parties as to how)J
96 127 :M
4.762 .476(information is to be transmitted.)J
96 163 :M
4.304 .43(Example: system calls are the protocol between the operating)J
96 181 :M
5.807 .581(system and applications)J
96 217 :M
3.824 .382(Another example: Alphabet soup.  Will explain all these)J
96 235 :M
3.476 .348(acronyms as we go along.)J
96 238 314 239 rC
177 330 :M
-.826(RPC)A
154 388 :M
-.542(UDP)A
204 429 :M
(IP)S
250 385 :M
-.46(TCP)A
144 288 :M
-.46(NFS)A
297 290 :M
(e-mail)S
232 290 :M
(WWW)S
369 289 :M
(rlogin)S
172 391 -1 1 203 415 1 172 390 @a
-1 -1 215 417 1 1 258 388 @b
-1 -1 164 375 1 1 187 334 @b
194 335 -1 1 256 374 1 194 334 @a
154 291 -1 1 184 316 1 154 290 @a
-1 -1 263 371 1 1 383 294 @b
-1 -1 261 371 1 1 308 298 @b
248 297 -1 1 258 370 1 248 296 @a
-1 -1 196 317 1 1 245 295 @b
131 468 :M
(Ethernet)S
207 472 :M
(ATM)S
286 468 :M
(packet radio)S
-1 -1 161 455 1 1 205 432 @b
211 433 -1 1 224 459 1 211 432 @a
215 432 -1 1 309 455 1 215 431 @a
gR
gS 0 0 552 730 rC
96 511 :M
f1_12 sf
9.302 .93(Physical Reality:)J
96 529 :M
1.997(packets)A
312 511 :M
11.258 1.126(Abstraction: messages)J
1 G
-30 -31 1 1 rF
470 511 :M
-30 -31 :T
psb
/wp$gray 1 def

/wp$top 545 def

/wp$left 301 def

/wp$right 517 def

/wp$bottom 563 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
30 31 :T
0 G
-1 -1 56 496 1 1 55 495 @b
-1 -1 56 496 1 1 55 495 @b
56 496 -1 1 271 495 1 56 495 @a
-1 -1 272 496 1 1 271 495 @b
272 496 -1 1 487 495 1 272 495 @a
-1 -1 488 496 1 1 487 495 @b
-1 -1 488 496 1 1 487 495 @b
-1 -1 56 532 1 1 55 496 @b
-1 -1 272 532 1 1 271 496 @b
-1 -1 488 532 1 1 487 496 @b
96 548 :M
f3_12 sf
5.004 .5(limited size)J
312 548 :M
6.769 .677(arbitrary size)J
-1 -1 56 533 1 1 55 532 @b
56 533 -1 1 271 532 1 56 532 @a
-1 -1 272 533 1 1 271 532 @b
272 533 -1 1 487 532 1 272 532 @a
-1 -1 488 533 1 1 487 532 @b
-1 -1 56 551 1 1 55 533 @b
-1 -1 272 551 1 1 271 533 @b
-1 -1 488 551 1 1 487 533 @b
96 567 :M
8.133 .813(unordered \(sometimes\))J
312 567 :M
1.529(ordered)A
-1 -1 56 552 1 1 55 551 @b
56 552 -1 1 271 551 1 56 551 @a
-1 -1 272 552 1 1 271 551 @b
272 552 -1 1 487 551 1 272 551 @a
-1 -1 488 552 1 1 487 551 @b
-1 -1 56 570 1 1 55 552 @b
-1 -1 272 570 1 1 271 552 @b
-1 -1 488 570 1 1 487 552 @b
96 586 :M
1.206(unreliable)A
312 586 :M
1.128(reliable)A
-1 -1 56 571 1 1 55 570 @b
56 571 -1 1 271 570 1 56 570 @a
-1 -1 272 571 1 1 271 570 @b
272 571 -1 1 487 570 1 272 570 @a
-1 -1 488 571 1 1 487 570 @b
-1 -1 56 589 1 1 55 571 @b
-1 -1 272 589 1 1 271 571 @b
-1 -1 488 589 1 1 487 571 @b
96 605 :M
1.224(machine-to-machine)A
312 605 :M
1.115(process-to-process)A
-1 -1 56 590 1 1 55 589 @b
56 590 -1 1 271 589 1 56 589 @a
-1 -1 272 590 1 1 271 589 @b
272 590 -1 1 487 589 1 272 589 @a
-1 -1 488 590 1 1 487 589 @b
-1 -1 56 608 1 1 55 590 @b
-1 -1 272 608 1 1 271 590 @b
-1 -1 488 608 1 1 487 590 @b
96 624 :M
3.398 .34(only on local area net)J
312 624 :M
8.219 .822(routed anywhere)J
-1 -1 56 609 1 1 55 608 @b
56 609 -1 1 271 608 1 56 608 @a
-1 -1 272 609 1 1 271 608 @b
272 609 -1 1 487 608 1 272 608 @a
-1 -1 488 609 1 1 487 608 @b
-1 -1 56 627 1 1 55 609 @b
-1 -1 272 627 1 1 271 609 @b
-1 -1 488 627 1 1 487 609 @b
96 643 :M
1.207(asynchronous)A
312 643 :M
1.207(synchronous)A
-1 -1 56 628 1 1 55 627 @b
56 628 -1 1 271 627 1 56 627 @a
-1 -1 272 628 1 1 271 627 @b
272 628 -1 1 487 627 1 272 627 @a
-1 -1 488 628 1 1 487 627 @b
-1 -1 56 646 1 1 55 628 @b
-1 -1 272 646 1 1 271 628 @b
-1 -1 488 646 1 1 487 628 @b
96 662 :M
1.221(insecure)A
312 662 :M
1.339(secure)A
-1 -1 56 647 1 1 55 646 @b
56 647 -1 1 271 646 1 56 646 @a
-1 -1 272 647 1 1 271 646 @b
272 647 -1 1 487 646 1 272 646 @a
-1 -1 488 647 1 1 487 646 @b
-1 -1 56 665 1 1 55 647 @b
-1 -1 56 666 1 1 55 665 @b
-1 -1 56 666 1 1 55 665 @b
56 666 -1 1 271 665 1 56 665 @a
-1 -1 272 665 1 1 271 647 @b
-1 -1 272 666 1 1 271 665 @b
272 666 -1 1 487 665 1 272 665 @a
-1 -1 488 665 1 1 487 647 @b
-1 -1 488 666 1 1 487 665 @b
-1 -1 488 666 1 1 487 665 @b
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
1.065(Illustrates)A
f1_12 sf
5.866 .587( layering)J
f3_12 sf
4.493 .449( -- build services on simpler services)J
90 120 :M
f1_14 sf
9.46 .946(21.1 Arbitrary size messages)J
126 138 :M
f3_12 sf
3.78 .378(Arbitrary size messages on top of limited size ones)J
126 174 :M
3.438 .344(Send N little messages -- split up message into fixed size)J
126 192 :M
1.315(packets)A
126 228 :M
2.605 .261(abcdefgh -> 1 of 3/abc   2 of 3/def   3 of 3/gh)J
126 264 :M
3.888 .389(checksum can be computed on each fragment, or on whole)J
126 282 :M
1.303(message)A
90 318 :M
f1_14 sf
7.859 .786(21.2 IP -- Internet Protocol)J
126 354 :M
f3_12 sf
4.36 .436(Deliver messages unreliably from one machine in internet to)J
126 372 :M
1.233(another.)A
126 408 :M
3.912 .391( a. Routes packets from one machine through internet to)J
126 426 :M
1.482(another)A
126 462 :M
3.821 .382( b. Some intermediate links may have limited size.)J
126 480 :M
3.526 .353(      Fragments on demand, re-assembles at destination)J
126 516 :M
4.684 .468( c. Unreliable, unordered, machine->machine)J
90 552 :M
f1_14 sf
12.064 1.206(21.3 Process-process communication)J
126 570 :M
f3_12 sf
3.952 .395(User process communication on top of machine to machine)J
126 588 :M
1.071(communication)A
126 624 :M
3.858 .386(mailbox \(or "port"\) address -- include in each message, the)J
126 642 :M
3.511 .351(destination mailbox.   allows you to direct each message to)J
126 660 :M
6.014 .601(correct process)J
90 714 :M
f1_14 sf
5.884 .588(21.4  UDP -- Unreliable Data Protocol)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
5.341 .534(  unreliable, unordered, user-to-user comunication)J
126 138 :M
2.323 .232(  built on top of IP)J
90 174 :M
f1_14 sf
9.707 .971(21.5 Ordered messages)J
126 192 :M
f3_12 sf
4.31 .431(Ordered messages on top of unordered ones)J
126 228 :M
2.844 .284(  IP can re-order packets -- send A, B arrives: B, A)J
126 264 :M
3.537 .354(How do we fix this?  Assign sequence numbers to successive)J
126 282 :M
2.884 .288(packets -- 0, 1, 2, 3 ...  If arrive out of order, don't deliver #3 to)J
126 300 :M
4.22 .422(user application until get #2.)J
126 336 :M
3.985 .399(Sequence numbers specific to a connection -- for example, the)J
126 354 :M
4.596 .46(machine-machine \(or mailbox-mailbox\) pair.  This means put)J
126 372 :M
3.676 .368("source" as well as "destination" in each header.)J
90 408 :M
f1_14 sf
11.29 1.129(21.6 Performance considerations)J
126 444 :M
f3_12 sf
3.382 .338(Overhead -- CPU time to put packet on wire)J
126 462 :M
3.704 .37(Latency -- how long to send one byte packet)J
126 480 :M
5.072 .507(Throughput -- maximum bytes per second)J
90 516 :M
f1_12 sf
9.938 .994(21.6.1 Example)J
126 534 :M
f3_12 sf
3.425 .342(How long to send 4KB packet over various networks?  Typical)J
126 552 :M
3.641 .364(overhead to send a packet: 1 ms.)J
126 588 :M
5.162 .516(Ethernet \(10Mb/s\) within Soda:)J
126 606 :M
2.441 .244(    Latency: speed of light = 1 ns / foot, implies < 1 microsecond.)J
126 642 :M
3.346 .335(    Throughput delay: packet doesn't arrive until all its bits get)J
126 660 :M
3.063 .306(there!  So 4KB/10 Mb/s = 3 milliseconds \(roughly as long as a)J
126 678 :M
.916(disk!\))A
126 714 :M
3.769 .377(ATM \(155 Mb/s\) within Soda:)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
2.708 .271(   Latency same.)J
126 102 :M
3.424 .342(   Throughput delay: 4KB/ 155 Mb/s = 200 microseconds.)J
126 138 :M
6.292 .629(ATM cross-country?)J
126 156 :M
2.856 .286(    Latency: 3000 miles * 5000 ft/mile => 15 milliseconds.)J
126 174 :M
3.077 .308(    Throughput delay: same as above.)J
126 210 :M
3.755 .375(How many bits are in transit at the same time?)J
126 228 :M
1.976 .198(    15 ms / 155 Mb/s => 400 KB)J
126 282 :M
3.769 .377(Key to good performance: in local area, minimize overhead,)J
126 300 :M
4.161 .416(improve bandwidth.  In wide area, keep pipeline full.)J
90 354 :M
f1_14 sf
9.165 .916(21.7 Reliable message delivery)J
126 372 :M
f3_12 sf
4.382 .438(Reliable message delivery on top of unreliable delivery)J
126 408 :M
3.988 .399(All of these networks can garble, drop messages.)J
126 444 :M
3.707 .371(1. Physical media -- if transmit close to maximum rate, get)J
126 462 :M
4.2 .42(more throughput, even if some messages get lost)J
126 498 :M
3.277 .328(2. Congestion -- what if no place to put incoming message \(no)J
126 516 :M
6.43 .643(buffer space\)?)J
162 534 :M
4.749 .475(in point-to-point network, at each switch)J
162 552 :M
3.057 .306(  what if two hosts try to use same link?)J
162 570 :M
4.685 .469(in any network, at destination)J
162 588 :M
3.913 .391(  what if sender sends faster than receiver can process?)J
126 624 :M
3.103 .31(So what can we do?)J
126 660 :M
3.316 .332(  1. Detect garbling at receiver via checksum, discard if)J
126 678 :M
1.082(incorrect)A
126 714 :M
3.413 .341(  2. Receiver ack's if received properly)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(tom; page: 5 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.154 .315(  3. Timeout at sender.  If no ack, retransmit)J
126 156 :M
5.472 .547(Some questions:)J
126 192 :M
3.931 .393(If the sender doesn't get an ack, does that mean the receiver)J
126 210 :M
3.518 .352(didn't get the original message?  No. What if ack gets dropped?)J
126 228 :M
3.67 .367(Or if message gets delayed.)J
126 264 :M
4.195 .419(Sender doesn't get ack; retransmits.  Receiver gets message)J
126 282 :M
3.791 .379(twice, acks each.)J
126 318 :M
4.315 .431(Solution: put sequence number in message to identify re-)J
126 336 :M
4.688 .469(transmitted packets.  Receiver checks for duplicate sequence)J
126 354 :M
2.823 .282(#'s.  If so, discards.)J
126 390 :M
3.831 .383(i\) Sender must keep copy of every message that has not been)J
126 408 :M
4.98 .498(ack'ed yet \(easy\))J
126 444 :M
3.676 .368(ii\) Receiver must keep track of every message that could be a)J
126 462 :M
3.604 .36(duplicate \(hard!  How does receiver know when it's ok to forget)J
126 480 :M
6.124 .612(about received messages?\))J
126 516 :M
5.477 .548(Several approaches to maintaining state at sender/receiver:)J
126 552 :M
3.46 .346(a. Alternating bit protocol.  One bit sequence number.  Send one)J
126 570 :M
3.686 .369(message at a time; don't send next message  until ack received.)J
126 588 :M
3.861 .386(Sender only keeps copy of last message; receiver keeps track of)J
126 606 :M
4.21 .421(sequence # of last message received.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(tom; page: 6 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 181 228 rC
179 88 :M
f3_12 sf
(A)S
13 168 216 297 135 @k
185 112 -1 1 292 134 1 185 111 @a
13 -40 8 189 172 @k
-1 -1 196 172 1 1 295 140 @b
285 88 :M
(B)S
215 116 :M
(msg, #0)S
205 151 :M
(ack, #0)S
13 168 216 302 199 @k
190 176 -1 1 297 198 1 190 175 @a
13 -40 8 194 236 @k
-1 -1 201 236 1 1 300 204 @b
233 184 :M
(msg, #1)S
205 220 :M
(ack, #1)S
13 168 216 306 262 @k
194 239 -1 1 301 261 1 194 238 @a
13 -40 8 198 299 @k
-1 -1 205 299 1 1 304 267 @b
227 244 :M
(msg, #0)S
217 279 :M
(ack, #0)S
gR
gS 30 31 552 730 rC
126 333 :M
f3_12 sf
3.437 .344(Pros& cons:)J
162 351 :M
3.296 .33(+ simple)J
162 369 :M
4.305 .43(+ small overhead)J
162 387 :M
5.497 .55(- poor performance)J
126 441 :M
3.196 .32(b. Window-based protocol \(TCP\). Send up to N messages at a)J
126 459 :M
4.053 .405(time, without waiting for ack.)J
126 495 :M
4.618 .462("Window" reflects storage at receiver -- sender shouldn't)J
126 513 :M
5.602 .56(overrun receiver's buffer space.)J
126 549 :M
3.789 .379(Each message has sequence number.  Receiver can say, "I've)J
126 567 :M
2.997 .3(ack'ed up to message #X -> any message below X is a duplicate.)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(tom; page: 7 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 165 213 rC
179 91 :M
f3_12 sf
(A)S
278 89 :M
(B)S
207 116 :M
(msg, #0)S
13 185 233 277 158 @k
182 105 -1 1 273 155 1 182 104 @a
13 185 233 273 228 @k
178 175 -1 1 269 225 1 178 174 @a
13 185 233 272 209 @k
177 156 -1 1 268 206 1 177 155 @a
13 185 233 273 191 @k
178 138 -1 1 269 188 1 178 137 @a
13 185 233 272 172 @k
177 119 -1 1 268 169 1 177 118 @a
13 -53 -5 180 213 @k
-1 -1 186 211 1 1 275 159 @b
143 199 :M
(ack, #0)S
13 -53 -5 178 228 @k
-1 -1 184 226 1 1 273 174 @b
13 -53 -5 176 264 @k
-1 -1 182 262 1 1 271 210 @b
13 -53 -5 177 284 @k
-1 -1 183 282 1 1 272 230 @b
13 -53 -5 178 245 @k
-1 -1 184 243 1 1 273 191 @b
13 185 233 274 268 @k
179 215 -1 1 270 265 1 179 214 @a
gR
gS 30 31 552 730 rC
126 318 :M
f3_12 sf
4.272 .427(What if message gets garbled/dropped?  Receiver will get)J
126 336 :M
4.23 .423(messages out of order!)J
162 354 :M
4.15 .415(Discard any messages that arrive out of order?)J
198 372 :M
5.733 .573(Simple, worse performance)J
162 390 :M
3.553 .355(Keep copy until sender fills in the missing piece?)J
198 408 :M
4.276 .428(Reduces # of retransmits, more complex)J
126 444 :M
3.775 .378(What if ack gets dropped?  Timeout and resend just the un-)J
126 462 :M
6.988 .699(acknowledged message.)J
90 498 :M
f1_14 sf
7.595 .76(21.8 TCP: transmission control protocol)J
126 516 :M
f3_12 sf
4.723 .472(Reliable byte stream between two processes on different)J
126 534 :M
5.021 .502(machines over Internet \(read, write, flush\))J
126 570 :M
4.402 .44(Fragments byte stream into packets, hands packets to IP.)J
126 606 :M
4.622 .462(Uses window-based protocol, minimizing state at sender and)J
126 624 :M
1.094(receiver.)A
126 660 :M
3.938 .394(Sender has three regions: sent and acked, sent and not acked,)J
126 678 :M
4.473 .447(not yet sent)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(tom; page: 8 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.09 .409(Receiver has three regions: received and acked \(given to)J
126 102 :M
4.541 .454(application\), received and buffered, not yet received \(or)J
126 120 :M
4.544 .454(received and discarded because out of order\))J
126 123 261 287 rC
164 185 :M
(Sender messages)S
201 310 :M
(Receiver messages)S
156 238 -1 1 387 237 1 156 237 @a
142 254 :M
(sent,)S
142 270 :M
(acked)S
222 256 :M
(sent, not )S
222 272 :M
(acked)S
337 253 :M
(not yet)S
337 269 :M
(sent)S
-1 -1 188 270 1 1 187 213 @b
-1 -1 319 269 1 1 318 212 @b
175 358 -1 1 328 357 1 175 357 @a
-1 -1 217 389 1 1 216 332 @b
-1 -1 288 388 1 1 287 331 @b
149 373 :M
(received, )S
149 389 :M
(given to )S
149 405 :M
(app)S
222 376 :M
(received,)S
222 392 :M
(buffered)S
300 375 :M
(not yet)S
300 391 :M
(received)S
13 156 204 352 146 @k
155 147 -1 1 347 146 1 155 146 @a
183 144 :M
(Sequence numbers)S
gR
gS 30 31 552 730 rC
126 443 :M
f3_12 sf
2.85 .285(Each ack says: "got all messages up to #".  What happens if ack)J
126 461 :M
2.952 .295(is delayed, arrives out of order?  OK in this scheme.  Just)J
126 479 :M
1.011(discard.)A
90 515 :M
f1_14 sf
9.113 .911(21.9 Arbitrary Size Messages \(revisited\))J
126 533 :M
f3_12 sf
3.276 .328(Face similar issues as in TCP when building big messages on)J
126 551 :M
4.204 .42(small ones, when messages can get dropped.)J
126 605 :M
3.063 .306(\(i\) Ack each fragment?  Lots of acks)J
126 641 :M
3.686 .369(\(ii\) One ack for entire big message?  Re-transmit all fragments,)J
126 659 :M
3.889 .389(even if only one gets dropped)J
126 695 :M
3.408 .341(\(iii\) "Blast protocol" -- send one ack, tells sender which pieces)J
126 713 :M
4.645 .464(were missing.  Selective retransmit.)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(tom; page: 9 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 102 :M
f1_14 sf
11.816 1.182(21.10 Initialization)J
126 120 :M
f3_12 sf
3.412 .341(How do you know which sequence # to start with?  When)J
126 138 :M
3.837 .384(machine boots, ok to start with #0?)J
126 174 :M
3.446 .345(No.  Could send two separate messages with same serial #!)J
126 228 :M
4.392 .439(Two solutions:)J
126 246 :M
2.709 .271(1. Time to live: each TCP packet has a deadline.  If not)J
126 264 :M
3.698 .37(delivered in X seconds, then dropped.  Thus, can re-use)J
126 282 :M
3.616 .362(sequence numbers if wait for all packets in flight to be)J
126 300 :M
4.391 .439(delivered or to expire.)J
126 336 :M
3.598 .36(2. Epoch # -- uniquely identifies )J
f1_12 sf
1.311(which)A
f3_12 sf
3.623 .362( set of sequence)J
126 354 :M
3.777 .378(numbers are being used.  Put in every message, epoch #)J
126 372 :M
4.394 .439(incremented on crash and/or when run out of sequence #'s,)J
126 390 :M
3.789 .379(and stoed on disk.)J
90 426 :M
f1_14 sf
12.102 1.21(21.11 Congestion)J
126 444 :M
f3_12 sf
4.282 .428(How long should timeout be for re-sending messages?)J
126 462 :M
2.71 .271(    too long?  Wastes time if message is dropped.)J
126 480 :M
3.265 .326(    too short?  Retransmit even though ack will arrive shortly.)J
126 516 :M
3.474 .347(Stability problem: more congestion -> ack is delayed ->)J
126 534 :M
4.084 .408(unnecessary timeout -> more traffic -> more congestion)J
126 570 :M
2.76 .276(TCP solution:  "slow start".  Originally, window size = buffer)J
126 588 :M
3.064 .306(space on remote end.  Now, window size = control on how much)J
126 606 :M
3.664 .366(to add to congestion.)J
126 642 :M
3.828 .383(Start sending slowly.  If no timeout, slowly increase window)J
126 660 :M
4.144 .414(size \(throughput\).  If timeout, means congestion, cut window)J
126 678 :M
4.424 .442(size \(throughput\) in half.)J
90 714 :M
f1_14 sf
9.443 .944(21.12 General's Paradox)J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(tom; page: 10 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.054 .405(Can I use messages and retries over an unreliable network to)J
126 102 :M
4.278 .428(synchronize two machines so that they are guaranteed to do)J
126 120 :M
3.784 .378(some op at the same time?)J
126 156 :M
3.916 .392(Remarkably, no, even if all messages get through.)J
126 192 :M
3.778 .378(General's paradox:  two generals, on separate mountains.  Can)J
126 210 :M
4.599 .46(only communicate via messengers; the messengers can be)J
126 228 :M
1.23(captured.)A
126 264 :M
3.939 .394(Need to coordinate the attack; if they attack at different times,)J
126 282 :M
3.419 .342(then they all die.  If they attack at the same time, they win.)J
126 303 253 231 rC
179 324 :M
(A)S
339 323 :M
(B)S
13 168 216 336 375 @k
181 341 -1 1 331 374 1 181 340 @a
216 348 :M
(11 am ok?)S
13 -34 14 185 409 @k
-1 -1 192 409 1 1 340 379 @b
203 392 :M
(ok, 11's good for me.)S
13 171 219 334 454 @k
187 415 -1 1 329 453 1 187 414 @a
195 438 :M
(so, 11 it is?)S
13 -36 12 192 493 @k
-1 -1 199 493 1 1 337 460 @b
227 529 :M
-.298(........)A
211 484 :M
(yeah, but what if you )S
211 500 :M
(don't get this ack?)S
gR
gS 30 31 552 730 rC
126 549 :M
f3_12 sf
3.386 .339(Even if all messages are delivered, can't coordinate!   Can't)J
126 567 :M
3.926 .393(simultaneously get two generals or two machines to agree to do)J
126 585 :M
4.397 .44(something at the same time.)J
126 639 :M
2.878 .288(No solution to this -- one of the few things in CS that's just)J
126 657 :M
.922(impossible.)A
90 693 :M
f1_14 sf
7.725 .772(21.12 Two phase commit)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(tom; page: 11 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.495 .349(Since I can't solve the General's Paradox, let me solve a related)J
126 102 :M
1.182(problem.)A
126 138 :M
4.909 .491(Abstraction: distributed transaction -- two machines agree to)J
126 156 :M
3.638 .364(do something, or not do it, atomically \(but not necessarily at)J
126 174 :M
4.43 .443(exactly the same time\).)J
126 210 :M
3.184 .318(Two phase commit protocol does this.  Use log on each machine)J
126 228 :M
4.385 .439(to keep track of whether commit has happened.)J
126 264 :M
3.555 .355(First phase, ask if each can commit -- for instance, transfer of)J
126 282 :M
4.207 .421(funds from one bank to another.)J
126 318 :M
2.313 .231(      A writes, "begin transaction" to log)J
126 336 :M
1.681 .168(      A -> B: OK to transfer funds to me?)J
126 372 :M
1.698 .17(      Not enough cash:)J
126 408 :M
1.748 .175(          B-> A: transaction aborted)J
162 426 :M
2.487 .249(  A writes "abort" to log)J
126 462 :M
1.471 .147(      Enough cash:)J
126 498 :M
.854(1:)A
126 516 :M
1.676 .168(          B: Write new X account balance to log)J
126 534 :M
.854(2:)A
162 552 :M
1.278 .128(  B->A: OK, I can commit)J
126 588 :M
3.662 .366(Second phase, A can decide for both, whether they will commit.)J
126 624 :M
.854(3:)A
126 642 :M
1.735 .174(          A: Write new Y account balance to log)J
126 660 :M
.854(4:)A
162 678 :M
1.996 .2(     Write commit to log)J
126 696 :M
.854(5:)A
162 714 :M
2.696 .27(     Send message to B that commit occurred)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(tom; page: 12 of 12)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
.854(6:)A
126 120 :M
1.395 .14(          B: Write "got commit" to log)J
126 138 :M
3.472 .347(What if:)J
126 174 :M
3.04 .304(B crashes at 1?  Wakes up, does nothing.  A will timeout, abort)J
126 192 :M
6.921 .692(transaction, retry.)J
126 228 :M
3.59 .359(A crashes at 3?  Wakes up, sees transaction in progress. What)J
126 246 :M
4.077 .408(transaction, sends message to B, abort.)J
126 282 :M
2.603 .26(B crashes at 3?  B will come back up, look at log, so that when)J
126 300 :M
2.942 .294(A sends it "commit" message, it will say, oh, ok, commit.)J
endp
%%Trailer
end		% md
%%EOF
