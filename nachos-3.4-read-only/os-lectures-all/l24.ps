%!PS-Adobe-3.0
%%Title: (l24)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (9:08 Friday, April 28, 1995)
%%For: (tom)
%%Pages: 6
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 120 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 6)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.82 .782(Lecture 24: Multiprocessors and Parallel)J
60 73 :M
1.873(Programming)A
60 109 :M
7.292 .729(24.0 Main Points)J
96 127 :M
f3_12 sf
6.285 .628(Distributed virtual memory)J
96 145 :M
4.976 .498(Issues in exploiting parallelism)J
60 181 :M
f1_14 sf
8.842 .884(24.1 Types of multiprocessors)J
96 199 :M
f3_12 sf
4.973 .497(Several flavors of multiprocessors:)J
96 235 :M
6.278 .628(1. Shared-bus multiprocessor)J
96 271 :M
5.476 .548(2. Switched multiprocessor)J
96 307 :M
4.597 .46(3. Network of workstations)J
96 361 :M
4.081 .408(Can provide cache coherent shared memory on any of these)J
96 379 :M
4.503 .45(platforms!  At lowest level, shared memory implemented by)J
96 397 :M
4.615 .461(sending messages between CPUs.)J
96 433 :M
3.934 .393(What if shared memory is not provided by hardware?  Can)J
96 451 :M
5.225 .523(simulate in software!)J
60 487 :M
f1_14 sf
9.35 .935(24.2 Snoopy cache coherence)J
96 505 :M
f3_12 sf
3.615 .362(Shared bus multiprocessor \(Sequent, SGI, Sun, Compaq ...\))J
96 541 :M
5.191 .519(Write-ownership -- hardware detects reads and writes, on)J
96 559 :M
3.381 .338(cache miss, goes out over bus.)J
96 595 :M
4.136 .414(Bus means no callback directory needed -- other caches listen)J
96 613 :M
4.487 .449(to the bus for remote read/write, do correct operation)J
60 649 :M
f1_14 sf
8.673 .867(24.3 Directory based cache coherence)J
96 667 :M
f3_12 sf
7.09 .709(Switched multiprocessor)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.249 .425(Hardware detects reads and writes, on cache miss, sends)J
126 102 :M
4.38 .438(message to remote memory to fetch data)J
126 138 :M
3.741 .374(Each "memory module" has callback directory; if CPU requests)J
126 156 :M
3.26 .326(to read data, send message to CPU caching most up to data)J
126 174 :M
3.286 .329(copy.  If CPU requests to modify data, send invalidation to all)J
126 192 :M
3.106 .311(CPUs caching data.)J
126 228 :M
3.748 .375(As in xFS, management is distributed in that no central location)J
126 246 :M
4.491 .449(for all data/callbacks \(otherwise, would be a bottleneck!\))J
90 282 :M
f1_14 sf
8.243 .824(24.4 Network of workstations)J
126 300 :M
f3_12 sf
5.078 .508(Could implement hardware support for shared memory exactly)J
126 318 :M
4.173 .417(as above in switched multiprocessor, on top of ATM/Ethernet,)J
126 336 :M
.845(etc.)A
126 372 :M
3.808 .381(But what if no hardware support?  Can simulate in software!)J
126 408 :M
5.056 .506(Distributed virtual memory: Threads on different machines,)J
126 426 :M
4.37 .437(appear as if on same machine \(shared memory\))J
126 480 :M
3.94 .394(Idea: Use page table mapping to provide illusion of shared-)J
126 498 :M
1.379(memory.)A
126 516 :M
3.642 .364(  initially all pages mapped invalid)J
126 552 :M
3.246 .325(  if CPU has ownership of page, map read-write)J
126 570 :M
2.908 .291(  if CPU has one of several copies, map read-only)J
126 606 :M
3.632 .363(On read page fault, get read-only copy and make sure no one)J
126 624 :M
4.009 .401(else has ownership; on write page fault, invalidate all other)J
126 642 :M
.736(copies.)A
90 678 :M
f1_14 sf
8.739 .874(24.5 Process Migration)J
126 696 :M
f3_12 sf
4.084 .408(Can you move threads from one machine to another?)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.947 .395(Stop thread, copy registers to new machine, start.  With shared)J
126 102 :M
4.179 .418(virtual memory, moving stack, data, code --> automatic)J
126 138 :M
3.119 .312(In AFS or xFS, migrate process to new machine by:)J
126 156 :M
1.971 .197(     1. stop process)J
126 174 :M
2.475 .247(     2. flush dirty pages to backing file)J
126 192 :M
2.182 .218(     3. copy registers)J
126 210 :M
2.807 .281(       \(page faults will pull code/data to new machine\))J
126 246 :M
4.06 .406(In NFS, problem of weak consistency makes process migration)J
126 264 :M
1.392(harder!)A
126 297 :M
2.879 .288(What if machines are heterogeneous?  Eg, one is a SPARC vs.)J
126 315 :M
.575(MIPS.)A
126 333 :M
2.955 .295(  Not so good!  Floating point formats might be different, etc.)J
126 369 :M
4.193 .419(What if someone turns off machine you've migrated to?)J
126 387 :M
1.492 .149(    Bye, bye!)J
90 423 :M
f1_14 sf
13.464 1.346(24.6 Synchronization)J
126 441 :M
f3_12 sf
4.587 .459(How do you synchronize between threads running on different)J
126 459 :M
4.996 .5(machines?  Implement P/V in terms of test-and-set?)J
126 495 :M
5.035 .503(What would a test-and-set instruction do?)J
126 513 :M
2.062 .206(      Grab exclusive copy of page)J
126 531 :M
2.687 .269(      Execute test-and-set.)J
126 567 :M
4.411 .441(What if a number of processors are busy-waiting?)J
126 585 :M
2.876 .288(     Test&set will fail; page will ping-pong between caches.)J
126 621 :M
4.429 .443(Note: exactly the same thing happens on shared-bus)J
126 639 :M
5.917 .592(multiprocessors, switch-based multiprocessors.  Shared-)J
126 657 :M
4.986 .499(memory implemented by passing around memory blocks as)J
126 675 :M
1.06(messages.)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
5.033 .503(Solution: explicit message-passing for synchronization, instead)J
126 102 :M
4.705 .47(of transparent via shared memory abstraction.  Send message)J
126 120 :M
3.052 .305(to grab lock; send message to release lock.  Done even on)J
126 138 :M
5.493 .549(shared-memory multiprocessors \(ex: SGI\).)J
90 174 :M
f1_14 sf
8.625 .863(24.7 False sharing)J
126 192 :M
f3_12 sf
2.686 .269( What if two variables, X, Y on same page?)J
162 229 :M
f4_12 sf
-.238(CPU A:)A
162 247 :M
-.223(     loop)A
198 265 :M
-.216(  X += X + 1)A
162 301 :M
-.238(CPU B:)A
162 319 :M
-.223(     loop)A
198 337 :M
-.216(  Y += Y + 1)A
126 372 :M
f3_12 sf
3.66 .366(Page pings back and forth between two CPUs, even though only)J
126 390 :M
3.588 .359(one is using it at a time.  Happens on shared-memory)J
126 408 :M
4.274 .427(multiprocessors, except sharing at granularity of a cache block)J
126 426 :M
3.62 .362(\(64-128 bytes\), not a whole page \(4KB\).)J
126 462 :M
3.544 .354(Whole area of research in compilers as to how to make sure)J
126 480 :M
3.862 .386(data on same page/same cache block is used at same time.)J
90 516 :M
f1_14 sf
9.685 .968(24.8 Parallel programming)J
126 534 :M
f3_12 sf
3.901 .39(At one level, easy, just create threads.)J
126 570 :M
4.528 .453(Sequential programs are simpler than concurrent ones, so only)J
126 588 :M
4.739 .474(want to do parallel programming to improve performance.)J
126 624 :M
3.729 .373(Frequent case: go to all the effort of parallel programming, and)J
126 642 :M
4.097 .41(system runs )J
f1_12 sf
1.214(slower)A
f3_12 sf
3.816 .382( than before!  \(For example, because of)J
126 660 :M
5.47 .547(false sharing.\))J
126 696 :M
.862(Background:)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(tom; page: 5 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.157 .316(  Speedup = time on one processor / time on N processors)J
126 120 :M
2.644 .264(  Efficiency \(CPU utilization\) = speedup / N)J
126 156 :M
4.576 .458(Amdahl's law -- speedup is limited by sequential component)J
126 192 :M
3.16 .316(  single CPU time = sequential part + parallelizable part)J
126 228 :M
2.825 .282(  time on N >= sequential part + parallelizable part / N)J
126 264 :M
5.546 .555(speedup <= \(sequential + parallel\)/\(sequential+parallel/N\))J
126 300 :M
2.695 .269(What if N -> infinity?)J
126 318 :M
2.632 .263(    speedup <= 1 / sequential)J
126 354 :M
2.872 .287(For example, if 10% sequential, limit is speedup of 10.  If 1%)J
126 372 :M
4.242 .424(sequential, limit is 100.)J
126 408 :M
3.806 .381(In practice, law of diminishing returns.  Once you speedup)J
126 426 :M
3.756 .376(parallel part, all that remains is sequential part.  As you add)J
126 444 :M
3.752 .375(processors, additional CPU isn't used all that much.)J
126 480 :M
4.543 .454(Example:  Painter's algorithm \(sometimes called: z-buffer\))J
126 516 :M
4.041 .404(If drawing a scene, need to make sure foreground objects)J
126 534 :M
5.682 .568(obscure background objects.)J
126 588 :M
3.616 .362(Can get even more complicated if objects can go through other)J
126 606 :M
.958(ones.)A
126 642 :M
2.891 .289(Solution: draw each pixel of each object in turn.  If pixel is in)J
126 660 :M
4.104 .41(front of what we've already drawn, draw it. Otherwise, ignore.)J
126 696 :M
3.961 .396(Parallel version: put a thread on each processor, grab objects,)J
126 714 :M
6.488 .649(draw them.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(tom; page: 6 of 6)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
5.097 .51(What can limit performance?)J
126 138 :M
4.419 .442(Overhead of parallelism -- have to create threads, acquire)J
126 156 :M
3.292 .329(locks,  pass messages, etc.)J
126 192 :M
3.111 .311(Speedup = time on one/ time on N = \(sequential time +)J
126 210 :M
4.781 .478(overhead\) / N)J
126 246 :M
3.655 .366(Overhead depends on locality of reference.  If objects are in)J
126 264 :M
4.394 .439(random order, each thread paints in some region, never)J
126 282 :M
1.009(revisits.)A
126 318 :M
3.629 .363(Have to page in all the pixels for an object via write-ownership)J
126 336 :M
4.206 .421(protocol, never re-use.  Unlike sequential case, where pages)J
126 354 :M
4.469 .447(could stay in memory until re-used.)J
126 390 :M
3.693 .369(Solution: divide threads so each handles all objects in a certain)J
126 408 :M
3.911 .391(region.  Still get communication at the boundaries.)J
126 462 :M
.934(Strange:)A
126 498 :M
3.468 .347(  originally: build systems to exploit locality)J
126 534 :M
3.085 .308(  now: build programs to exhibit locality, so we can run fast on)J
126 552 :M
3.011 .301(    machines that exploit locality)J
126 606 :M
3.234 .323(But now, suppose one of the regions has lots of objects, and the)J
126 624 :M
3.271 .327(  others only have a few.  \(Another example like this --)J
126 642 :M
2.841 .284(  airflow over a wing -- all the action is at the wing!\))J
126 678 :M
2.937 .294(  Time on N processors = max time for each thread)J
126 696 :M
2.442 .244(    \(load balancing\))J
endp
%%Trailer
end		% md
%%EOF
