%!PS-Adobe-3.0
%%Title: (l13)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:18 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 17
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 159 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_patterns_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_patterns_level2
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
initQDpatterns
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 17)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
7.789 .779(Lecture 13: Memory Management and Address)J
60 73 :M
1.591(Translation)A
60 109 :M
7.292 .729(13.0 Main Points)J
96 127 :M
f3_12 sf
4.53 .453(Options for managing memory: paging, segmentation, both)J
114 145 :M
1.223(combined)A
96 163 :M
5.071 .507(Comparison among options)J
60 199 :M
f1_14 sf
8.766 .877(13.1 No hardware translation)J
60 235 :M
f1_12 sf
11.439 1.144(13.1.1 Uniprogramming)J
96 271 :M
f3_12 sf
5.249 .525(Personal computer operating systems: application always runs)J
96 289 :M
4.141 .414(at the same place in physical memory, because each application)J
96 307 :M
3.833 .383(runs one at a time \(application given illusion of dedicated)J
96 325 :M
3.448 .345(machine, by giving it reality of a dedicated machine\).  For)J
96 343 :M
4.551 .455(example, load application into low memory, operating system)J
96 361 :M
4.38 .438(into high memory. Application can address any physical)J
96 379 :M
5.997 .6(memory location.)J
96 382 224 212 rC
222.5 396.5 96 191 rS
238 438 :M
(Application)S
234 555 :M
(Operating)S
234 571 :M
(System)S
163 412 :M
(00000)S
167 589 :M
(ffffff)S
121 500 :M
(Physical)S
121 516 :M
(Memory)S
gR
gS 0 0 552 730 rC
60 627 :M
f1_12 sf
10.458 1.046(13.1.2 Multiprogramming: Linker-loader)J
96 663 :M
f3_12 sf
4.876 .488(Can multiple programs share physical memory, without)J
96 681 :M
4.441 .444(hardware translation?  Yes: when copy program into memory,)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.245 .424(change its addresses \(loads, stores, jumps\) to use the addresses)J
126 102 :M
3.44 .344(of where program lands in memory.  This is called a )J
f1_12 sf
1.268(linker-)A
126 120 :M
1.098(loader)A
f3_12 sf
3.147 .315(.  Used to be very common.)J
198 123 224 212 rC
324.5 137.5 96 191 rS
333 163 :M
(Application1)S
336 296 :M
(Operating)S
336 312 :M
(System)S
265 153 :M
(00000)S
269 330 :M
(ffffff)S
223 241 :M
(Physical)S
223 257 :M
(Memory)S
330 228 :M
(Application2)S
271 227 :M
(20000)S
gR
gS 30 31 552 730 rC
126 368 :M
f3_12 sf
4.01 .401(UNIX )J
f1_12 sf
.912(ld)A
f3_12 sf
3.252 .325( works this way: compiler generates each .o file with)J
126 386 :M
3.376 .338(code that starts at location 0.  How do you create an executable)J
126 404 :M
3.491 .349(from this?  Scan through each .o, changing addresses to point to)J
126 422 :M
4.361 .436(where each module goes in larger program \(requires help from)J
126 440 :M
4.337 .434(compiler to say where all the relocatable addresses are stored\).)J
126 476 :M
4.333 .433(With linker-loader, no protection: one program's bugs can cause)J
126 494 :M
4.762 .476(other programs to crash.)J
90 530 :M
f1_14 sf
8.979 .898(13.2 Hardware Translation Overview)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 392 229 rC
271 144 -1 1 292 217 1 271 143 @a
-1 -1 272 144 1 1 286 102 @b
286 103 -1 1 363 102 1 286 102 @a
362 103 -1 1 374 128 1 362 102 @a
-1 -1 364 195 1 1 373 128 @b
-1 -1 292 218 1 1 363 194 @b
442.5 102.5 74 127 rS
45 43 171 149 @f
155 153 :M
f3_12 sf
-.684(CPU)A
285 126 :M
(Translation)S
285 142 :M
(     Box)S
285 158 :M
(    \(MMU\))S
448 122 :M
(Physical)S
448 138 :M
(Memory)S
13 139 187 274 124 @k
-1 -1 196 150 1 1 268 125 @b
13 171 219 440 137 @k
370 118 -1 1 435 136 1 370 117 @a
13 140 188 436 219 @k
13 -40 8 285 264 @k
-1 -1 292 264 1 1 430 220 @b
13 198 246 285 264 @k
13 18 66 182 171 @k
186 176 -1 1 282 260 1 186 175 @a
193 110 :M
(Virtual)S
193 126 :M
(Address)S
379 101 :M
(Physical)S
379 117 :M
(Address)S
241 280 :M
(Data read or write)S
241 296 :M
(\(untranslated\))S
gR
gS 30 31 552 730 rC
126 334 :M
f3_12 sf
3.646 .365(Think of memory in two ways:)J
126 352 :M
3.54 .354(  view from the CPU -- what program sees, virtual memory)J
126 370 :M
3.999 .4(  view from memory -- physical memory)J
126 406 :M
5.166 .517(Translation implemented in hardware; controlled in software.)J
126 424 :M
4.336 .434(Various kinds of hardware translation schemes.  Start with the)J
126 442 :M
1.023(simplest!)A
90 478 :M
f1_14 sf
7.538 .754(13.3 Base and Bounds)J
126 514 :M
f1_12 sf
5.198 .52(Base and bounds)J
f3_12 sf
4.545 .455(: Each program loaded into contiguous)J
126 532 :M
4.64 .464(regions of physical memory, but with protection between)J
126 550 :M
3.597 .36(programs.  First built in the Cray-1.)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 332 221 rC
154.5 113.5 106 26 rS
161 129 :M
f3_12 sf
(virtual address)S
13 -114 -66 204 188 @k
-1 -1 205 183 1 1 204 140 @b
26 24 204.5 202.5 @f
200 207 :M
(+)S
156.5 265.5 106 26 rS
13 -114 -66 204 261 @k
-1 -1 205 256 1 1 204 214 @b
332.5 185.5 106 26 rS
13 -26 22 216 201 @k
-1 -1 223 202 1 1 329 196 @b
13 147 195 330 112 @k
-1 -1 261 125 1 1 324 113 @b
334.5 144.5 106 26 rS
13 28 76 352 114 @k
356 120 -1 1 375 142 1 356 119 @a
26 24 341.5 104.5 @f
335 110 :M
(>)S
356 205 :M
(base)S
361 165 :M
(bounds)S
158 282 :M
(physical address)S
13 151 199 421 89 @k
-1 -1 355 97 1 1 415 89 @b
421 91 :M
(error)S
gR
gS 30 31 552 730 rC
126 308 :M
f1_12 sf
7.51 .751(Hardware Implementation of Base and Bounds)J
126 326 :M
1.578(Translation)A
126 362 :M
f3_12 sf
3.743 .374(Program has illusion it is running on its own dedicated)J
126 380 :M
3.41 .341(machine, with memory starting at 0 and going up to size =)J
126 398 :M
4.173 .417(bounds.  Like linker-loader, program gets contiguous region of)J
126 416 :M
4.535 .453(memory.  But unlike linker-loader, protection: program can)J
126 434 :M
4.304 .43(only touch locations in physical memory between base and)J
126 452 :M
3.637 .364(base + bounds.)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 427 299 rC
188.5 112.5 73 110 rS
400 212 :M
f3_12 sf
(code)S
400 242 :M
(data)S
397 296 :M
(stack)S
179 100 :M
(virtual memory)S
168 122 :M
(0)S
138 222 :M
(bound)S
372.5 109.5 83 260 rS
356 101 :M
(physical memory)S
260 114 -1 1 376 198 1 260 113 @a
262 224 -1 1 378 308 1 262 223 @a
372 198 -1 1 457 197 1 372 197 @a
371 305 -1 1 456 304 1 371 304 @a
470 210 :M
(6250)S
463 314 :M
(6250 + bound)S
gR
gS 30 31 552 730 rC
126 404 :M
f1_12 sf
6.5 .65(Virtual and Physical Memory Views in Base and)J
126 422 :M
9.932 .993(Bounds System)J
126 458 :M
f3_12 sf
3.757 .376(Provides level of indirection: OS can move bits around behind)J
126 476 :M
3.962 .396(the program's back, for instance, if program needs to grow)J
126 494 :M
3.802 .38(beyond its bounds, or if need to coalesce fragments of memory.)J
126 512 :M
4.162 .416(Stop program, copy bits, change base and bounds registers,)J
126 530 :M
1.308(restart.)A
126 584 :M
3.025 .302(Only the OS gets to change the base and bounds!  Clearly, user)J
126 602 :M
4.078 .408(program can't, or else lose protection.)J
126 638 :M
5.522 .552(Hardware cost:)J
162 656 :M
6.02 .602(2 registers)J
126 674 :M
.681 .068(       )J
162 674 :M
7.357 .736(adder, comparator)J
126 692 :M
3.866 .387(Plus, slows down hardware because need to take time to do)J
126 710 :M
6.022 .602(add/compare on every memory reference.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 6 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 120 :M
f3_12 sf
3.922 .392(Base and bounds, pros:)J
126 138 :M
3.107 .311(+ simple, fast)J
126 174 :M
.14(Cons:)A
126 192 :M
4.679 .468(1. hard to share between programs)J
126 228 :M
3.298 .33(For example, suppose two copies of "vi")J
126 246 :M
2.613 .261(   Want to share code)J
126 264 :M
3.204 .32(   Want data and stack to be different)J
126 282 :M
3.654 .365(Can't do this with base and bounds!)J
126 300 :M
3.33 .333(2. Hard to grow address space.  Want stack and heap to grow)J
126 318 :M
4.274 .427(into each other \(have to allocate maximum future needs.)J
126 354 :M
4.495 .449(3. complex memory allocation)J
126 372 :M
2.996 .3(   First fit, best fit, buddy system)J
126 408 :M
3.106 .311(   In worst case, have to shuffle large chunks of memory to fit)J
126 426 :M
2.136(new)A
126 444 :M
2.693 .269(   program.)J
126 480 :M
3.956 .396(First, fix the first two \(segmentation\), then the first and third)J
126 498 :M
4.207 .421(\(paging\), then all three at the same time \(segmentation plus)J
126 516 :M
.831(paging\)!)A
90 552 :M
f1_14 sf
13.007 1.301(13.4 Segmentation)J
126 588 :M
f3_12 sf
1.883 .188(A )J
f1_12 sf
1.162(segment)A
f3_12 sf
3.645 .365( is a region of logically contiguous memory.)J
126 624 :M
3.544 .354(Idea is to generalize base and bounds, by allowing a )J
f1_12 sf
1.086(table)A
f3_12 sf
2.321 .232( of)J
126 642 :M
6.614 .661(base&bound pairs.)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 7 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 144 356 233 rC
154.5 185.5 106 26 rS
159 177 :M
f3_12 sf
(virtual address)S
26 24 425.5 311.5 @f
420 317 :M
(+)S
372.5 349.5 106 26 rS
13 147 195 330 184 @k
-1 -1 261 197 1 1 324 185 @b
26 24 341.5 176.5 @f
335 182 :M
(>)S
374 365 :M
(physical address)S
13 151 199 421 161 @k
-1 -1 355 169 1 1 415 161 @b
421 163 :M
(error)S
-1 -1 207 212 1 1 206 186 @b
215 203 :M
(offset)S
156 197 :M
(virt seg        \011\011    )S
156 213 :M
(#)S
231.5 251.5 104 118 rS
232 278 -1 1 336 277 1 232 277 @a
232 301 -1 1 336 300 1 232 300 @a
232 327 -1 1 336 326 1 232 326 @a
232 349 -1 1 336 348 1 232 348 @a
-1 -1 282 370 1 1 281 250 @b
237 246 :M
(seg ptr)S
286 247 :M
(seg size)S
13 210 258 230 287 @k
176 212 -1 1 228 282 1 176 211 @a
13 167 215 416 323 @k
253 290 -1 1 411 322 1 253 289 @a
13 190 238 416 304 @k
262 198 -1 1 412 301 1 262 197 @a
13 81 129 337 190 @k
-1 -1 313 286 1 1 336 196 @b
13 231 279 434 347 @k
428 326 -1 1 434 341 1 428 325 @a
237 233 :M
(phys )S
gR
gS 30 31 552 730 rC
126 410 :M
f3_12 sf
3.492 .349(For example, what does it look like with this segment table, in)J
126 428 :M
4.438 .444(virtual memory and physical memory?  Assume 2 bit segment)J
126 446 :M
3.495 .349(ID, and 12 bit segment offset.)J
126 482 :M
7.177 .718(virtual segment)J
126 500 :M
(#)S
270 482 :M
1.076(physical)A
270 500 :M
7.191 .719(segment start)J
414 482 :M
5.713 .571(segment size)J
126 518 :M
1.126(code)A
270 518 :M
1.573(0x4000)A
414 518 :M
1.598(0x700)A
126 536 :M
1.758(data)A
270 536 :M
(0)S
414 536 :M
1.598(0x500)A
126 554 :M
(-)S
270 554 :M
(0)S
414 554 :M
(0)S
126 572 :M
1.3(stack)A
270 572 :M
1.573(0x2000)A
414 572 :M
1.573(0x1000)A
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 8 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 360 :M
f3_12 sf
.739 .074( )J
130 72 325 288 rC
186.5 100.5 84 185 rS
:a
58 <8040200002040800
><808080404040202020000000020202040404080808000000
>fg bk :b
187 100 83 39 rF
:e
0 G
187.5 100.5 82 38 rS
.938 G
187 153 84 34 rF
0 G
187.5 153.5 83 33 rS
:a
56 <0102040810204080
><010101020202040404080808101010202020404040808080
>fg bk :b
186 245 84 42 rF
:e
0 G
186.5 245.5 83 41 rS
169 109 :M
(0)S
165 137 :M
(6ff)S
150 162 :M
(1000)S
153 183 :M
(14ff)S
148 253 :M
(3000)S
155 283 :M
(3fff)S
350.5 102.5 86 256 rS
:a
58 <8040200002040800
><808080404040202020000000020202040404080808000000
>fg bk :b
352 302 83 39 rF
:e
0 G
352.5 302.5 82 38 rS
.938 G
351 102 84 34 rF
0 G
351.5 102.5 83 33 rS
:a
56 <0102040810204080
><010101020202040404080808101010202020404040808080
>fg bk :b
352 183 84 42 rF
:e
0 G
352.5 183.5 83 41 rS
330 111 :M
(0)S
323 136 :M
(4ff)S
318 192 :M
(2000)S
320 222 :M
(2fff)S
318 311 :M
(4000)S
315 345 :M
(46ff)S
184 91 :M
(virtual memory)S
343 94 :M
(physical memory)S
gR
gS 30 31 552 730 rC
126 393 :M
f3_12 sf
3.958 .396(This should seem a bit strange: the virtual address space has)J
126 411 :M
3.354 .335(gaps in it!  Each segment gets mapped to contiguous locations in)J
126 429 :M
4.654 .465(physical memory, but may be gaps between segments.)J
126 483 :M
3.579 .358(But a correct program will never address gaps; if it does, trap)J
126 501 :M
2.878 .288(to kerenl.  Minor exception: stack, heap can grow.  In UNIX,)J
126 519 :M
3.568 .357(sbrk\(\) increases size of heap segment.  For stack, just take fault,)J
126 537 :M
4.52 .452(system automatically increases size of stack.)J
126 573 :M
4.051 .405(Example:  What happens with the above segment table, with)J
126 591 :M
3.617 .362(the following as virtual memory contents?  Code does: sin\(x\);)J
267 627 :M
f1_12 sf
10.357 1.036(Virtual memory)J
126 646 :M
f3_12 sf
4.454 .445(Main: 240)J
342 646 :M
3.208 .321(sub 8, sp)J
-1 -1 86 631 1 1 85 630 @b
-1 -1 86 631 1 1 85 630 @b
86 631 -1 1 301 630 1 86 630 @a
-1 -1 302 631 1 1 301 630 @b
302 631 -1 1 517 630 1 302 630 @a
-1 -1 518 631 1 1 517 630 @b
-1 -1 518 631 1 1 517 630 @b
-1 -1 86 649 1 1 85 631 @b
-1 -1 302 649 1 1 301 631 @b
-1 -1 518 649 1 1 517 631 @b
126 665 :M
2.217(244)A
342 665 :M
4.995 .499(store 1108, 4\(sp\))J
-1 -1 86 650 1 1 85 649 @b
86 650 -1 1 301 649 1 86 649 @a
-1 -1 302 650 1 1 301 649 @b
302 650 -1 1 517 649 1 302 649 @a
-1 -1 518 650 1 1 517 649 @b
-1 -1 86 668 1 1 85 650 @b
-1 -1 302 668 1 1 301 650 @b
-1 -1 518 668 1 1 517 650 @b
126 684 :M
2.217(248)A
342 684 :M
2.856 .286(store pc +8, \(sp\))J
-1 -1 86 669 1 1 85 668 @b
86 669 -1 1 301 668 1 86 668 @a
-1 -1 302 669 1 1 301 668 @b
302 669 -1 1 517 668 1 302 668 @a
-1 -1 518 669 1 1 517 668 @b
-1 -1 86 687 1 1 85 669 @b
-1 -1 302 687 1 1 301 669 @b
-1 -1 518 687 1 1 517 669 @b
126 703 :M
1.583(24c)A
342 703 :M
6.093 .609(jump 360)J
-1 -1 86 688 1 1 85 687 @b
86 688 -1 1 301 687 1 86 687 @a
-1 -1 302 688 1 1 301 687 @b
302 688 -1 1 517 687 1 302 687 @a
-1 -1 518 688 1 1 517 687 @b
-1 -1 86 706 1 1 85 688 @b
-1 -1 86 707 1 1 85 706 @b
-1 -1 86 707 1 1 85 706 @b
86 707 -1 1 301 706 1 86 706 @a
-1 -1 302 706 1 1 301 688 @b
-1 -1 302 707 1 1 301 706 @b
302 707 -1 1 517 706 1 302 706 @a
-1 -1 518 706 1 1 517 688 @b
-1 -1 518 707 1 1 517 706 @b
-1 -1 518 707 1 1 517 706 @b
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 9 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 88 :M
f3_12 sf
2.217(250)A
-1 -1 86 73 1 1 85 72 @b
-1 -1 86 73 1 1 85 72 @b
86 73 -1 1 301 72 1 86 72 @a
-1 -1 302 73 1 1 301 72 @b
302 73 -1 1 517 72 1 302 72 @a
-1 -1 518 73 1 1 517 72 @b
-1 -1 518 73 1 1 517 72 @b
-1 -1 86 91 1 1 85 73 @b
-1 -1 302 91 1 1 301 73 @b
-1 -1 518 91 1 1 517 73 @b
126 107 :M
-.392(...)A
-1 -1 86 92 1 1 85 91 @b
86 92 -1 1 301 91 1 86 91 @a
-1 -1 302 92 1 1 301 91 @b
302 92 -1 1 517 91 1 302 91 @a
-1 -1 518 92 1 1 517 91 @b
-1 -1 86 110 1 1 85 92 @b
-1 -1 302 110 1 1 301 92 @b
-1 -1 518 110 1 1 517 92 @b
126 126 :M
3.618 .362(Sin: 360)J
342 126 :M
3.969 .397(load 4\(sp\), r2)J
-1 -1 86 111 1 1 85 110 @b
86 111 -1 1 301 110 1 86 110 @a
-1 -1 302 111 1 1 301 110 @b
302 111 -1 1 517 110 1 302 110 @a
-1 -1 518 111 1 1 517 110 @b
-1 -1 86 129 1 1 85 111 @b
-1 -1 302 129 1 1 301 111 @b
-1 -1 518 129 1 1 517 111 @b
126 145 :M
2.217(364)A
342 145 :M
3.86 .386(load \(r2\), r3)J
-1 -1 86 130 1 1 85 129 @b
86 130 -1 1 301 129 1 86 129 @a
-1 -1 302 130 1 1 301 129 @b
302 130 -1 1 517 129 1 302 129 @a
-1 -1 518 130 1 1 517 129 @b
-1 -1 86 148 1 1 85 130 @b
-1 -1 302 148 1 1 301 130 @b
-1 -1 518 148 1 1 517 130 @b
126 164 :M
-.392(...)A
-1 -1 86 149 1 1 85 148 @b
86 149 -1 1 301 148 1 86 148 @a
-1 -1 302 149 1 1 301 148 @b
302 149 -1 1 517 148 1 302 148 @a
-1 -1 518 149 1 1 517 148 @b
-1 -1 86 167 1 1 85 149 @b
-1 -1 302 167 1 1 301 149 @b
-1 -1 518 167 1 1 517 149 @b
126 183 :M
2.217(420)A
342 183 :M
5.36 .536(jump \(sp\))J
-1 -1 86 168 1 1 85 167 @b
86 168 -1 1 301 167 1 86 167 @a
-1 -1 302 168 1 1 301 167 @b
302 168 -1 1 517 167 1 302 167 @a
-1 -1 518 168 1 1 517 167 @b
-1 -1 86 186 1 1 85 168 @b
-1 -1 302 186 1 1 301 168 @b
-1 -1 518 186 1 1 517 168 @b
126 202 :M
-.392(...)A
-1 -1 86 187 1 1 85 186 @b
86 187 -1 1 301 186 1 86 186 @a
-1 -1 302 187 1 1 301 186 @b
302 187 -1 1 517 186 1 302 186 @a
-1 -1 518 187 1 1 517 186 @b
-1 -1 86 205 1 1 85 187 @b
-1 -1 302 205 1 1 301 187 @b
-1 -1 518 205 1 1 517 187 @b
126 221 :M
4.066 .407(x: 1108)J
342 221 :M
2.217(666)A
-1 -1 86 206 1 1 85 205 @b
86 206 -1 1 301 205 1 86 205 @a
-1 -1 302 206 1 1 301 205 @b
302 206 -1 1 517 205 1 302 205 @a
-1 -1 518 206 1 1 517 205 @b
-1 -1 86 224 1 1 85 206 @b
-1 -1 302 224 1 1 301 206 @b
-1 -1 518 224 1 1 517 206 @b
126 240 :M
-.392(...)A
-1 -1 86 225 1 1 85 224 @b
86 225 -1 1 301 224 1 86 224 @a
-1 -1 302 225 1 1 301 224 @b
302 225 -1 1 517 224 1 302 224 @a
-1 -1 518 225 1 1 517 224 @b
-1 -1 86 243 1 1 85 225 @b
-1 -1 302 243 1 1 301 225 @b
-1 -1 518 243 1 1 517 225 @b
126 259 :M
1.971(3658)A
-1 -1 86 244 1 1 85 243 @b
86 244 -1 1 301 243 1 86 243 @a
-1 -1 302 244 1 1 301 243 @b
302 244 -1 1 517 243 1 302 243 @a
-1 -1 518 244 1 1 517 243 @b
-1 -1 86 262 1 1 85 244 @b
-1 -1 302 262 1 1 301 244 @b
-1 -1 518 262 1 1 517 244 @b
126 278 :M
1.548(365c)A
-1 -1 86 263 1 1 85 262 @b
86 263 -1 1 301 262 1 86 262 @a
-1 -1 302 263 1 1 301 262 @b
302 263 -1 1 517 262 1 302 262 @a
-1 -1 518 263 1 1 517 262 @b
-1 -1 86 281 1 1 85 263 @b
-1 -1 86 282 1 1 85 281 @b
-1 -1 86 282 1 1 85 281 @b
86 282 -1 1 301 281 1 86 281 @a
-1 -1 302 281 1 1 301 263 @b
-1 -1 302 282 1 1 301 281 @b
302 282 -1 1 517 281 1 302 281 @a
-1 -1 518 281 1 1 517 263 @b
-1 -1 518 282 1 1 517 281 @b
-1 -1 518 282 1 1 517 281 @b
126 315 :M
3.034 .303(Initially, pc = 240 and sp = 3660.)J
263 369 :M
f1_12 sf
10.236 1.024(Physical Memory)J
126 388 :M
f3_12 sf
3.351 .335(x: 108)J
342 388 :M
2.217(666)A
-1 -1 86 373 1 1 85 372 @b
-1 -1 86 373 1 1 85 372 @b
86 373 -1 1 301 372 1 86 372 @a
-1 -1 302 373 1 1 301 372 @b
302 373 -1 1 517 372 1 302 372 @a
-1 -1 518 373 1 1 517 372 @b
-1 -1 518 373 1 1 517 372 @b
-1 -1 86 391 1 1 85 373 @b
-1 -1 302 391 1 1 301 373 @b
-1 -1 518 391 1 1 517 373 @b
126 407 :M
-.392(...)A
-1 -1 86 392 1 1 85 391 @b
86 392 -1 1 301 391 1 86 391 @a
-1 -1 302 392 1 1 301 391 @b
302 392 -1 1 517 391 1 302 391 @a
-1 -1 518 392 1 1 517 391 @b
-1 -1 86 410 1 1 85 392 @b
-1 -1 302 410 1 1 301 392 @b
-1 -1 518 410 1 1 517 392 @b
126 426 :M
1.971(2658)A
-1 -1 86 411 1 1 85 410 @b
86 411 -1 1 301 410 1 86 410 @a
-1 -1 302 411 1 1 301 410 @b
302 411 -1 1 517 410 1 302 410 @a
-1 -1 518 411 1 1 517 410 @b
-1 -1 86 429 1 1 85 411 @b
-1 -1 302 429 1 1 301 411 @b
-1 -1 518 429 1 1 517 411 @b
126 445 :M
1.548(265c)A
-1 -1 86 430 1 1 85 429 @b
86 430 -1 1 301 429 1 86 429 @a
-1 -1 302 430 1 1 301 429 @b
302 430 -1 1 517 429 1 302 429 @a
-1 -1 518 430 1 1 517 429 @b
-1 -1 86 448 1 1 85 430 @b
-1 -1 302 448 1 1 301 430 @b
-1 -1 518 448 1 1 517 430 @b
126 464 :M
-.392(...)A
-1 -1 86 449 1 1 85 448 @b
86 449 -1 1 301 448 1 86 448 @a
-1 -1 302 449 1 1 301 448 @b
302 449 -1 1 517 448 1 302 448 @a
-1 -1 518 449 1 1 517 448 @b
-1 -1 86 467 1 1 85 449 @b
-1 -1 302 467 1 1 301 449 @b
-1 -1 518 467 1 1 517 449 @b
126 483 :M
4.998 .5(Main: 4240)J
342 483 :M
3.208 .321(sub 8, sp)J
-1 -1 86 468 1 1 85 467 @b
86 468 -1 1 301 467 1 86 467 @a
-1 -1 302 468 1 1 301 467 @b
302 468 -1 1 517 467 1 302 467 @a
-1 -1 518 468 1 1 517 467 @b
-1 -1 86 486 1 1 85 468 @b
-1 -1 302 486 1 1 301 468 @b
-1 -1 518 486 1 1 517 468 @b
126 502 :M
1.971(4244)A
342 502 :M
4.995 .499(store 1108, 4\(sp\))J
-1 -1 86 487 1 1 85 486 @b
86 487 -1 1 301 486 1 86 486 @a
-1 -1 302 487 1 1 301 486 @b
302 487 -1 1 517 486 1 302 486 @a
-1 -1 518 487 1 1 517 486 @b
-1 -1 86 505 1 1 85 487 @b
-1 -1 302 505 1 1 301 487 @b
-1 -1 518 505 1 1 517 487 @b
126 521 :M
1.971(4248)A
342 521 :M
2.856 .286(store pc +8, \(sp\))J
-1 -1 86 506 1 1 85 505 @b
86 506 -1 1 301 505 1 86 505 @a
-1 -1 302 506 1 1 301 505 @b
302 506 -1 1 517 505 1 302 505 @a
-1 -1 518 506 1 1 517 505 @b
-1 -1 86 524 1 1 85 506 @b
-1 -1 302 524 1 1 301 506 @b
-1 -1 518 524 1 1 517 506 @b
126 540 :M
1.548(424c)A
342 540 :M
6.093 .609(jump 360)J
-1 -1 86 525 1 1 85 524 @b
86 525 -1 1 301 524 1 86 524 @a
-1 -1 302 525 1 1 301 524 @b
302 525 -1 1 517 524 1 302 524 @a
-1 -1 518 525 1 1 517 524 @b
-1 -1 86 543 1 1 85 525 @b
-1 -1 302 543 1 1 301 525 @b
-1 -1 518 543 1 1 517 525 @b
126 559 :M
1.971(4250)A
-1 -1 86 544 1 1 85 543 @b
86 544 -1 1 301 543 1 86 543 @a
-1 -1 302 544 1 1 301 543 @b
302 544 -1 1 517 543 1 302 543 @a
-1 -1 518 544 1 1 517 543 @b
-1 -1 86 562 1 1 85 544 @b
-1 -1 302 562 1 1 301 544 @b
-1 -1 518 562 1 1 517 544 @b
126 578 :M
-.392(...)A
-1 -1 86 563 1 1 85 562 @b
86 563 -1 1 301 562 1 86 562 @a
-1 -1 302 563 1 1 301 562 @b
302 563 -1 1 517 562 1 302 562 @a
-1 -1 518 563 1 1 517 562 @b
-1 -1 86 581 1 1 85 563 @b
-1 -1 302 581 1 1 301 563 @b
-1 -1 518 581 1 1 517 563 @b
126 597 :M
4.238 .424(Sin: 4360)J
342 597 :M
3.969 .397(load 4\(sp\), r2)J
-1 -1 86 582 1 1 85 581 @b
86 582 -1 1 301 581 1 86 581 @a
-1 -1 302 582 1 1 301 581 @b
302 582 -1 1 517 581 1 302 581 @a
-1 -1 518 582 1 1 517 581 @b
-1 -1 86 600 1 1 85 582 @b
-1 -1 302 600 1 1 301 582 @b
-1 -1 518 600 1 1 517 582 @b
126 616 :M
1.971(4364)A
342 616 :M
3.86 .386(load \(r2\), r3)J
-1 -1 86 601 1 1 85 600 @b
86 601 -1 1 301 600 1 86 600 @a
-1 -1 302 601 1 1 301 600 @b
302 601 -1 1 517 600 1 302 600 @a
-1 -1 518 601 1 1 517 600 @b
-1 -1 86 619 1 1 85 601 @b
-1 -1 302 619 1 1 301 601 @b
-1 -1 518 619 1 1 517 601 @b
126 635 :M
-.392(...)A
-1 -1 86 620 1 1 85 619 @b
86 620 -1 1 301 619 1 86 619 @a
-1 -1 302 620 1 1 301 619 @b
302 620 -1 1 517 619 1 302 619 @a
-1 -1 518 620 1 1 517 619 @b
-1 -1 86 638 1 1 85 620 @b
-1 -1 302 638 1 1 301 620 @b
-1 -1 518 638 1 1 517 620 @b
126 654 :M
2.217(420)A
342 654 :M
5.36 .536(jump \(sp\))J
-1 -1 86 639 1 1 85 638 @b
86 639 -1 1 301 638 1 86 638 @a
-1 -1 302 639 1 1 301 638 @b
302 639 -1 1 517 638 1 302 638 @a
-1 -1 518 639 1 1 517 638 @b
-1 -1 86 657 1 1 85 639 @b
-1 -1 86 658 1 1 85 657 @b
-1 -1 86 658 1 1 85 657 @b
86 658 -1 1 301 657 1 86 657 @a
-1 -1 302 657 1 1 301 639 @b
-1 -1 302 658 1 1 301 657 @b
302 658 -1 1 517 657 1 302 657 @a
-1 -1 518 657 1 1 517 639 @b
-1 -1 518 658 1 1 517 657 @b
-1 -1 518 658 1 1 517 657 @b
126 691 :M
3.955 .395(Segmentation pros & cons:)J
126 709 :M
4.065 .406(+ efficient for sparse address spaces)J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 10 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.631 .363(+ easy to share whole segments  \(for example, code segment\))J
126 102 :M
3.526 .353(Detail: Need to add protection mode in segmentation table.  For)J
126 120 :M
4.418 .442(example, code segment would be read-only \(only execution and)J
126 138 :M
3.734 .373(loads are allowed\).  Data and stack segment would be read-)J
126 156 :M
5.245 .525(write \(stores allowed\).)J
126 192 :M
4.654 .465(- complex memory allocation)J
126 210 :M
3.408 .341(Still need first fit, best fit, etc., and re-shuffling to coalesce free)J
126 228 :M
3.284 .328(fragments, if no single free space is big enough for a new)J
126 246 :M
1.182(segment.)A
126 282 :M
3.952 .395(How do we make memory allocation simple and easy?)J
90 318 :M
f1_14 sf
9.877 .988(13.5 Paging)J
126 354 :M
f3_12 sf
3.676 .368(Allocate physical memory in terms of fixed size chunks of)J
126 372 :M
4.296 .43(memory, or )J
f1_12 sf
1.294(pages)A
f3_12 sf
(.)S
126 408 :M
3.599 .36(Simpler, because allows use of a bitmap.  What's a bitmap?)J
126 426 :M
3.38 .338(       001111100000001100)J
126 444 :M
3.943 .394(Each bit represents one page of physical memory -- 1 means)J
126 462 :M
4.297 .43(allocated, 0 means unallocated.  Lots simpler than base&bounds)J
126 480 :M
6.803 .68(or segmentation)J
126 516 :M
4.32 .432(Operating system controls mapping: any page of virtual)J
126 534 :M
4.534 .453(memory can go anywhere in physical memory.)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 11 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 144 349 227 rC
365.5 274.5 106 26 rS
159 177 :M
f3_12 sf
(virtual address)S
367 320 :M
(physical address)S
-1 -1 418 301 1 1 417 275 @b
426 292 :M
(offset)S
369 283 :M
(phys )S
369 299 :M
(page #)S
231.5 251.5 52 118 rS
232 275 -1 1 285 274 1 232 274 @a
13 210 258 229 288 @k
175 213 -1 1 227 283 1 175 212 @a
232 345 -1 1 285 344 1 232 344 @a
231 323 -1 1 284 322 1 231 322 @a
231 299 -1 1 284 298 1 231 298 @a
152.5 184.5 106 26 rS
213 202 :M
(offset)S
156 193 :M
(virtual )S
156 209 :M
(page #)S
227 245 :M
(page table)S
-1 -1 206 210 1 1 205 184 @b
365.5 164.5 106 26 rS
369 216 :M
(page table ptr)S
363.5 199.5 106 26 rS
372 181 :M
(page table size)S
13 151 199 289 173 @k
-1 -1 178 184 1 1 283 173 @b
13 -19 29 313 171 @k
319 172 -1 1 365 176 1 319 171 @a
26 27 301.5 173 @f
298 178 :M
(>)S
13 142 190 344 152 @k
-1 -1 313 161 1 1 338 153 @b
346 157 :M
(error)S
13 177 225 449 272 @k
260 198 -1 1 444 270 1 260 197 @a
13 156 204 361 287 @k
258 288 -1 1 356 287 1 258 287 @a
13 -36 12 258 233 @k
-1 -1 265 233 1 1 362 210 @b
gR
gS 30 31 552 730 rC
126 404 :M
f3_12 sf
3.758 .376(Each address space has its own page table, in physical memory.)J
126 422 :M
4.465 .447(Hardware needs two special registers -- pointer to physical)J
126 440 :M
3.426 .343(location of page table, and page table size.)J
126 476 :M
3.455 .345(Example: suppose page size is 4 bytes.)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 12 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 326 331 rC
144.5 99.5 61 214 rS
267.5 136.5 45 80 rS
168 112 :M
f3_12 sf
(a)S
168 128 :M
(b)S
168 144 :M
(c)S
168 160 :M
(d)S
167 182 :M
(e)S
167 198 :M
(f)S
167 214 :M
(g)S
167 230 :M
(h)S
166 255 :M
(i)S
166 271 :M
(j)S
166 287 :M
(k)S
166 303 :M
(l)S
144 167 -1 1 205 166 1 144 166 @a
145 236 -1 1 206 235 1 145 235 @a
285 182 :M
(3)S
283 207 :M
(1)S
268 162 -1 1 313 161 1 268 161 @a
267 191 -1 1 312 190 1 267 190 @a
138 92 :M
(virtual memory)S
340 90 :M
(physical memory)S
363.5 98.5 61 303 rS
383 154 :M
(i)S
383 170 :M
(j)S
383 186 :M
(k)S
383 202 :M
(l)S
362 135 -1 1 423 134 1 362 134 @a
385 274 :M
(e)S
385 290 :M
(f)S
385 306 :M
(g)S
385 322 :M
(h)S
363 261 -1 1 424 260 1 363 260 @a
364 330 -1 1 425 329 1 364 329 @a
338 113 :M
(0)S
342 144 :M
(4)S
342 213 :M
(8)S
339 260 :M
(12)S
339 341 :M
(16)S
283 154 :M
(4)S
363 209 -1 1 424 208 1 363 208 @a
384 345 :M
(a)S
384 361 :M
(b)S
384 377 :M
(c)S
384 393 :M
(d)S
257 238 :M
(page table)S
gR
gS 30 31 552 730 rC
126 418 :M
f3_12 sf
4.236 .424(Where is virtual address 6? 9?)J
126 454 :M
.69(Questions:)A
126 490 :M
2.732 .273(1. What if page size is very small?  For example, VAX had a)J
126 508 :M
3.226 .323(page size of 512 bytes.  Means lots of space taken up with page)J
126 526 :M
6.246 .625(table entries.)J
126 562 :M
3.013 .301(2. What if page size is really big?  Why not have an infinite)J
126 580 :M
3.357 .336(page size?  Would waste unused space inside of page.  Example)J
126 598 :M
5.858 .586(of internal fragmentation.)J
126 634 :M
f1_12 sf
1.348(Fragmentation)A
f3_12 sf
4.801 .48(: wasted space)J
126 670 :M
.658 .066(  )J
f1_12 sf
1.266(external)A
f3_12 sf
4.575 .458( -- free gaps between allocated chunks)J
126 688 :M
.629 .063(  )J
f1_12 sf
1.172(internal)A
f3_12 sf
3.762 .376( -- free gaps because don't need all of allocated)J
126 706 :M
1.531(chunk)A
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 13 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.669 .467(With segmentation need to re-shuffle segments to avoid)J
126 120 :M
4.832 .483(external fragmentation.  Paging suffers from internal)J
126 138 :M
1.122(fragmentation.)A
126 174 :M
2.804 .28(3. What if address space is sparse?  For example:  on UNIX,)J
126 192 :M
2.749 .275(code starts at 0, stack starts at 2^31 - 1.  With 1KB pages, 2)J
126 210 :M
4.107 .411(million page table entries -- because have to have table that)J
126 228 :M
5.117 .512(maps entire virtual address space.)J
126 261 :M
4.759 .476(Paging pros&cons:)J
126 279 :M
4.215 .422(+ simple memory allocation)J
126 297 :M
3.188 .319(+ easy to share)J
126 315 :M
3.863 .386(- big page tables if sparse address space)J
126 351 :M
4.081 .408(Is there a solution that allows simple memory allocation, easy)J
126 369 :M
4.048 .405(to share memory, )J
f1_12 sf
1.416(and)A
f3_12 sf
4.05 .405( is efficient for sparse address spaces?)J
126 405 :M
4.72 .472(How about combining paging and segmentation?)J
90 441 :M
f1_14 sf
10.59 1.059(13.6 Multi-level translation)J
126 477 :M
f3_12 sf
3.449 .345(Multi-level translation.  Use tree of tables.  Lowest level is page)J
126 495 :M
3.868 .387(table, so that physical memory can be allocated using a bitmap.)J
126 513 :M
4.094 .409(Higher levels are typically segmented.  For example, 2-level)J
126 531 :M
1.029(translation:)A
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 14 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 400 254 rC
136.5 97.5 175 26 rS
175 91 :M
f3_12 sf
(virtual address)S
405.5 227.5 119 26 rS
26 24 262.5 298.5 @f
258 302 :M
(>)S
415 271 :M
(physical address)S
308 321 :M
(error)S
-1 -1 200 122 1 1 199 96 @b
273 114 :M
(offset)S
137 114 :M
(virt seg #)S
148.5 168.5 104 76 rS
148 196 -1 1 252 195 1 148 195 @a
148 219 -1 1 252 218 1 148 218 @a
-1 -1 199 245 1 1 198 170 @b
147 147 :M
(page )S
147 163 :M
(table ptr)S
207 163 :M
(table size)S
200 112 :M
(virt page #)S
-1 -1 272 125 1 1 271 99 @b
152 264 :M
(segment table)S
13 245 293 166 207 @k
164 123 -1 1 167 201 1 164 122 @a
305.5 166.5 44 107 rS
294 156 :M
(page table)S
13 138 186 302 165 @k
-1 -1 174 210 1 1 296 167 @b
13 215 263 304 244 @k
231 124 -1 1 302 239 1 231 123 @a
13 156 204 405 240 @k
324 241 -1 1 400 240 1 324 240 @a
13 188 236 494 225 @k
312 111 -1 1 490 222 1 312 110 @a
407 242 :M
(phys page #)S
484 243 :M
(offset)S
-1 -1 483 255 1 1 482 229 @b
13 235 283 262 285 @k
232 125 -1 1 262 279 1 232 124 @a
13 224 272 254 281 @k
225 208 -1 1 253 275 1 225 207 @a
13 183 231 306 314 @k
275 299 -1 1 302 311 1 275 298 @a
gR
gS 30 31 552 730 rC
126 377 :M
f3_12 sf
3.555 .355(Just like recursion -- could have any number of levels.  Most)J
126 395 :M
4.133 .413(architectures today do some flavor of this.)J
126 431 :M
.69(Questions:)A
126 467 :M
4.857 .486(Where are segment table/page tables stored?  Segment tables)J
126 485 :M
3.714 .371(are usually in special CPU registers, because they are small.)J
126 503 :M
4.32 .432(Page tables, usually in main memory)J
126 539 :M
3.485 .348(How do we share memory?  Can share entire segment, or a)J
126 557 :M
4.619 .462(single page.)J
126 593 :M
3.456 .346(Example:  Suppose virtual address has 4 bits of segment #, 8)J
126 611 :M
3.182 .318(bits of virtual page #, and 12 bits of offset.)J
272 647 :M
f1_12 sf
9.566 .957(Segment Table)J
126 665 :M
f3_12 sf
4.854 .485(page table ptr)J
342 665 :M
4.185 .418(page table size)J
126 683 :M
1.971(2000)A
342 683 :M
1.637(0x14)A
126 701 :M
(0)S
342 701 :M
(0)S
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 15 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 87 :M
f3_12 sf
1.971(1000)A
342 87 :M
1.717(0xd)A
126 105 :M
(0)S
342 105 :M
(0)S
263 141 :M
f1_12 sf
10.236 1.024(Physical Memory)J
126 159 :M
f3_12 sf
-.392(...)A
126 177 :M
1.971(1000)A
342 177 :M
1.717(0x6)A
342 195 :M
1.717(0xb)A
342 213 :M
1.717(0x4)A
126 231 :M
-.392(...)A
126 249 :M
1.971(2000)A
342 249 :M
1.637(0x13)A
342 267 :M
1.548(0x2a)A
342 285 :M
1.717(0x3)A
126 303 :M
-.348(....)A
126 357 :M
4.462 .446(What do the following addresses translate to?)J
126 375 :M
1.781(2070?)A
126 393 :M
6.363 .636(202016 ?)J
126 411 :M
6.126 .613(104c684 ?)J
126 429 :M
6.363 .636(210014 ?)J
126 465 :M
6.476 .648(Multilevel translation:)J
126 483 :M
3.101 .31(  + only need to allocate as many page table entries as we need.)J
126 501 :M
3.215 .322(     In other words, sparse address spaces are easy.)J
126 519 :M
3.102 .31(  + easy memory allocation)J
126 537 :M
2.514 .251(  + share at seg or page level)J
126 555 :M
3.014 .301(  - pointer per page \(typically 4KB - 16KB pages today\))J
126 573 :M
3.207 .321(  - page tables need to be contiguous)J
126 591 :M
3.843 .384(  - two lookups per memory reference)J
90 627 :M
f1_14 sf
7.571 .757(13.7 Multilevel translation with paged page tables)J
126 663 :M
f3_12 sf
3.967 .397(Above, page tables have to be allocated linearly in memory.)J
126 681 :M
2.769 .277(Can we page them?  Yes!  Idea is to put the page tables in a)J
126 699 :M
4.35 .435(special segment that is translated, but inaccessible to user)J
126 717 :M
3.917 .392(programs.  To prevent recursion, the page table for this)J
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 16 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.892 .389(segment is in physical memory.  Thus, the segment table)J
126 102 :M
4.388 .439(contains page table pointers that are virtual for some segments,)J
126 120 :M
3.021 .302(and physical for some others.   In fact, this is how the MIPS)J
126 138 :M
3.663 .366(and the HP's work!)J
126 141 351 211 rC
176.5 164.5 84 156 rS
157 347 :M
(virtual address space)S
176 204 -1 1 261 203 1 176 203 @a
176 245 -1 1 261 244 1 176 244 @a
188 186 :M
(code, data)S
204 229 :M
(stack)S
184 262 :M
(page tables)S
179 290 :M
(OS code,data, )S
179 306 :M
(page table for )S
179 322 :M
(sys segment)S
279 196 :M
(translated, accessible )S
279 212 :M
(to user programs)S
276 259 :M
(translated, with protection bits )S
276 275 :M
(set to prevent user access)S
177 278 -1 1 262 277 1 177 277 @a
276 306 :M
(untranslated)S
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 17 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 72 492 525 rC
101.5 97.5 175 26 rS
139 91 :M
f3_12 sf
(virtual address)S
116.5 468.5 119 26 rS
26 24 266.5 151.5 @f
262 155 :M
(>)S
126 512 :M
(physical address)S
293 180 :M
(error)S
-1 -1 164 122 1 1 163 96 @b
237 114 :M
(offset)S
101 114 :M
(virt seg #)S
114.5 168.5 104 76 rS
114 196 -1 1 218 195 1 114 195 @a
114 219 -1 1 218 218 1 114 218 @a
-1 -1 165 245 1 1 164 170 @b
111 147 :M
(page )S
111 163 :M
(table ptr)S
171 163 :M
(table size)S
164 112 :M
(virt page #)S
-1 -1 236 125 1 1 235 99 @b
116 264 :M
(segment table)S
13 245 293 130 207 @k
128 123 -1 1 131 201 1 128 122 @a
257.5 422.5 44 107 rS
247 551 :M
(physical )S
247 567 :M
(page table )S
247 583 :M
(\(in memory\))S
118 483 :M
(phys page #)S
195 484 :M
(offset)S
-1 -1 194 496 1 1 193 470 @b
13 183 231 309 170 @k
278 155 -1 1 305 167 1 278 154 @a
13 121 169 254 162 @k
-1 -1 191 208 1 1 249 165 @b
13 178 226 253 145 @k
204 126 -1 1 248 143 1 204 125 @a
13 171 219 259 238 @k
139 205 -1 1 254 237 1 139 204 @a
13 216 264 263 229 @k
205 127 -1 1 261 224 1 205 126 @a
26 24 272.5 238.5 @f
268 242 :M
(+)S
13 -114 -66 271 287 @k
-1 -1 272 282 1 1 271 251 @b
182.5 289.5 175 26 rS
188 333 :M
(Address of page table entry)S
-1 -1 247 315 1 1 246 289 @b
-1 -1 319 318 1 1 318 292 @b
13 -114 -66 279 482 @k
-1 -1 280 477 1 1 279 339 @b
241 368 :M
(\(if physical\))S
13 -24 24 168 483 @k
174 484 -1 1 279 483 1 174 483 @a
13 156 204 451 299 @k
213 300 -1 1 446 299 1 213 299 @a
361 297 :M
(\(if virtual\))S
427.5 286.5 104 76 rS
427 314 -1 1 531 313 1 427 313 @a
427 337 -1 1 531 336 1 427 336 @a
-1 -1 478 363 1 1 477 288 @b
405 378 :M
(\(page tables always )S
405 394 :M
(in system segment, )S
405 410 :M
(sys seg has physical )S
405 426 :M
(page table pointer\))S
26 24 419.5 236.5 @f
416 242 :M
(+)S
13 148 196 479 228 @k
-1 -1 433 236 1 1 473 228 @b
442.5 219.5 108 26 rS
444 178 :M
(physical address )S
444 194 :M
(of system page )S
444 210 :M
(table entry)S
516.5 432.5 44 107 rS
472 560 :M
(physical page table )S
472 576 :M
(for system segment )S
472 592 :M
(\(in memory\))S
352.5 477.5 119 26 rS
352 525 :M
(physical address of )S
352 541 :M
(page table entry)S
354 492 :M
(phys page #)S
431 493 :M
(offset)S
-1 -1 430 505 1 1 429 479 @b
:a
32 <FF00FF00FF00FF00
><FFFFFF000000FFFFFF000000FFFFFF000000FFFFFF000000
>fg bk :b
13 -107 -59 207 466 @k
-1 -1 208 461 1 1 251 126 @b
:e
0 G
13 133 181 406 243 @k
-1 -1 287 296 1 1 400 245 @b
13 32 80 419 248 @k
422 254 -1 1 456 301 1 422 253 @a
13 -113 -65 538 457 @k
-1 -1 539 452 1 1 543 230 @b
13 213 261 447 476 @k
339 310 -1 1 445 471 1 339 309 @a
13 -31 17 389 475 @k
-1 -1 396 476 1 1 535 457 @b
gR
gS 30 31 552 730 rC
126 630 :M
f3_12 sf
4.845 .484(This means that potentially, each memory reference involves)J
126 648 :M
4.388 .439(three memory references \(one for the system page table, one)J
126 666 :M
3.551 .355(for the user page table, and one for the real data\).)J
126 702 :M
3.483 .348(How do we reduce the overhead of translation?  TLB's!)J
endp
%%Trailer
end		% md
%%EOF
