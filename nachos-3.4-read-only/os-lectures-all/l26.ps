%!PS-Adobe-3.0
%%Title: (l26)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (0:06 Friday, May 5, 1995)
%%For: (tom)
%%Pages: 15
%%DocumentFonts: Times-Bold Times-Roman Courier
%%DocumentNeededFonts: Times-Bold Times-Roman Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 155 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(tom)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Courier
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/f4_1/Courier :mre
/f4_12 f4_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(tom; page: 1 of 15)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
8.189 .819(Lecture 26: Protection and Security)J
60 91 :M
6.895 .689(26.0 Main Point)J
96 109 :M
f3_12 sf
4.615 .462(Why you shouldn't ever trust a computer system)J
96 145 :M
4.267 .427(Goal: Prevent misuse of computers)J
60 181 :M
f1_14 sf
10.625 1.063(26.1 Definitions)J
96 199 :M
f3_12 sf
3.968 .397(Types of misuse:)J
96 217 :M
4.757 .476(1. Accidental)J
96 253 :M
6.283 .628(2. Intentional)J
96 289 :M
4.465 .446(Protection is to prevent either accidental or intentional misuse;)J
96 307 :M
4.745 .474(security is to prevent intentional misuse.)J
96 343 :M
3.876 .388(This lecture and the next focuses on security.)J
96 379 :M
4.023 .402(This lecture:  conceptual understanding of how to make)J
96 397 :M
5.809 .581(systems more secure)J
96 433 :M
4.296 .43(Next lecture: some examples, to illustrate why providing)J
96 451 :M
4.138 .414(security is really hard in practice.)J
96 487 :M
4.29 .429(Three pieces to security:)J
96 523 :M
3.331 .333(  1. Authentication -- who user is)J
96 559 :M
3.116 .312(  2. Authorization -- who is allowed to do what)J
96 595 :M
3.522 .352(  3. Enforcement -- make sure people do only what they are)J
96 613 :M
4.467 .447(supposed to do)J
96 649 :M
3.308 .331(Loophole in any of these, problem:  For example:)J
96 667 :M
3.528 .353(1. log in as superuser)J
96 685 :M
2.831 .283(2. log in as self, do anything)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(tom; page: 2 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.31 .331(3. can you trust software to make decisions about 1 + 2)J
90 138 :M
f1_14 sf
13.344 1.334(26.2 Authentication)J
126 156 :M
f3_12 sf
4.468 .447(Common approach: passwords.  Shared secret between two)J
126 174 :M
3.536 .354(parties.  Since only I know password, machine can assume it is)J
126 192 :M
1.402(me.)A
126 228 :M
3.739 .374(Problem 1: system must keep copy of secret, to check against)J
126 246 :M
3.27 .327(passwords.  What if malicious user gains access to this list of)J
126 264 :M
1.32(passwords?)A
126 300 :M
4.61 .461(Encryption - transformation that is difficult to reverse without)J
126 318 :M
4.711 .471(the right key)J
126 354 :M
4.276 .428(For example: UNIX /etc/passwd file)J
126 390 :M
3.266 .327(    passwd -> one way transform -> encrypted passwd)J
126 426 :M
4.052 .405(System stores only encrypted version, so ok even if someone)J
126 444 :M
3.782 .378(reads the file!  When you type in your password, system)J
126 462 :M
6.459 .646(compares encrypted versions.)J
126 498 :M
3.75 .375(Problem 2. Passwords must be long and obscure \(cf. paper in)J
126 516 :M
1.515(reader\))A
126 552 :M
2.851 .285(      Paradox: short passwords are easy to crack)J
162 570 :M
2.199 .22(       long ones, people write down!)J
126 624 :M
3.582 .358(Technology means we have to use longer passwds: UNIX)J
126 642 :M
5.015 .501(initially required only undercase, 5 letter passwords)J
126 678 :M
3.071 .307(How long for an exhaustive search?  26^5 = 10 million)J
126 696 :M
2.691 .269(  In 1975, 10 ms to check a passwd -> 1 day)J
126 714 :M
2.82 .282(  In 1992,  0.001 ms to check a passwd -> 10 seconds)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(tom; page: 3 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.054 .405(Many people choose even simpler passwords, such as English)J
126 120 :M
3.449 .345(words -- takes even less time to check for all words in the)J
126 138 :M
.978(dictionary!)A
126 174 :M
4.782 .478(Some \(partial\) solutions:)J
126 210 :M
4.664 .466(a. Extend everyone's password with a unique number \(stored)J
126 228 :M
3.783 .378(in password file\), so can't crack multiple passwords at a time)J
126 246 :M
4.172 .417(\(otherwise, takes 10 seconds to crack every account on entire)J
126 264 :M
1.156(system!\))A
126 300 :M
3.658 .366(b. Require more complex passwords.  For example: 6 letter,)J
126 318 :M
4.373 .437(with upper and lower and number and special:)J
126 336 :M
1.815 .181(      70^6 ~ 600 billion, or 6 days)J
126 372 :M
3.548 .355(Except, people still pick common patterns \(ex: 5 lower case)J
126 390 :M
4.922 .492(letters, plus one number\).)J
126 426 :M
2.908 .291(c. Make it take a long time to check each password.  For)J
126 444 :M
4.291 .429(example, delay every remote login attempt by 1 second.)J
126 480 :M
3.532 .353(d. Assign very long passwords.  Give everyone a calculator \(or)J
126 498 :M
4.272 .427(ATM card\) to carry around to remember the password.)J
126 516 :M
4.549 .455(Requires physical theft to steal password.)J
126 552 :M
3.91 .391(Problem 3. Can you trust the encryption algorithm?  Recent)J
126 570 :M
3.078 .308(example: one thought to be safe, had a back door.  If there is a)J
126 588 :M
4.043 .404(back door, means you don't need to do complete exhaustive)J
126 606 :M
1.072(search.)A
90 660 :M
f1_14 sf
9.821 .982(26.3 Authentication in distributed systems)J
126 696 :M
f3_12 sf
4.14 .414(Two roles for encryption:)J
126 714 :M
2.24 .224(      a. Authentication)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(tom; page: 4 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
2.654 .265(      b. Secrecy -- I don't want anyone to know this data \(eg,)J
162 102 :M
4.573 .457(medical records, etc.\))J
90 138 :M
f1_12 sf
8.855 .885(26.3.1 Private key encryption)J
126 156 :M
f3_12 sf
4.167 .417(Private key: use an encryption algorithm that can be easily)J
126 174 :M
4.516 .452(reversed, given the correct key \(and hard to reverse without)J
126 192 :M
5.664 .566(the key\))J
108 195 449 375 rC
24 21 159.5 271 @f
-1 -1 160 314 1 1 159 280 @b
-1 -1 146 333 1 1 159 312 @b
159 314 -1 1 172 330 1 159 313 @a
143 298 -1 1 180 297 1 143 297 @a
139 361 :M
(Spy)S
13 156 204 268 298 @k
197 299 -1 1 263 298 1 197 298 @a
274 304 :M
(plaintext)S
13 156 204 432 298 @k
335 299 -1 1 427 298 1 335 298 @a
357 293 :M
(encrypt)S
13 -114 -66 375 274 @k
-1 -1 376 269 1 1 375 223 @b
347 216 :M
(password)S
435 304 :M
(cipher text)S
13 -114 -66 470 446 @k
-1 -1 471 441 1 1 470 311 @b
438 468 :M
(cipher text)S
13 -24 24 336 462 @k
342 463 -1 1 431 462 1 342 462 @a
275 465 :M
(plaintext)S
358 458 :M
(decrypt)S
13 66 114 379 469 @k
-1 -1 380 541 1 1 379 475 @b
349 558 :M
(password)S
24 21 159.5 436 @f
-1 -1 160 479 1 1 159 445 @b
-1 -1 146 498 1 1 159 477 @b
159 479 -1 1 172 495 1 159 478 @a
143 463 -1 1 180 462 1 143 462 @a
13 -24 24 190 460 @k
196 461 -1 1 262 460 1 196 460 @a
142 527 :M
(CIA)S
131.5 204.5 301 161 rS
120.5 417.5 317 151 rS
136 223 :M
(secure)S
389 431 :M
(secure)S
476 351 :M
(insecure )S
476 367 :M
(transmission)S
gR
gS 30 31 552 730 rC
126 603 :M
f3_12 sf
4.428 .443(From cipher text, can't decode without password.)J
126 621 :M
4.142 .414(From plain text and cipher text, can't derive password!)J
126 657 :M
3.557 .356(As long as password  stays secret, get both secrecy and)J
126 675 :M
1.061(authentication.)A
126 711 :M
3.55 .355(But how do you get shared secret in both places?)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(tom; page: 5 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
5.794 .579(Authentication server \(example: Kerberos\))J
126 138 :M
3.953 .395(Server keeps list of passwords, provides a way for two parties,)J
126 156 :M
3.15 .315(A, B to talk to one another, as long as they trust server.)J
126 192 :M
.716(Notation:)A
126 210 :M
2.519 .252(   Kxy is a key for talking between x and y.)J
126 228 :M
2.424 .242(   \(..\)^K means, encrypt message \(..\) with key K.)J
126 264 :M
3.699 .37(A asks server for key:)J
126 282 :M
1.296 .13(     A -> S    \(Hi! I'd like a key for A, B\))J
126 318 :M
3.73 .373(Server gives back special "session" key encrypted in B's key:)J
126 336 :M
1.059 .106(     S -> A \(Use Kab \(This is A!  Use Kab\)^Ksb\)^Ksa)J
126 372 :M
2.796 .28(A gives B the ticket:)J
126 390 :M
1.006 .101(     A -> B \(This is A! Use Kab\)^Ksb)J
126 426 :M
3.195 .32(Detail: add in timestamps to limit how long a key will be used,)J
126 444 :M
4.548 .455(to prevent a machine from replaying messages later!)J
126 480 :M
4.48 .448(Also have to include encrypted checksums, to prevent)J
126 498 :M
4.412 .441(malicious user from inserting garbage into the message!)J
90 552 :M
f1_12 sf
8.492 .849(26.3.2 Public key encryption)J
126 570 :M
f3_12 sf
4.261 .426(Public key encryption is an alternative to private key;)J
126 588 :M
5.945 .595(separates authentication from secrecy.)J
126 624 :M
2.022 .202(Each key is a pair: K, K-1)J
126 660 :M
4.95 .495(With private key system:)J
126 678 :M
.873 .087(     \(text\)^K^K = text)J
126 714 :M
4.393 .439(With public key system:)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(tom; page: 6 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
1.267 .127(     \(text\)^K^K-1 = text,  but \(text\)^K^K != text)J
126 102 :M
1.602 .16(     \(text\)^K-1^K = text,  but \(text\)^K-1^K-1 != text)J
126 138 :M
2.619 .262(   and: can't derive K from K-1, or vice versa)J
126 192 :M
3.336 .334(Idea is: K kept secret, K-1 made public \(put in a telephone)J
126 210 :M
1.032(directory\).)A
126 246 :M
4.675 .468(For example:)J
126 264 :M
1.386 .139(   \(I'm tom!\) ^K)J
126 282 :M
2.91 .291(      Everyone can read it, but only I can send it \(authentication\))J
126 318 :M
.672 .067(   \(Hi!\) ^ K-1)J
126 336 :M
2.932 .293(     Anyone can send it, but only the target can read it \(secrecy\))J
126 372 :M
1.211 .121(    \(\(I'm tom!\)^K Hi!\)^K-1)J
126 390 :M
2.351 .235(      Only I can send it, only you can read it.  In other words,)J
126 408 :M
3.985 .398(just like private key at that point!)J
126 444 :M
3.738 .374(Problem: how do you trust dictionary of public keys?  Maybe)J
126 462 :M
3.766 .377(somebody lied to you about who had which key!)J
90 516 :M
f1_14 sf
12.695 1.27(26.4 Authorization)J
126 534 :M
f3_12 sf
4.193 .419(Authorization: who can do what)J
126 570 :M
3.888 .389(Access control matrix: formalization of all the permissions in)J
126 588 :M
6.619 .662(the system)J
103 606 :M
1.009(objects)A
103 624 :M
1.55(users)A
189 606 :M
1.025(file1)A
1 G
0 0 1 1 rF
217 606 :M
psb
/wp$gray 1 def

/wp$top 609 def

/wp$left 171 def

/wp$right 257 def

/wp$bottom 627 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
275 606 :M
0 G
1.025(file2)A
1 G
0 0 1 1 rF
303 606 :M
psb
/wp$gray 1 def

/wp$top 609 def

/wp$left 257 def

/wp$right 344 def

/wp$bottom 627 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
362 606 :M
0 G
1.025(file3)A
1 G
0 0 1 1 rF
390 606 :M
psb
/wp$gray 1 def

/wp$top 609 def

/wp$left 344 def

/wp$right 430 def

/wp$bottom 627 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
448 606 :M
0 G
-.392(...)A
1 G
0 0 1 1 rF
457 606 :M
psb
/wp$gray 1 def

/wp$top 609 def

/wp$left 430 def

/wp$right 517 def

/wp$bottom 627 def

/wp$box {newpath wp$left wp$bottom moveto wp$left wp$top lineto wp$right wp$top lineto wp$right wp$bottom lineto closepath } def

wp$gray setgray wp$box fill

pse
103 642 :M
0 G
(A)S
189 642 :M
3.243(rw)A
275 642 :M
(r)S
103 660 :M
(B)S
275 660 :M
3.243(rw)A
103 678 :M
(C)S
362 678 :M
(r)S
103 696 :M
-.392(...)A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(tom; page: 7 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.491 .349(For example, one box represents C can read file3.)J
126 120 :M
3.921 .392(Potentially huge # of users, operations, so impractical to store)J
126 138 :M
3.477 .348(all of these)J
126 174 :M
5.645 .564(Two approaches:)J
126 210 :M
3.517 .352(1. access control list -- store all permissions for all users with)J
126 228 :M
4.988 .499(each object)J
126 264 :M
3.092 .309(Still, might be lots of users!  UNIX addresses this by having)J
126 282 :M
2.999 .3(each file store: r, w, x for owner, group, world.  More recent)J
126 300 :M
4.104 .41(systems provide way of specifying groups of users, and)J
126 318 :M
4.665 .466(permissions for each group.)J
126 354 :M
3.571 .357(2. Capability list -- each process, stores all objects the process)J
126 372 :M
3.843 .384(has  permission to touch)J
126 408 :M
3.485 .348(Lots of capability systems built in the past; idea out of favor)J
126 426 :M
3.063 .306(today.  But page tables are an example.  Each process has list of)J
126 444 :M
3.255 .325(pages it has access to; not each page has list of processes that)J
126 462 :M
4.105 .41(are permitted to access it.)J
90 498 :M
f1_14 sf
12.027 1.203(26.5 Enforcement)J
126 516 :M
f3_12 sf
3.906 .391(Enforcer checks passwords, access control lists, etc.)J
126 552 :M
3.581 .358(Any bug in enforcer means: way for malicious user to gain)J
126 570 :M
4.175 .417(ability to do anything!)J
126 606 :M
3.26 .326(In UNIX, superuser has all the powers of the UNIX kernel --)J
126 624 :M
3.47 .347(can do anything.   Because of coarse-grained access control, lots)J
126 642 :M
3.2 .32(of stuff has to run as superuser in order to work.  If bug in any)J
126 660 :M
4.22 .422(one of these programs, you're hosed!)J
126 696 :M
.948(Paradox:)A
126 714 :M
3.173 .317(  a. make enforcer as small as possible)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(tom; page: 8 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.583 .358(     easier to make correct, but simple-minded protection model)J
126 120 :M
3.878 .388(  b. fancy protection -- only minimal privilege necessary)J
126 138 :M
1.948 .195(     Hard to get right.)J
90 210 :M
f1_14 sf
6.741 .674(26.6 State of the world in security)J
126 228 :M
f3_12 sf
6.49 .649(Authentication -- encryption)J
126 246 :M
2.989 .299(    But almost nobody encrypts!)J
126 282 :M
4.807 .481(Authorization -- access control)J
126 300 :M
3.712 .371(    But many systems provide only very coarse-grained access)J
126 318 :M
3.268 .327(control \(ex: UNIX -- means, need to turn off protection to)J
126 336 :M
6.653 .665(enable sharing\))J
126 372 :M
5.202 .52(Enforcement -- kernel mode)J
126 390 :M
3.208 .321(   Hard to write a million line program without bugs, and any)J
126 408 :M
3.931 .393(bug is a potential security loophole.)J
90 444 :M
f1_14 sf
8.02 .802(26.7 Classes of security problems)J
90 462 :M
f1_12 sf
8.227 .823(26.7.1 Abuse of privilege)J
126 480 :M
f3_12 sf
3.759 .376(If the superuser is evil, we're all in trouble)J
126 516 :M
2.343 .234(      nothing you can do about this)J
90 552 :M
f1_12 sf
8.333 .833(26.7.2  Imposter)J
126 570 :M
f3_12 sf
4.082 .408(Break into system by pretending to be someone else.)J
126 606 :M
2.697 .27(For example, in UNIX, can set up a .rhosts file to allow logins)J
126 624 :M
4.406 .441(from one machine to another, without having to re-type)J
126 642 :M
1.185(password.)A
126 678 :M
3.449 .345(Also allows "rsh" -- command to do an operation on a remote)J
126 696 :M
1.096(node.)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(tom; page: 9 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.416 .442(Combination means: send rsh request, pretending to be from)J
126 102 :M
4.13 .413(the trusted user, to install .rhosts file granting imposter full)J
126 120 :M
.726(access!)A
126 156 :M
3.845 .384(Similarly, if have open X windows connection over the network,)J
126 174 :M
4.476 .448(can send message appearing to be keystrokes from window,)J
126 192 :M
3.427 .343(but really is commands to allow imposter access.  If no)J
126 210 :M
3.804 .38(encryption, no way to stop this!)J
90 246 :M
f1_12 sf
7.978 .798(26.7.3 Trojan horse)J
126 264 :M
f3_12 sf
3.859 .386(One army gave another a present of a wooden horse, army)J
126 282 :M
6.009 .601(hidden inside.)J
126 318 :M
4.558 .456(Trojan horse appears helpful, but really does something)J
126 336 :M
1.452(harmful)A
90 372 :M
f1_12 sf
8.383 .838(26.7.4 Salami attack)J
126 390 :M
f3_12 sf
4.278 .428(Superman 3 \(terrible movie\), but happened in real life.)J
126 426 :M
2.944 .294(Idea was to build up a hunk one bit at a time.  What do you do)J
126 444 :M
5.282 .528(with partial pennies from interest?)J
126 480 :M
3.752 .375(Bank keeps it!  This guy re-programmed it so that the partial)J
126 498 :M
3.357 .336(pennies would go into his account.  Doesn't seem like much, but)J
126 516 :M
3.384 .338(if you are Bank of America, with a few million customers, adds)J
126 534 :M
5.282 .528(up pretty quickly!)J
90 588 :M
f1_12 sf
11.399 1.14(26.7.5 Eavesdropping)J
126 606 :M
f3_12 sf
3.521 .352(Listener -- tap into serial line on the back of the terminal, or)J
126 624 :M
4.087 .409(onto Ethernet.  See everyting typed in; almost everything goes)J
126 642 :M
4.312 .431(over network unencrypted.  For instance, rlogin to remote)J
126 660 :M
5 .5(machine, your password goes over the network unencrypted!)J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(tom; page: 10 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.399 .44(Spoiler -- not stealing information, just making system)J
126 102 :M
4.271 .427(unusable.  Just chews up system resources; electronic)J
126 120 :M
5.874 .587(equivalent of vandalism)J
126 174 :M
3.547 .355(How do you prevent these?  Hard to build system that is both)J
126 192 :M
5.189 .519(useful, and prevents misuse.)J
90 228 :M
f1_14 sf
8.834 .883(26.8 Concrete Examples)J
90 264 :M
f1_12 sf
6.411 .641(26.8.1 Tenex -- early 70's, BBN)J
126 282 :M
f3_12 sf
4.256 .426(Most popular system at universities before UNIX)J
126 318 :M
3.533 .353(Thought to be very secure.   To demonstrate it, created a team)J
126 336 :M
3.13 .313(to try to find loopholes.  Gave them all the source code and)J
126 354 :M
3.599 .36(documentation \(want code to be publicly available, as in UNIX\);)J
126 372 :M
4.197 .42(gave them a normal account.)J
126 408 :M
4.171 .417(In 48 hours, had every password in the system.)J
126 444 :M
3.845 .384(Here's the code for the password check:)J
126 480 :M
.717 .072(  for \(i = 0; i < 8; i++\))J
126 498 :M
2.75 .275(    if \(userPasswd[i] != realPasswd[i]\))J
162 516 :M
3.651 .365(go to error)J
126 552 :M
3.489 .349(Looks innocuous, like you'd have to try all combinations.  256^8)J
126 588 :M
3.983 .398(But! Tenex also used virtual memory, and it interacts badly)J
126 606 :M
4.095 .409(with the above code.)J
126 642 :M
3.838 .384(Key idea: force page faults at inopportune times; can break)J
126 660 :M
6.674 .667(passwords quickly.)J
126 696 :M
3.802 .38(Arrange first character in string to be as last character in page,)J
126 714 :M
3.441 .344(rest to be on the next page.  Arrange that the page with the)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(tom; page: 11 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.597 .36(first character be in memory, and rest to be on disk \(for)J
126 102 :M
4.34 .434(example, by referencing lots of other pages, then referencing)J
126 120 :M
4.375 .438(the first page\).)J
126 156 :M
1.13 .113(                a|aaaaaa)J
126 192 :M
3.44 .344( in memory| on disk)J
126 228 :M
3.6 .36(By timing how long the password check takes, can figure out)J
126 246 :M
4.63 .463(whether the first character is correct!)J
126 282 :M
2.692 .269(  if fast, first char is wrong)J
126 300 :M
2.886 .289(  if slow, first char is right, page fault, one of the others was)J
126 318 :M
1.419(wrong)A
126 354 :M
3.154 .315(So try all first characters, until one is slow.  Then put first two)J
126 372 :M
3.802 .38(characters in memory, rest on disk.  Try all second characters,)J
126 390 :M
3.164 .316(until one is slow.)J
126 426 :M
2.925 .292(  Means takes 256 * 8  to crack passwords.)J
126 462 :M
3.244 .324(Fix is easy, don't stop until you look at all the characters.)J
126 480 :M
3.445 .344(But how do you figure this out in advance?)J
90 516 :M
f1_12 sf
9.398 .94(26.8.2 Internet worm)J
126 534 :M
f3_12 sf
3.927 .393(A few years ago, broke into thousands of computers over)J
126 552 :M
3.799 .38(Internet.  Son of the person who wrote the paper in the reader!)J
126 588 :M
5.867 .587(Three attacks:)J
126 624 :M
2.595 .259(    1. dictionary lookup)J
126 642 :M
2.16 .216(    2. sendmail)J
126 660 :M
2.6 .26(       -- debug mode, if configured wrong, can let anybody log in)J
126 678 :M
1.944 .194(    3. fingerd)J
126 696 :M
1.674 .167(       -- finger tea@cs)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(tom; page: 12 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.635 .363(Fingerd didn't check for length of string, but only allocated a)J
126 102 :M
3.132 .313(fixed size array for it on the stack.  By passing a \(carefully)J
126 120 :M
4.105 .41(crafted\) really long string, could overwrite stack, get the)J
126 138 :M
4.42 .442(program to call arbitrary code!)J
126 174 :M
3.686 .369(Got caught because the idea was to launch attacks on other)J
126 192 :M
4.571 .457(systems from whatever systems were broken into; so ended up)J
126 210 :M
4.178 .418(breaking into same machine multiple times, dragged CPU down)J
126 228 :M
4.089 .409(so much that people noticed.)J
126 264 :M
4.548 .455(Variant of this problem: kernel checks system call parameters)J
126 282 :M
4.312 .431(to prevent anyone from corrupting it by passing bad)J
126 300 :M
1.268(arguments.)A
126 336 :M
3.158 .316(So kernel code looks like:)J
126 372 :M
4.537 .454(check parameters; if ok, use arguments)J
126 408 :M
3.986 .399(But what if application is multithreaded?  Can change contents)J
126 426 :M
4.251 .425(of arguments after check and before use!)J
90 462 :M
f1_12 sf
9.707 .971(26.8.3 Thompson's self-replicating program)J
126 480 :M
f3_12 sf
3.661 .366(Bury trojan horse in binaries, so no evidence in the source)J
126 516 :M
3.552 .355(Replicates itself to every UNIX system in the world, and even)J
126 534 :M
2.828 .283(to new UNIX's on new platforms.  No visible sign.)J
126 570 :M
3.308 .331(Gave Ken Thompson the ability to log into any system in the)J
126 588 :M
1.063(world.)A
126 624 :M
4.277 .428(Two steps:)J
126 642 :M
2.571 .257(    1. make it possible \(easy\))J
126 660 :M
2.237 .224(    2. hide it \(tricky\))J
126 696 :M
2.991 .299(Step 1. Modify login.c)J
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(tom; page: 13 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
162 82 :M
f4_12 sf
-.397(A:)A
162 100 :M
-.209(  if \(name == "ken"\))A
162 118 :M
-.207(    don't check password)A
162 136 :M
-.21(    log in as root)A
126 153 :M
f3_12 sf
2.841 .284(Idea is: hide change, so no one can see it.)J
126 189 :M
3.026 .303(Step 2. Modify the C compiler)J
126 225 :M
3.334 .333(Instead of having the code in login, put it in the compiler:)J
162 244 :M
f4_12 sf
-.297( B:)A
162 262 :M
-.21(   if see trigger,)A
162 280 :M
-.205(     insert A into input stream)A
126 315 :M
f3_12 sf
4.298 .43(Whenever the compiler sees a trigger \(/* gobbledygook */\),)J
126 333 :M
3.852 .385(puts A into input stream of the compiler)J
126 369 :M
3.174 .317(Now, don't need A in login.c, just need the trigger.)J
126 405 :M
3.397 .34(Need to get rid of the problem in the compiler)J
126 441 :M
3.438 .344(Step 3. Modify compiler to have:)J
162 478 :M
f4_12 sf
-.211(  if see trigger2)A
162 496 :M
-.204(    insert B + C into input stream)A
126 531 :M
f3_12 sf
3.462 .346(This is where self-replicating code comes in!  Question for)J
126 549 :M
3.544 .354(reader: can you write a C program that has no inputs, and)J
126 567 :M
6.443 .644(outputs itself?)J
126 585 :M
3.431 .343(Step 4. Compile the compiler with C present)J
126 603 :M
3.229 .323(  -- now in the binary for compiler)J
126 639 :M
3.69 .369(Step 5. Replace code with trigger2)J
126 675 :M
3.218 .322(Result is -- all this stuff is only in the binary for the compiler.)J
126 693 :M
3.326 .333(Inside the binary there is C, inside that, code for B, inside that)J
126 711 :M
3.125 .313(code for A.  But source code only needs trigger2!)J
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(tom; page: 14 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.976 .398(Every time you recompile login.c, the compiler inserts the)J
126 120 :M
4.231 .423(backdoor. Every time you recompile the compiler, the compiler)J
126 138 :M
6.101 .61(re-inserts the backdoor.)J
126 174 :M
3.563 .356(What happens when you port to a new machine?  Need a)J
126 192 :M
4.306 .431(compiler to generate code; where does that compiler run?)J
126 228 :M
2.885 .288(On the old machine -- C compiler is written in C!  So everytime)J
126 246 :M
3.43 .343(you go to a new machine, you infect the new compiler with the)J
126 264 :M
3.515 .352(old one.)J
90 318 :M
f1_14 sf
10.873 1.087(26.9 Lessons)J
126 336 :M
f3_12 sf
4.617 .462(1. Hard to resecure after penetration)J
126 372 :M
3.449 .345(What do you need to do remove the backdoor?  Remove all the)J
126 390 :M
1.172(triggers?)A
126 426 :M
3.472 .347(What if he left another trigger in the editor -- if you ever see)J
126 444 :M
4.168 .417(anyone removing this trigger, go back and re-insert it!)J
126 480 :M
3.654 .365( Re-write the entire OS in assembler?  Maybe the assembler is)J
126 498 :M
1.187(corrupted!)A
126 534 :M
3.789 .379(Toggle in everything from scratch every time you log into the)J
126 552 :M
1.369(computer?)A
126 588 :M
3.716 .372(2. Hard to detect when system has been penetrated.  Easy to)J
126 606 :M
5.639 .564(make system forget)J
126 660 :M
4.002 .4(3. Any system with bugs has loopholes \(and every system has)J
126 678 :M
.936(bugs!\))A
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(tom; page: 15 of 15)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
3.885 .389(Summary: can't stop loopholes, can't tell if it's happened, can't)J
126 102 :M
2.656 .266(get rid of it.)J
endp
%%Trailer
end		% md
%%EOF
