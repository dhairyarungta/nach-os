%!PS-Adobe-3.0
%%Title: (l14)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (8:19 PM Tuesday, February 28, 1995)
%%For: (Robin_Briggs)
%%Pages: 10
%%DocumentFonts: Times-Bold Times-Roman
%%DocumentNeededFonts: Times-Bold Times-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 139 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Robin_Briggs)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
/f0_1/Times-Bold :mre
/f1_1 f0_1 1.087 scf
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f2_1/Times-Roman :mre
/f3_1 f2_1 1.087 scf
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 1 of 10)setjob
%%EndPageSetup
gS 0 0 552 730 rC
60 55 :M
f1_14 sf
5.642 .564(Lecture 14: Caching and TLBs)J
60 91 :M
7.072 .707(14.0 Main Points:)J
96 109 :M
f3_12 sf
3.857 .386(Cache concept, in general and as applied to translation)J
96 127 :M
4.145 .415(Ways of organizing caches -- associativity)J
96 145 :M
5.116 .512(Problems with caching)J
60 181 :M
f1_14 sf
8.47 .847(14.1 Cache concept)J
96 217 :M
f1_12 sf
1.237(Cache)A
f3_12 sf
3.536 .354(: copy that can be accessed more quickly than original.)J
96 253 :M
4.599 .46(Idea is: make frequent case efficient, infrequent path doesn't)J
96 271 :M
3.515 .351(matter as much.  Caching is a fundamental concept used in lots)J
96 289 :M
3.769 .377(of places in computer systems.  It underlies many of the)J
96 307 :M
4.058 .406(techniques that are used today to make computers go fast: can)J
96 325 :M
3.989 .399(cache translations, memory locations, pages, file blocks, file)J
96 343 :M
4.836 .484(names, network routes, authorizations for security systems, etc.)J
60 397 :M
f1_14 sf
7.235 .724(14.2 Generic Issues in Caching)J
96 433 :M
f1_12 sf
5.434 .543(Cache hit)J
f3_12 sf
2.938 .294(: item is in the cache)J
96 451 :M
f1_12 sf
6.084 .608(Cache miss)J
f3_12 sf
3.143 .314(: item is not in the cache, have to do full operation)J
96 487 :M
f1_12 sf
7.805 .78(Effective access time)J
f3_12 sf
2.7 .27( =)J
132 505 :M
2.113 .211(P\(hit\) * cost of hit +  P\(miss\) * cost of miss)J
96 559 :M
3.594 .359(1. How do you find whether item is in the cache \(whether there)J
96 577 :M
3.144 .314(is a cache hit\)?)J
96 613 :M
2.813 .281(2. If it is not in cache \(cache miss\), how do you choose what to)J
96 631 :M
4.112 .411(replace from cache to make room?)J
96 667 :M
3.59 .359(3. Consistency -- how do you keep cache copy consistent with)J
96 685 :M
6.369 .637(real version?)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 2 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 102 :M
f1_14 sf
9.559 .956(14.3 Memory Hierarchy)J
126 138 :M
f3_12 sf
4.907 .491(Two principles:)J
126 174 :M
4.173 .417(1. The smaller amount of memory needed, the faster that)J
126 192 :M
4.511 .451(memory can be accessed.)J
126 228 :M
3.987 .399(2. The larger amount of memory, the cheaper per byte.)J
126 264 :M
4.205 .421(Thus, put frequently accessed stuff in small, fast, expensive)J
126 282 :M
4.22 .422(memory; use large, slow, cheap memory for everything else.)J
223 319 :M
1.166(Latency)A
344 319 :M
.515(Size)A
451 319 :M
.36(Cost)A
-1 -1 86 304 1 1 85 303 @b
-1 -1 86 304 1 1 85 303 @b
86 304 -1 1 193 303 1 86 303 @a
-1 -1 194 304 1 1 193 303 @b
194 304 -1 1 301 303 1 194 303 @a
-1 -1 302 304 1 1 301 303 @b
302 304 -1 1 409 303 1 302 303 @a
-1 -1 410 304 1 1 409 303 @b
410 304 -1 1 517 303 1 410 303 @a
-1 -1 518 304 1 1 517 303 @b
-1 -1 518 304 1 1 517 303 @b
-1 -1 86 322 1 1 85 304 @b
-1 -1 194 322 1 1 193 304 @b
-1 -1 302 322 1 1 301 304 @b
-1 -1 410 322 1 1 409 304 @b
-1 -1 518 322 1 1 517 304 @b
113 338 :M
1.228(registers)A
237 338 :M
1.941(5ns)A
314 338 :M
7.742 .774(32-128 bytes)J
441 338 :M
3.898 .39(on chip)J
-1 -1 86 323 1 1 85 322 @b
86 323 -1 1 193 322 1 86 322 @a
-1 -1 194 323 1 1 193 322 @b
194 323 -1 1 301 322 1 194 322 @a
-1 -1 302 323 1 1 301 322 @b
302 323 -1 1 409 322 1 302 322 @a
-1 -1 410 323 1 1 409 322 @b
410 323 -1 1 517 322 1 410 322 @a
-1 -1 518 323 1 1 517 322 @b
-1 -1 86 341 1 1 85 323 @b
-1 -1 194 341 1 1 193 323 @b
-1 -1 302 341 1 1 301 323 @b
-1 -1 410 341 1 1 409 323 @b
-1 -1 518 341 1 1 517 323 @b
97 357 :M
5.553 .555(on-chip cache)J
233 357 :M
1.787(10ns)A
344 357 :M
-.32(4KB)A
441 357 :M
3.898 .39(on chip)J
-1 -1 86 342 1 1 85 341 @b
86 342 -1 1 193 341 1 86 341 @a
-1 -1 194 342 1 1 193 341 @b
194 342 -1 1 301 341 1 194 341 @a
-1 -1 302 342 1 1 301 341 @b
302 342 -1 1 409 341 1 302 341 @a
-1 -1 410 342 1 1 409 341 @b
410 342 -1 1 517 341 1 410 341 @a
-1 -1 518 342 1 1 517 341 @b
-1 -1 86 360 1 1 85 342 @b
-1 -1 194 360 1 1 193 342 @b
-1 -1 302 360 1 1 301 342 @b
-1 -1 410 360 1 1 409 342 @b
-1 -1 518 360 1 1 517 342 @b
96 376 :M
5.242 .524(off-chip cache)J
233 376 :M
1.787(25ns)A
340 376 :M
.28(64KB)A
431 376 :M
1.353($5000/MB)A
-1 -1 86 361 1 1 85 360 @b
86 361 -1 1 193 360 1 86 360 @a
-1 -1 194 361 1 1 193 360 @b
194 361 -1 1 301 360 1 194 360 @a
-1 -1 302 361 1 1 301 360 @b
302 361 -1 1 409 360 1 302 360 @a
-1 -1 410 361 1 1 409 360 @b
410 361 -1 1 517 360 1 410 360 @a
-1 -1 518 361 1 1 517 360 @b
-1 -1 86 379 1 1 85 361 @b
-1 -1 194 379 1 1 193 361 @b
-1 -1 302 379 1 1 301 361 @b
-1 -1 410 379 1 1 409 361 @b
-1 -1 518 379 1 1 517 361 @b
96 395 :M
7.095 .71(main memory)J
229 395 :M
1.71(200ns)A
338 395 :M
.887(64MB)A
439 395 :M
1.303($50/MB)A
-1 -1 86 380 1 1 85 379 @b
86 380 -1 1 193 379 1 86 379 @a
-1 -1 194 380 1 1 193 379 @b
194 380 -1 1 301 379 1 194 379 @a
-1 -1 302 380 1 1 301 379 @b
302 380 -1 1 409 379 1 302 379 @a
-1 -1 410 380 1 1 409 379 @b
410 380 -1 1 517 379 1 410 379 @a
-1 -1 518 380 1 1 517 379 @b
-1 -1 86 398 1 1 85 380 @b
-1 -1 194 398 1 1 193 380 @b
-1 -1 302 398 1 1 301 380 @b
-1 -1 410 398 1 1 409 380 @b
-1 -1 518 398 1 1 517 380 @b
127 414 :M
1.42(disk)A
201 414 :M
4.469 .447(10ms \(10M ns\))J
342 414 :M
.077 .008(2 GB)J
433 414 :M
1.104($0.50/MB)A
-1 -1 86 399 1 1 85 398 @b
86 399 -1 1 193 398 1 86 398 @a
-1 -1 194 399 1 1 193 398 @b
194 399 -1 1 301 398 1 194 398 @a
-1 -1 302 399 1 1 301 398 @b
302 399 -1 1 409 398 1 302 398 @a
-1 -1 410 399 1 1 409 398 @b
410 399 -1 1 517 398 1 410 398 @a
-1 -1 518 399 1 1 517 398 @b
-1 -1 86 417 1 1 85 399 @b
-1 -1 194 417 1 1 193 399 @b
-1 -1 302 417 1 1 301 399 @b
-1 -1 410 417 1 1 409 399 @b
-1 -1 518 417 1 1 517 399 @b
103 433 :M
5.747 .575(robotic tape)J
209 433 :M
3.658 .366(10s \(10B ns\))J
342 433 :M
1.191 .119(1 TB)J
433 433 :M
1.104($0.01/MB)A
-1 -1 86 418 1 1 85 417 @b
86 418 -1 1 193 417 1 86 417 @a
-1 -1 194 418 1 1 193 417 @b
194 418 -1 1 301 417 1 194 417 @a
-1 -1 302 418 1 1 301 417 @b
302 418 -1 1 409 417 1 302 417 @a
-1 -1 410 418 1 1 409 417 @b
410 418 -1 1 517 417 1 410 417 @a
-1 -1 518 418 1 1 517 417 @b
-1 -1 86 436 1 1 85 418 @b
-1 -1 86 437 1 1 85 436 @b
-1 -1 86 437 1 1 85 436 @b
86 437 -1 1 193 436 1 86 436 @a
-1 -1 194 436 1 1 193 418 @b
-1 -1 194 437 1 1 193 436 @b
194 437 -1 1 301 436 1 194 436 @a
-1 -1 302 436 1 1 301 418 @b
-1 -1 302 437 1 1 301 436 @b
302 437 -1 1 409 436 1 302 436 @a
-1 -1 410 436 1 1 409 418 @b
-1 -1 410 437 1 1 409 436 @b
410 437 -1 1 517 436 1 410 436 @a
-1 -1 518 436 1 1 517 418 @b
-1 -1 518 437 1 1 517 436 @b
-1 -1 518 437 1 1 517 436 @b
126 470 :M
3.437 .344(Use caching at each level, to provide illusion of a terabyte, with)J
126 488 :M
5.013 .501(register access times.)J
126 542 :M
4.406 .441(Works because programs aren't random.  Exploit )J
f1_12 sf
1.013(locality)A
f3_12 sf
3.522 .352(: that)J
126 560 :M
4.203 .42(computers behave in future like they have in the past.)J
126 596 :M
f1_12 sf
7.385 .738(Temporal locality)J
f3_12 sf
4.395 .439(: will reference same locations as accessed)J
126 614 :M
4.313 .431(in the recent past)J
126 650 :M
f1_12 sf
6.669 .667(Spatial locality)J
f3_12 sf
4.671 .467(: will reference locations near those accessed)J
126 668 :M
4.313 .431(in the recent past)J
90 704 :M
f1_14 sf
7.662 .766(14.4 Caching applied to address translation)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 3 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
4.562 .456(Often reference same page repeatedly, why go through entire)J
126 120 :M
5.746 .575(translation each time?)J
126 141 402 267 rC
259 264 -1 1 296 324 1 259 263 @a
-1 -1 260 264 1 1 282 151 @b
282 152 -1 1 374 154 1 282 151 @a
373 155 -1 1 398 273 1 373 154 @a
-1 -1 373 331 1 1 397 273 @b
295 325 -1 1 373 330 1 295 324 @a
452.5 212.5 74 127 rS
45 43 174 256 @f
158 260 :M
-.684(CPU)A
286 284 :M
(Translation)S
286 300 :M
(    \(MMU\))S
462 231 :M
(Physical)S
462 247 :M
(Memory)S
13 139 187 273 216 @k
-1 -1 195 242 1 1 267 217 @b
13 171 219 451 235 @k
381 216 -1 1 446 234 1 381 215 @a
13 140 188 439 326 @k
13 -40 8 288 371 @k
-1 -1 295 371 1 1 433 327 @b
13 198 246 288 371 @k
13 18 66 185 278 @k
189 283 -1 1 285 367 1 189 282 @a
194 204 :M
(Virtual)S
194 220 :M
(Address)S
396 199 :M
(Physical)S
396 215 :M
(Address)S
244 387 :M
(Data read or write)S
244 403 :M
(\(untranslated\))S
287 203 :M
(remember?)S
287 219 :M
(yes)S
287 235 :M
(no)S
13 156 204 366 214 @k
316 215 -1 1 361 214 1 316 214 @a
13 230 278 305 270 @k
295 237 -1 1 305 264 1 295 236 @a
13 103 151 364 222 @k
-1 -1 329 271 1 1 361 227 @b
322 255 :M
(remember!)S
306 186 :M
-.318(TLB)A
gR
gS 30 31 552 730 rC
126 459 :M
f1_12 sf
7.846 .785(Translation Buffer, Translation Lookaside Buffer)J
f3_12 sf
(:)S
126 477 :M
4.765 .477(hardware table of frequently used translations, to avoid having)J
126 495 :M
3.238 .324(to go through page table lookup in common case.  Typically, on)J
126 513 :M
3.806 .381(chip, so access time of 5-10ns, instead of several hundred for)J
126 531 :M
6.633 .663(main memory.)J
126 567 :M
f1_12 sf
7.028 .703(TLB for example from previous lecture \(simple paging\))J
126 585 :M
f3_12 sf
4.632 .463(virtual page #)J
270 585 :M
4.372 .437(physical page #)J
414 585 :M
5.215 .521(control bits)J
126 603 :M
(2)S
270 603 :M
(1)S
414 603 :M
4.799 .48(valid, rw)J
126 621 :M
(-)S
270 621 :M
(-)S
414 621 :M
1.129(invalid)A
126 639 :M
(0)S
270 639 :M
(4)S
414 639 :M
4.799 .48(valid, rw)J
90 675 :M
f1_12 sf
5.764 .576(14.4.1 How do we tell if needed translation is in TLB?)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 4 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.231 .423(1. Search table in sequential order)J
126 120 :M
2.039 .204(2. )J
f1_12 sf
7.391 .739(Direct mapped:)J
f3_12 sf
3.805 .38( restrict each virtual page to use specific)J
126 138 :M
1.951 .195(slot in TLB)J
126 384 :M
.739 .074( )J
130 141 337 243 rC
304.5 181.5 81 147 rS
299 351 :M
(direct mapped)S
-1 -1 345 329 1 1 344 181 @b
145.5 162.5 72 21 rS
148 158 :M
(virtual page #)S
235 207 :M
(hash)S
23 20 180 285.5 @f
172 290 :M
(=?)S
13 -94 -46 165 337 @k
-1 -1 168 332 1 1 180 296 @b
153 311 :M
(no)S
138 347 :M
(full translation)S
138 363 :M
(replace TLB entry)S
301 157 :M
(virtual )S
301 173 :M
(page #)S
353 159 :M
(phys)S
353 175 :M
(page #)S
13 181 229 322 251 @k
182 184 -1 1 318 249 1 182 183 @a
13 -114 -66 180 275 @k
-1 -1 181 270 1 1 180 184 @b
13 -37 11 194 282 @k
-1 -1 201 282 1 1 320 251 @b
13 177 225 254 314 @k
191 290 -1 1 249 312 1 191 289 @a
238 303 :M
(yes)S
13 127 175 364 251 @k
-1 -1 254 315 1 1 359 254 @b
13 156 204 429 249 @k
365 250 -1 1 424 249 1 365 249 @a
428 242 :M
(use )S
428 258 :M
-.318(TLB)A
428 274 :M
(entry)S
gR
gS 30 31 552 730 rC
126 399 :M
f3_12 sf
3.886 .389(For example, use upper bits of virtual page number to index)J
126 417 :M
3.419 .342(TLB.  Compare against lower bits of virtual page number to)J
126 435 :M
4.208 .421(check for match.)J
126 471 :M
3.877 .388(Consider a 256 entry TLB, and the following reference stream)J
126 489 :M
4.02 .402(of virtual page numbers \(in hex\):)J
126 525 :M
2.217(621)A
126 543 :M
1.971(2145)A
126 561 :M
2.217(621)A
126 579 :M
1.971(2145)A
126 597 :M
-.392(...)A
126 615 :M
2.217(321)A
126 633 :M
1.971(2145)A
126 651 :M
2.217(321)A
126 669 :M
2.217(621)A
126 705 :M
3.724 .372(What happens to the TLB?)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 5 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 102 :M
f3_12 sf
3.478 .348(Do we need to store the entire virtual page number in the TLB?)J
126 120 :M
3.465 .346(No, only the upper bits.)J
126 156 :M
2.876 .288(What if two pages conflict for the same TLB slot?  Ex: program)J
126 174 :M
4.993 .499(counter and stack.)J
126 228 :M
f1_12 sf
1.266(Thrashing)A
f3_12 sf
3.732 .373(: cache contents tossed out even if still needed)J
126 264 :M
3.811 .381(One approach: pick hash function to minimize conflicts)J
126 300 :M
3.028 .303(What if use low order bits as index into TLB?)J
126 336 :M
3.107 .311(What if use high order bits as index into TLB?)J
126 372 :M
3.428 .343(Thus, use selection of high order and low order bits as index.)J
126 408 :M
2.072 .207(3. )J
f1_12 sf
6.786 .679(Set associativity)J
f3_12 sf
3.906 .391(: arrange TLB \(or cache\) as N separate)J
126 426 :M
3.236 .324(banks.  Do simultaneous lookup in each bank.  In this case,)J
126 444 :M
3.953 .395(called "N-way set associative cache".)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 6 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 72 412 281 rC
296.5 149.5 81 71 rS
141.5 93.5 72 21 rS
144 89 :M
f3_12 sf
(virtual page #)S
221 125 :M
(hash)S
23 20 175 289.5 @f
167 294 :M
(=?)S
295 130 :M
(virtual )S
295 146 :M
(page #)S
343 129 :M
(phys)S
343 145 :M
(page #)S
13 181 229 320 182 @k
180 115 -1 1 316 180 1 180 114 @a
13 -114 -66 176 282 @k
-1 -1 177 277 1 1 176 115 @b
443.5 149.5 81 71 rS
-1 -1 337 221 1 1 336 149 @b
444 129 :M
(virtual )S
444 145 :M
(page #)S
492 128 :M
(phys)S
492 144 :M
(page #)S
-1 -1 486 220 1 1 485 148 @b
13 156 204 385 103 @k
212 104 -1 1 380 103 1 212 103 @a
13 203 251 458 181 @k
386 103 -1 1 455 177 1 386 102 @a
13 -61 -13 317 291 @k
-1 -1 323 289 1 1 458 182 @b
23 20 303 291.5 @f
295 296 :M
(=?)S
13 -60 -12 187 280 @k
-1 -1 193 278 1 1 317 183 @b
13 211 259 293 279 @k
180 118 -1 1 291 274 1 180 117 @a
159 332 :M
(if either match, use TLB entry, otherwise,)S
159 348 :M
(translate and replace one of the entries.)S
gR
gS 30 31 552 730 rC
237 386 :M
f1_12 sf
9.864 .986(Two-way set associative)J
126 422 :M
f3_12 sf
3.762 .376( More set associativity, less chance of thrashing.  Translations)J
126 440 :M
4.109 .411(can be stored, replaced in either bank.)J
126 458 :M
2.325 .233(4. )J
f1_12 sf
7.867 .787(Fully associative)J
f3_12 sf
4.762 .476(: translation can be stored anywhere in)J
126 476 :M
2.661 .266(TLB, so check all entries in the TLB in parallel.)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 7 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 72 492 286 rC
188.5 143.5 81 25 rS
105.5 93.5 72 21 rS
108 89 :M
f3_12 sf
(virtual page #)S
240 321 :M
(if any match, use that TLB entry, otherwise,)S
240 337 :M
(translate and replace one of the entries.)S
-1 -1 229 168 1 1 228 142 @b
309.5 143.5 81 25 rS
-1 -1 350 168 1 1 349 142 @b
549.5 146.5 81 25 rS
-1 -1 468 168 1 1 467 142 @b
427.5 143.5 81 25 rS
-1 -1 596 172 1 1 595 146 @b
23 20 204 247.5 @f
198 254 :M
(=?)S
23 20 332 249.5 @f
324 254 :M
(=?)S
23 20 451 249.5 @f
443 254 :M
(=?)S
23 20 574 246.5 @f
566 251 :M
(=?)S
13 -114 -66 132 248 @k
-1 -1 133 243 1 1 132 113 @b
13 156 204 188 246 @k
130 247 -1 1 183 246 1 130 246 @a
13 -114 -66 209 234 @k
-1 -1 210 229 1 1 209 151 @b
13 245 293 333 233 @k
332 158 -1 1 334 227 1 332 157 @a
13 245 293 450 238 @k
449 163 -1 1 451 232 1 449 162 @a
13 245 293 574 233 @k
573 158 -1 1 575 227 1 573 157 @a
gR
gS 30 31 552 730 rC
230 373 :M
f1_12 sf
7.496 .75(Fully associative TLB)J
126 391 :M
f3_12 sf
4.296 .43(One element per bank, one comparator per bank.)J
126 409 :M
3.449 .345(Same set of options, whether you are building TLB or any kind)J
126 427 :M
2.947 .295(of cache.   Typically, TLB's are small and fully associative.)J
126 445 :M
4.275 .427(Hardware caches are larger, and direct mapped or set)J
126 463 :M
3.989 .399(associative to a small degree.)J
90 499 :M
f1_12 sf
6.352 .635(14.4.2 How do we choose which item to replace?)J
126 535 :M
f3_12 sf
3.57 .357(For direct mapped, never any choice as to which item to)J
126 553 :M
3.542 .354(replace.  But for set associative or fully associative cache, have)J
126 571 :M
2.986 .299(a choice.  What should we do?)J
126 607 :M
3.914 .391(Replace least recently used?  Random?  Most recently used?)J
126 625 :M
3.746 .375(Defer until next lecture topic.  In hardware, often choose item)J
126 643 :M
3.947 .395(to replace randomly, because it's simple and fast.  In software)J
126 661 :M
4.453 .445(\(for example, for page replacement\), typically do something)J
126 679 :M
3.362 .336(more sophisticated.  Tradeoff: spend CPU cycles to try to)J
126 697 :M
4.518 .452(improve cache hit rate.)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 8 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 84 :M
f1_12 sf
7.212 .721(14.4.3 Consistency between TLB and page tables)J
126 120 :M
f3_12 sf
4.67 .467(What happens on context switch?)J
126 156 :M
3.798 .38(Have to invalidate entire TLB contents.  When new program)J
126 174 :M
4.394 .439(starts running, will bring in new translations.  Alternatively,)J
126 192 :M
2.928 .293(include process id tag in TLB comparator.  Have to keep TLB)J
126 210 :M
4.651 .465(consistent with whatever the full translation would give.)J
126 246 :M
3.729 .373(What if translation tables change?  For example, to move page)J
126 264 :M
3.218 .322(from memory to disk, or vice versa.  Have to invalidate TLB)J
126 282 :M
1.388(entry.)A
90 318 :M
f1_14 sf
7.554 .755(14.5 Relationship between TLB and hardware)J
90 336 :M
11.759 1.176(memory caches)J
126 375 402 267 rC
259 498 -1 1 296 558 1 259 497 @a
-1 -1 260 498 1 1 282 385 @b
282 386 -1 1 374 388 1 282 385 @a
373 389 -1 1 398 507 1 373 388 @a
-1 -1 373 565 1 1 397 507 @b
295 559 -1 1 373 564 1 295 558 @a
452.5 446.5 74 127 rS
45 43 174 490 @f
158 494 :M
f3_12 sf
-.684(CPU)A
286 518 :M
(Translation)S
286 534 :M
(    \(MMU\))S
462 465 :M
(Physical)S
462 481 :M
(Memory)S
13 139 187 273 450 @k
-1 -1 195 476 1 1 267 451 @b
13 171 219 451 469 @k
381 450 -1 1 446 468 1 381 449 @a
13 140 188 439 560 @k
13 -40 8 288 605 @k
-1 -1 295 605 1 1 433 561 @b
13 198 246 288 605 @k
13 18 66 185 512 @k
189 517 -1 1 285 601 1 189 516 @a
194 438 :M
(Virtual)S
194 454 :M
(Address)S
396 433 :M
(Physical)S
396 449 :M
(Address)S
244 621 :M
(Data read or write)S
244 637 :M
(\(untranslated\))S
287 437 :M
(remember?)S
287 453 :M
(yes)S
287 469 :M
(no)S
13 156 204 366 448 @k
316 449 -1 1 361 448 1 316 448 @a
13 230 278 305 504 @k
295 471 -1 1 305 498 1 295 470 @a
13 103 151 364 456 @k
-1 -1 329 505 1 1 361 461 @b
322 489 :M
(remember!)S
306 420 :M
-.318(TLB)A
gR
gS 30 31 552 730 rC
126 675 :M
f3_12 sf
3.728 .373(Can put a cache of memory values anywhere in this process.)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 9 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 84 :M
f3_12 sf
4.328 .433(If between translation box and memory, called a "physically)J
126 102 :M
3.206 .321(addressed cache".  Could also put a cache between CPU and)J
126 120 :M
4.942 .494(translation box: "virtually addressed cache".)J
126 174 :M
3.365 .336(Virtual memory is a kind of caching: we're going to talk)J
126 192 :M
3.582 .358(about using the contents of main memory as a cache for disk.)J
90 228 :M
f1_14 sf
7.19 .719(14.6 When does caching break down?)J
126 264 :M
f3_12 sf
3.903 .39(MIPS/Snake/Nachos TLB -- software loaded.  Idea was, if have)J
126 282 :M
2.609 .261(high TLB hit rate, ok to trap to software to fill TLB, even if it's a)J
126 300 :M
4.971 .497(bit slower.)J
126 336 :M
3.425 .342(How do we implement this?  How can a process run without)J
126 354 :M
3.541 .354(access to a page table?)J
126 390 :M
5.095 .509(Basic mechanism:)J
126 426 :M
3.217 .322(1. TLB has "present" \(valid\) bit)J
126 444 :M
3.174 .317(    if present, pointer to page frame in memory)J
126 462 :M
2.981 .298(    if not present, use page table in memory)J
126 498 :M
3.038 .304(2. Hardware traps to OS on reference not in TLB)J
126 534 :M
2.796 .28(3. OS software:)J
126 570 :M
2.693 .269(  a. load page table entry into TLB)J
126 588 :M
3.503 .35(  b. continue thread)J
126 624 :M
4.089 .409(All this is transparent -- job doesn't know it happened.)J
126 660 :M
3.07 .307(However, when MIPS was first introduced: 64 item TLB, 4 KB)J
126 678 :M
2.032 .203(page size.  Plus, 1K x 1K x 4 byte video RAM.  Video RAM was)J
126 696 :M
4.4 .44(mapped into virtual memory, to allow graphics programs to)J
126 714 :M
4.294 .429(write directly to display.  What happens?)J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Robin_Briggs; page: 10 of 10)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
endp
%%Trailer
end		% md
%%EOF
